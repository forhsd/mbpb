// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: health.proto

package mbpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MBLink_Health_FullMethodName   = "/mbpb.MBLink/Health"
	MBLink_ReView_FullMethodName   = "/mbpb.MBLink/ReView"
	MBLink_Workflow_FullMethodName = "/mbpb.MBLink/Workflow"
)

// MBLinkClient is the client API for MBLink service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MBLinkClient interface {
	// 健康检查
	Health(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[HealthRequest, HealthReply], error)
	// 运行情况
	ReView(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Overview, Ack], error)
	// 工作流
	Workflow(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[WorkflowRequest, WorkflowReply], error)
}

type mBLinkClient struct {
	cc grpc.ClientConnInterface
}

func NewMBLinkClient(cc grpc.ClientConnInterface) MBLinkClient {
	return &mBLinkClient{cc}
}

func (c *mBLinkClient) Health(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[HealthRequest, HealthReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MBLink_ServiceDesc.Streams[0], MBLink_Health_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[HealthRequest, HealthReply]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MBLink_HealthClient = grpc.BidiStreamingClient[HealthRequest, HealthReply]

func (c *mBLinkClient) ReView(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Overview, Ack], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MBLink_ServiceDesc.Streams[1], MBLink_ReView_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Overview, Ack]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MBLink_ReViewClient = grpc.BidiStreamingClient[Overview, Ack]

func (c *mBLinkClient) Workflow(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[WorkflowRequest, WorkflowReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MBLink_ServiceDesc.Streams[2], MBLink_Workflow_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[WorkflowRequest, WorkflowReply]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MBLink_WorkflowClient = grpc.BidiStreamingClient[WorkflowRequest, WorkflowReply]

// MBLinkServer is the server API for MBLink service.
// All implementations must embed UnimplementedMBLinkServer
// for forward compatibility.
type MBLinkServer interface {
	// 健康检查
	Health(grpc.BidiStreamingServer[HealthRequest, HealthReply]) error
	// 运行情况
	ReView(grpc.BidiStreamingServer[Overview, Ack]) error
	// 工作流
	Workflow(grpc.BidiStreamingServer[WorkflowRequest, WorkflowReply]) error
	mustEmbedUnimplementedMBLinkServer()
}

// UnimplementedMBLinkServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMBLinkServer struct{}

func (UnimplementedMBLinkServer) Health(grpc.BidiStreamingServer[HealthRequest, HealthReply]) error {
	return status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedMBLinkServer) ReView(grpc.BidiStreamingServer[Overview, Ack]) error {
	return status.Errorf(codes.Unimplemented, "method ReView not implemented")
}
func (UnimplementedMBLinkServer) Workflow(grpc.BidiStreamingServer[WorkflowRequest, WorkflowReply]) error {
	return status.Errorf(codes.Unimplemented, "method Workflow not implemented")
}
func (UnimplementedMBLinkServer) mustEmbedUnimplementedMBLinkServer() {}
func (UnimplementedMBLinkServer) testEmbeddedByValue()                {}

// UnsafeMBLinkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MBLinkServer will
// result in compilation errors.
type UnsafeMBLinkServer interface {
	mustEmbedUnimplementedMBLinkServer()
}

func RegisterMBLinkServer(s grpc.ServiceRegistrar, srv MBLinkServer) {
	// If the following call pancis, it indicates UnimplementedMBLinkServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MBLink_ServiceDesc, srv)
}

func _MBLink_Health_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MBLinkServer).Health(&grpc.GenericServerStream[HealthRequest, HealthReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MBLink_HealthServer = grpc.BidiStreamingServer[HealthRequest, HealthReply]

func _MBLink_ReView_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MBLinkServer).ReView(&grpc.GenericServerStream[Overview, Ack]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MBLink_ReViewServer = grpc.BidiStreamingServer[Overview, Ack]

func _MBLink_Workflow_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MBLinkServer).Workflow(&grpc.GenericServerStream[WorkflowRequest, WorkflowReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MBLink_WorkflowServer = grpc.BidiStreamingServer[WorkflowRequest, WorkflowReply]

// MBLink_ServiceDesc is the grpc.ServiceDesc for MBLink service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MBLink_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mbpb.MBLink",
	HandlerType: (*MBLinkServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Health",
			Handler:       _MBLink_Health_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ReView",
			Handler:       _MBLink_ReView_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Workflow",
			Handler:       _MBLink_Workflow_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "health.proto",
}
