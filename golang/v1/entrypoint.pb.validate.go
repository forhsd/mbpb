// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: entrypoint.proto

package mbpb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on EnableRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EnableRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnableRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EnableRequestMultiError, or
// nil if none found.
func (m *EnableRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EnableRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDBInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EnableRequestValidationError{
					field:  "DBInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EnableRequestValidationError{
					field:  "DBInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDBInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EnableRequestValidationError{
				field:  "DBInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for EnterpriseID

	// no validation rules for CardId

	// no validation rules for UserId

	// no validation rules for SqlScript

	for idx, item := range m.GetTables() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EnableRequestValidationError{
						field:  fmt.Sprintf("Tables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EnableRequestValidationError{
						field:  fmt.Sprintf("Tables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnableRequestValidationError{
					field:  fmt.Sprintf("Tables[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Crontab != nil {

		if all {
			switch v := interface{}(m.GetCrontab()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EnableRequestValidationError{
						field:  "Crontab",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EnableRequestValidationError{
						field:  "Crontab",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCrontab()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnableRequestValidationError{
					field:  "Crontab",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Extra != nil {

		if all {
			switch v := interface{}(m.GetExtra()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EnableRequestValidationError{
						field:  "Extra",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EnableRequestValidationError{
						field:  "Extra",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExtra()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnableRequestValidationError{
					field:  "Extra",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Over != nil {

		if all {
			switch v := interface{}(m.GetOver()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EnableRequestValidationError{
						field:  "Over",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EnableRequestValidationError{
						field:  "Over",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOver()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnableRequestValidationError{
					field:  "Over",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return EnableRequestMultiError(errors)
	}

	return nil
}

// EnableRequestMultiError is an error wrapping multiple validation errors
// returned by EnableRequest.ValidateAll() if the designated constraints
// aren't met.
type EnableRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnableRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnableRequestMultiError) AllErrors() []error { return m }

// EnableRequestValidationError is the validation error returned by
// EnableRequest.Validate if the designated constraints aren't met.
type EnableRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnableRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnableRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnableRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnableRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnableRequestValidationError) ErrorName() string { return "EnableRequestValidationError" }

// Error satisfies the builtin error interface
func (e EnableRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnableRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnableRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnableRequestValidationError{}

// Validate checks the field values on EnableReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EnableReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnableReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EnableReplyMultiError, or
// nil if none found.
func (m *EnableReply) ValidateAll() error {
	return m.validate(true)
}

func (m *EnableReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOutTable()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EnableReplyValidationError{
					field:  "OutTable",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EnableReplyValidationError{
					field:  "OutTable",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOutTable()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EnableReplyValidationError{
				field:  "OutTable",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetColumns() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EnableReplyValidationError{
						field:  fmt.Sprintf("Columns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EnableReplyValidationError{
						field:  fmt.Sprintf("Columns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnableReplyValidationError{
					field:  fmt.Sprintf("Columns[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.NextRunTime != nil {
		// no validation rules for NextRunTime
	}

	if m.Error != nil {

		if all {
			switch v := interface{}(m.GetError()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EnableReplyValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EnableReplyValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnableReplyValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return EnableReplyMultiError(errors)
	}

	return nil
}

// EnableReplyMultiError is an error wrapping multiple validation errors
// returned by EnableReply.ValidateAll() if the designated constraints aren't met.
type EnableReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnableReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnableReplyMultiError) AllErrors() []error { return m }

// EnableReplyValidationError is the validation error returned by
// EnableReply.Validate if the designated constraints aren't met.
type EnableReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnableReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnableReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnableReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnableReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnableReplyValidationError) ErrorName() string { return "EnableReplyValidationError" }

// Error satisfies the builtin error interface
func (e EnableReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnableReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnableReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnableReplyValidationError{}

// Validate checks the field values on Request with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RequestMultiError, or nil if none found.
func (m *Request) ValidateAll() error {
	return m.validate(true)
}

func (m *Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EnterpriseID

	if m.GetCardId() < 1 {
		err := RequestValidationError{
			field:  "CardId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Over != nil {

		if all {
			switch v := interface{}(m.GetOver()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RequestValidationError{
						field:  "Over",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RequestValidationError{
						field:  "Over",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOver()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RequestValidationError{
					field:  "Over",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RequestMultiError(errors)
	}

	return nil
}

// RequestMultiError is an error wrapping multiple validation errors returned
// by Request.ValidateAll() if the designated constraints aren't met.
type RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestMultiError) AllErrors() []error { return m }

// RequestValidationError is the validation error returned by Request.Validate
// if the designated constraints aren't met.
type RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestValidationError) ErrorName() string { return "RequestValidationError" }

// Error satisfies the builtin error interface
func (e RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestValidationError{}

// Validate checks the field values on Over with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Over) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Over with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OverMultiError, or nil if none found.
func (m *Over) ValidateAll() error {
	return m.validate(true)
}

func (m *Over) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Hash != nil {
		// no validation rules for Hash
	}

	if m.SequenceID != nil {
		// no validation rules for SequenceID
	}

	if m.RunType != nil {
		// no validation rules for RunType
	}

	if m.StartRunTime != nil {

		if all {
			switch v := interface{}(m.GetStartRunTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OverValidationError{
						field:  "StartRunTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OverValidationError{
						field:  "StartRunTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStartRunTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OverValidationError{
					field:  "StartRunTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.NextRunTime != nil {

		if all {
			switch v := interface{}(m.GetNextRunTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OverValidationError{
						field:  "NextRunTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OverValidationError{
						field:  "NextRunTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNextRunTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OverValidationError{
					field:  "NextRunTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return OverMultiError(errors)
	}

	return nil
}

// OverMultiError is an error wrapping multiple validation errors returned by
// Over.ValidateAll() if the designated constraints aren't met.
type OverMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OverMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OverMultiError) AllErrors() []error { return m }

// OverValidationError is the validation error returned by Over.Validate if the
// designated constraints aren't met.
type OverValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OverValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OverValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OverValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OverValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OverValidationError) ErrorName() string { return "OverValidationError" }

// Error satisfies the builtin error interface
func (e OverValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOver.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OverValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OverValidationError{}

// Validate checks the field values on Reply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Reply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Reply with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ReplyMultiError, or nil if none found.
func (m *Reply) ValidateAll() error {
	return m.validate(true)
}

func (m *Reply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetColumns() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReplyValidationError{
						field:  fmt.Sprintf("Columns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReplyValidationError{
						field:  fmt.Sprintf("Columns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReplyValidationError{
					field:  fmt.Sprintf("Columns[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Key != nil {
		// no validation rules for Key
	}

	if m.SequenceID != nil {
		// no validation rules for SequenceID
	}

	if m.Error != nil {

		if all {
			switch v := interface{}(m.GetError()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReplyValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReplyValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReplyValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ReplyMultiError(errors)
	}

	return nil
}

// ReplyMultiError is an error wrapping multiple validation errors returned by
// Reply.ValidateAll() if the designated constraints aren't met.
type ReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReplyMultiError) AllErrors() []error { return m }

// ReplyValidationError is the validation error returned by Reply.Validate if
// the designated constraints aren't met.
type ReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReplyValidationError) ErrorName() string { return "ReplyValidationError" }

// Error satisfies the builtin error interface
func (e ReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReplyValidationError{}

// Validate checks the field values on Graph with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Graph) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Graph with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in GraphMultiError, or nil if none found.
func (m *Graph) ValidateAll() error {
	return m.validate(true)
}

func (m *Graph) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	for idx, item := range m.GetNodes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GraphValidationError{
						field:  fmt.Sprintf("Nodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GraphValidationError{
						field:  fmt.Sprintf("Nodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GraphValidationError{
					field:  fmt.Sprintf("Nodes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetEdges() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GraphValidationError{
						field:  fmt.Sprintf("Edges[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GraphValidationError{
						field:  fmt.Sprintf("Edges[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GraphValidationError{
					field:  fmt.Sprintf("Edges[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GraphMultiError(errors)
	}

	return nil
}

// GraphMultiError is an error wrapping multiple validation errors returned by
// Graph.ValidateAll() if the designated constraints aren't met.
type GraphMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GraphMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GraphMultiError) AllErrors() []error { return m }

// GraphValidationError is the validation error returned by Graph.Validate if
// the designated constraints aren't met.
type GraphValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GraphValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GraphValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GraphValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GraphValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GraphValidationError) ErrorName() string { return "GraphValidationError" }

// Error satisfies the builtin error interface
func (e GraphValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGraph.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GraphValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GraphValidationError{}

// Validate checks the field values on Edge with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Edge) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Edge with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EdgeMultiError, or nil if none found.
func (m *Edge) ValidateAll() error {
	return m.validate(true)
}

func (m *Edge) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Source

	// no validation rules for Target

	if len(errors) > 0 {
		return EdgeMultiError(errors)
	}

	return nil
}

// EdgeMultiError is an error wrapping multiple validation errors returned by
// Edge.ValidateAll() if the designated constraints aren't met.
type EdgeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EdgeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EdgeMultiError) AllErrors() []error { return m }

// EdgeValidationError is the validation error returned by Edge.Validate if the
// designated constraints aren't met.
type EdgeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EdgeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EdgeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EdgeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EdgeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EdgeValidationError) ErrorName() string { return "EdgeValidationError" }

// Error satisfies the builtin error interface
func (e EdgeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEdge.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EdgeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EdgeValidationError{}

// Validate checks the field values on Source with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Source) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Source with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SourceMultiError, or nil if none found.
func (m *Source) ValidateAll() error {
	return m.validate(true)
}

func (m *Source) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for BaseId

	// no validation rules for Type

	if len(errors) > 0 {
		return SourceMultiError(errors)
	}

	return nil
}

// SourceMultiError is an error wrapping multiple validation errors returned by
// Source.ValidateAll() if the designated constraints aren't met.
type SourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SourceMultiError) AllErrors() []error { return m }

// SourceValidationError is the validation error returned by Source.Validate if
// the designated constraints aren't met.
type SourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SourceValidationError) ErrorName() string { return "SourceValidationError" }

// Error satisfies the builtin error interface
func (e SourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SourceValidationError{}

// Validate checks the field values on Table with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Table) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Table with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TableMultiError, or nil if none found.
func (m *Table) ValidateAll() error {
	return m.validate(true)
}

func (m *Table) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Schema

	// no validation rules for Table

	if all {
		switch v := interface{}(m.GetSource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TableValidationError{
					field:  "Source",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TableValidationError{
					field:  "Source",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TableValidationError{
				field:  "Source",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TableMultiError(errors)
	}

	return nil
}

// TableMultiError is an error wrapping multiple validation errors returned by
// Table.ValidateAll() if the designated constraints aren't met.
type TableMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TableMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TableMultiError) AllErrors() []error { return m }

// TableValidationError is the validation error returned by Table.Validate if
// the designated constraints aren't met.
type TableValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TableValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TableValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TableValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TableValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TableValidationError) ErrorName() string { return "TableValidationError" }

// Error satisfies the builtin error interface
func (e TableValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTable.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TableValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TableValidationError{}

// Validate checks the field values on Column with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Column) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Column with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ColumnMultiError, or nil if none found.
func (m *Column) ValidateAll() error {
	return m.validate(true)
}

func (m *Column) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Type

	if len(errors) > 0 {
		return ColumnMultiError(errors)
	}

	return nil
}

// ColumnMultiError is an error wrapping multiple validation errors returned by
// Column.ValidateAll() if the designated constraints aren't met.
type ColumnMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ColumnMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ColumnMultiError) AllErrors() []error { return m }

// ColumnValidationError is the validation error returned by Column.Validate if
// the designated constraints aren't met.
type ColumnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ColumnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ColumnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ColumnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ColumnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ColumnValidationError) ErrorName() string { return "ColumnValidationError" }

// Error satisfies the builtin error interface
func (e ColumnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sColumn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ColumnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ColumnValidationError{}

// Validate checks the field values on DBDetail with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DBDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DBDetail with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DBDetailMultiError, or nil
// if none found.
func (m *DBDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *DBDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DBType

	// no validation rules for Host

	// no validation rules for Port

	// no validation rules for User

	// no validation rules for Pwd

	// no validation rules for DBName

	// no validation rules for ConnectParams

	if len(errors) > 0 {
		return DBDetailMultiError(errors)
	}

	return nil
}

// DBDetailMultiError is an error wrapping multiple validation errors returned
// by DBDetail.ValidateAll() if the designated constraints aren't met.
type DBDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DBDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DBDetailMultiError) AllErrors() []error { return m }

// DBDetailValidationError is the validation error returned by
// DBDetail.Validate if the designated constraints aren't met.
type DBDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DBDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DBDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DBDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DBDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DBDetailValidationError) ErrorName() string { return "DBDetailValidationError" }

// Error satisfies the builtin error interface
func (e DBDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDBDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DBDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DBDetailValidationError{}

// Validate checks the field values on CycleOnce with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CycleOnce) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CycleOnce with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CycleOnceMultiError, or nil
// if none found.
func (m *CycleOnce) ValidateAll() error {
	return m.validate(true)
}

func (m *CycleOnce) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetExpression()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CycleOnceValidationError{
					field:  "Expression",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CycleOnceValidationError{
					field:  "Expression",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpression()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CycleOnceValidationError{
				field:  "Expression",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CycleOnceMultiError(errors)
	}

	return nil
}

// CycleOnceMultiError is an error wrapping multiple validation errors returned
// by CycleOnce.ValidateAll() if the designated constraints aren't met.
type CycleOnceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CycleOnceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CycleOnceMultiError) AllErrors() []error { return m }

// CycleOnceValidationError is the validation error returned by
// CycleOnce.Validate if the designated constraints aren't met.
type CycleOnceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CycleOnceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CycleOnceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CycleOnceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CycleOnceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CycleOnceValidationError) ErrorName() string { return "CycleOnceValidationError" }

// Error satisfies the builtin error interface
func (e CycleOnceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCycleOnce.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CycleOnceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CycleOnceValidationError{}

// Validate checks the field values on CycleEvery with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CycleEvery) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CycleEvery with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CycleEveryMultiError, or
// nil if none found.
func (m *CycleEvery) ValidateAll() error {
	return m.validate(true)
}

func (m *CycleEvery) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEveryExpress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CycleEveryValidationError{
					field:  "EveryExpress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CycleEveryValidationError{
					field:  "EveryExpress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEveryExpress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CycleEveryValidationError{
				field:  "EveryExpress",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Expression != nil {

		if all {
			switch v := interface{}(m.GetExpression()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CycleEveryValidationError{
						field:  "Expression",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CycleEveryValidationError{
						field:  "Expression",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExpression()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CycleEveryValidationError{
					field:  "Expression",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CycleEveryMultiError(errors)
	}

	return nil
}

// CycleEveryMultiError is an error wrapping multiple validation errors
// returned by CycleEvery.ValidateAll() if the designated constraints aren't met.
type CycleEveryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CycleEveryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CycleEveryMultiError) AllErrors() []error { return m }

// CycleEveryValidationError is the validation error returned by
// CycleEvery.Validate if the designated constraints aren't met.
type CycleEveryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CycleEveryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CycleEveryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CycleEveryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CycleEveryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CycleEveryValidationError) ErrorName() string { return "CycleEveryValidationError" }

// Error satisfies the builtin error interface
func (e CycleEveryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCycleEvery.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CycleEveryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CycleEveryValidationError{}

// Validate checks the field values on CycleEveryTime with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CycleEveryTime) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CycleEveryTime with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CycleEveryTimeMultiError,
// or nil if none found.
func (m *CycleEveryTime) ValidateAll() error {
	return m.validate(true)
}

func (m *CycleEveryTime) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EveryType

	if all {
		switch v := interface{}(m.GetRunTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CycleEveryTimeValidationError{
					field:  "RunTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CycleEveryTimeValidationError{
					field:  "RunTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRunTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CycleEveryTimeValidationError{
				field:  "RunTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.EveryTime.(type) {
	case *CycleEveryTime_EveryDay:
		if v == nil {
			err := CycleEveryTimeValidationError{
				field:  "EveryTime",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetEveryDay()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CycleEveryTimeValidationError{
						field:  "EveryDay",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CycleEveryTimeValidationError{
						field:  "EveryDay",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEveryDay()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CycleEveryTimeValidationError{
					field:  "EveryDay",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *CycleEveryTime_EveryWeek:
		if v == nil {
			err := CycleEveryTimeValidationError{
				field:  "EveryTime",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetEveryWeek()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CycleEveryTimeValidationError{
						field:  "EveryWeek",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CycleEveryTimeValidationError{
						field:  "EveryWeek",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEveryWeek()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CycleEveryTimeValidationError{
					field:  "EveryWeek",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *CycleEveryTime_EveryMonth:
		if v == nil {
			err := CycleEveryTimeValidationError{
				field:  "EveryTime",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetEveryMonth()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CycleEveryTimeValidationError{
						field:  "EveryMonth",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CycleEveryTimeValidationError{
						field:  "EveryMonth",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEveryMonth()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CycleEveryTimeValidationError{
					field:  "EveryMonth",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *CycleEveryTime_EveryQuarter:
		if v == nil {
			err := CycleEveryTimeValidationError{
				field:  "EveryTime",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetEveryQuarter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CycleEveryTimeValidationError{
						field:  "EveryQuarter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CycleEveryTimeValidationError{
						field:  "EveryQuarter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEveryQuarter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CycleEveryTimeValidationError{
					field:  "EveryQuarter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *CycleEveryTime_EveryYear:
		if v == nil {
			err := CycleEveryTimeValidationError{
				field:  "EveryTime",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetEveryYear()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CycleEveryTimeValidationError{
						field:  "EveryYear",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CycleEveryTimeValidationError{
						field:  "EveryYear",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEveryYear()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CycleEveryTimeValidationError{
					field:  "EveryYear",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return CycleEveryTimeMultiError(errors)
	}

	return nil
}

// CycleEveryTimeMultiError is an error wrapping multiple validation errors
// returned by CycleEveryTime.ValidateAll() if the designated constraints
// aren't met.
type CycleEveryTimeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CycleEveryTimeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CycleEveryTimeMultiError) AllErrors() []error { return m }

// CycleEveryTimeValidationError is the validation error returned by
// CycleEveryTime.Validate if the designated constraints aren't met.
type CycleEveryTimeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CycleEveryTimeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CycleEveryTimeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CycleEveryTimeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CycleEveryTimeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CycleEveryTimeValidationError) ErrorName() string { return "CycleEveryTimeValidationError" }

// Error satisfies the builtin error interface
func (e CycleEveryTimeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCycleEveryTime.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CycleEveryTimeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CycleEveryTimeValidationError{}

// Validate checks the field values on EveryExpress with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EveryExpress) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EveryExpress with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EveryExpressMultiError, or
// nil if none found.
func (m *EveryExpress) ValidateAll() error {
	return m.validate(true)
}

func (m *EveryExpress) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CycleType

	// no validation rules for CycleValue

	if len(errors) > 0 {
		return EveryExpressMultiError(errors)
	}

	return nil
}

// EveryExpressMultiError is an error wrapping multiple validation errors
// returned by EveryExpress.ValidateAll() if the designated constraints aren't met.
type EveryExpressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EveryExpressMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EveryExpressMultiError) AllErrors() []error { return m }

// EveryExpressValidationError is the validation error returned by
// EveryExpress.Validate if the designated constraints aren't met.
type EveryExpressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EveryExpressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EveryExpressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EveryExpressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EveryExpressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EveryExpressValidationError) ErrorName() string { return "EveryExpressValidationError" }

// Error satisfies the builtin error interface
func (e EveryExpressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEveryExpress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EveryExpressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EveryExpressValidationError{}

// Validate checks the field values on Expression with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Expression) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Expression with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExpressionMultiError, or
// nil if none found.
func (m *Expression) ValidateAll() error {
	return m.validate(true)
}

func (m *Expression) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Express

	if len(errors) > 0 {
		return ExpressionMultiError(errors)
	}

	return nil
}

// ExpressionMultiError is an error wrapping multiple validation errors
// returned by Expression.ValidateAll() if the designated constraints aren't met.
type ExpressionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExpressionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExpressionMultiError) AllErrors() []error { return m }

// ExpressionValidationError is the validation error returned by
// Expression.Validate if the designated constraints aren't met.
type ExpressionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExpressionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExpressionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExpressionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExpressionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExpressionValidationError) ErrorName() string { return "ExpressionValidationError" }

// Error satisfies the builtin error interface
func (e ExpressionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExpression.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExpressionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExpressionValidationError{}

// Validate checks the field values on CycleEveryDay with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CycleEveryDay) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CycleEveryDay with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CycleEveryDayMultiError, or
// nil if none found.
func (m *CycleEveryDay) ValidateAll() error {
	return m.validate(true)
}

func (m *CycleEveryDay) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CycleEveryDayMultiError(errors)
	}

	return nil
}

// CycleEveryDayMultiError is an error wrapping multiple validation errors
// returned by CycleEveryDay.ValidateAll() if the designated constraints
// aren't met.
type CycleEveryDayMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CycleEveryDayMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CycleEveryDayMultiError) AllErrors() []error { return m }

// CycleEveryDayValidationError is the validation error returned by
// CycleEveryDay.Validate if the designated constraints aren't met.
type CycleEveryDayValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CycleEveryDayValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CycleEveryDayValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CycleEveryDayValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CycleEveryDayValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CycleEveryDayValidationError) ErrorName() string { return "CycleEveryDayValidationError" }

// Error satisfies the builtin error interface
func (e CycleEveryDayValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCycleEveryDay.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CycleEveryDayValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CycleEveryDayValidationError{}

// Validate checks the field values on CycleEveryWeek with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CycleEveryWeek) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CycleEveryWeek with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CycleEveryWeekMultiError,
// or nil if none found.
func (m *CycleEveryWeek) ValidateAll() error {
	return m.validate(true)
}

func (m *CycleEveryWeek) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CycleEveryWeekMultiError(errors)
	}

	return nil
}

// CycleEveryWeekMultiError is an error wrapping multiple validation errors
// returned by CycleEveryWeek.ValidateAll() if the designated constraints
// aren't met.
type CycleEveryWeekMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CycleEveryWeekMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CycleEveryWeekMultiError) AllErrors() []error { return m }

// CycleEveryWeekValidationError is the validation error returned by
// CycleEveryWeek.Validate if the designated constraints aren't met.
type CycleEveryWeekValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CycleEveryWeekValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CycleEveryWeekValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CycleEveryWeekValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CycleEveryWeekValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CycleEveryWeekValidationError) ErrorName() string { return "CycleEveryWeekValidationError" }

// Error satisfies the builtin error interface
func (e CycleEveryWeekValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCycleEveryWeek.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CycleEveryWeekValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CycleEveryWeekValidationError{}

// Validate checks the field values on CycleEveryMonth with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CycleEveryMonth) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CycleEveryMonth with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CycleEveryMonthMultiError, or nil if none found.
func (m *CycleEveryMonth) ValidateAll() error {
	return m.validate(true)
}

func (m *CycleEveryMonth) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CycleEveryMonthMultiError(errors)
	}

	return nil
}

// CycleEveryMonthMultiError is an error wrapping multiple validation errors
// returned by CycleEveryMonth.ValidateAll() if the designated constraints
// aren't met.
type CycleEveryMonthMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CycleEveryMonthMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CycleEveryMonthMultiError) AllErrors() []error { return m }

// CycleEveryMonthValidationError is the validation error returned by
// CycleEveryMonth.Validate if the designated constraints aren't met.
type CycleEveryMonthValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CycleEveryMonthValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CycleEveryMonthValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CycleEveryMonthValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CycleEveryMonthValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CycleEveryMonthValidationError) ErrorName() string { return "CycleEveryMonthValidationError" }

// Error satisfies the builtin error interface
func (e CycleEveryMonthValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCycleEveryMonth.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CycleEveryMonthValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CycleEveryMonthValidationError{}

// Validate checks the field values on WithMonth with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WithMonth) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WithMonth with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WithMonthMultiError, or nil
// if none found.
func (m *WithMonth) ValidateAll() error {
	return m.validate(true)
}

func (m *WithMonth) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Month

	if len(errors) > 0 {
		return WithMonthMultiError(errors)
	}

	return nil
}

// WithMonthMultiError is an error wrapping multiple validation errors returned
// by WithMonth.ValidateAll() if the designated constraints aren't met.
type WithMonthMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WithMonthMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WithMonthMultiError) AllErrors() []error { return m }

// WithMonthValidationError is the validation error returned by
// WithMonth.Validate if the designated constraints aren't met.
type WithMonthValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WithMonthValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WithMonthValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WithMonthValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WithMonthValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WithMonthValidationError) ErrorName() string { return "WithMonthValidationError" }

// Error satisfies the builtin error interface
func (e WithMonthValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWithMonth.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WithMonthValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WithMonthValidationError{}

// Validate checks the field values on CycleEveryYear with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CycleEveryYear) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CycleEveryYear with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CycleEveryYearMultiError,
// or nil if none found.
func (m *CycleEveryYear) ValidateAll() error {
	return m.validate(true)
}

func (m *CycleEveryYear) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMonth() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CycleEveryYearValidationError{
						field:  fmt.Sprintf("Month[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CycleEveryYearValidationError{
						field:  fmt.Sprintf("Month[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CycleEveryYearValidationError{
					field:  fmt.Sprintf("Month[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CycleEveryYearMultiError(errors)
	}

	return nil
}

// CycleEveryYearMultiError is an error wrapping multiple validation errors
// returned by CycleEveryYear.ValidateAll() if the designated constraints
// aren't met.
type CycleEveryYearMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CycleEveryYearMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CycleEveryYearMultiError) AllErrors() []error { return m }

// CycleEveryYearValidationError is the validation error returned by
// CycleEveryYear.Validate if the designated constraints aren't met.
type CycleEveryYearValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CycleEveryYearValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CycleEveryYearValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CycleEveryYearValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CycleEveryYearValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CycleEveryYearValidationError) ErrorName() string { return "CycleEveryYearValidationError" }

// Error satisfies the builtin error interface
func (e CycleEveryYearValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCycleEveryYear.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CycleEveryYearValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CycleEveryYearValidationError{}

// Validate checks the field values on WithQuarter with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WithQuarter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WithQuarter with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WithQuarterMultiError, or
// nil if none found.
func (m *WithQuarter) ValidateAll() error {
	return m.validate(true)
}

func (m *WithQuarter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Month

	if len(errors) > 0 {
		return WithQuarterMultiError(errors)
	}

	return nil
}

// WithQuarterMultiError is an error wrapping multiple validation errors
// returned by WithQuarter.ValidateAll() if the designated constraints aren't met.
type WithQuarterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WithQuarterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WithQuarterMultiError) AllErrors() []error { return m }

// WithQuarterValidationError is the validation error returned by
// WithQuarter.Validate if the designated constraints aren't met.
type WithQuarterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WithQuarterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WithQuarterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WithQuarterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WithQuarterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WithQuarterValidationError) ErrorName() string { return "WithQuarterValidationError" }

// Error satisfies the builtin error interface
func (e WithQuarterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWithQuarter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WithQuarterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WithQuarterValidationError{}

// Validate checks the field values on CycleEveryQuarter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CycleEveryQuarter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CycleEveryQuarter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CycleEveryQuarterMultiError, or nil if none found.
func (m *CycleEveryQuarter) ValidateAll() error {
	return m.validate(true)
}

func (m *CycleEveryQuarter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMonth() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CycleEveryQuarterValidationError{
						field:  fmt.Sprintf("Month[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CycleEveryQuarterValidationError{
						field:  fmt.Sprintf("Month[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CycleEveryQuarterValidationError{
					field:  fmt.Sprintf("Month[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CycleEveryQuarterMultiError(errors)
	}

	return nil
}

// CycleEveryQuarterMultiError is an error wrapping multiple validation errors
// returned by CycleEveryQuarter.ValidateAll() if the designated constraints
// aren't met.
type CycleEveryQuarterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CycleEveryQuarterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CycleEveryQuarterMultiError) AllErrors() []error { return m }

// CycleEveryQuarterValidationError is the validation error returned by
// CycleEveryQuarter.Validate if the designated constraints aren't met.
type CycleEveryQuarterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CycleEveryQuarterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CycleEveryQuarterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CycleEveryQuarterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CycleEveryQuarterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CycleEveryQuarterValidationError) ErrorName() string {
	return "CycleEveryQuarterValidationError"
}

// Error satisfies the builtin error interface
func (e CycleEveryQuarterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCycleEveryQuarter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CycleEveryQuarterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CycleEveryQuarterValidationError{}

// Validate checks the field values on CycleHour with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CycleHour) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CycleHour with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CycleHourMultiError, or nil
// if none found.
func (m *CycleHour) ValidateAll() error {
	return m.validate(true)
}

func (m *CycleHour) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CycleHourMultiError(errors)
	}

	return nil
}

// CycleHourMultiError is an error wrapping multiple validation errors returned
// by CycleHour.ValidateAll() if the designated constraints aren't met.
type CycleHourMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CycleHourMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CycleHourMultiError) AllErrors() []error { return m }

// CycleHourValidationError is the validation error returned by
// CycleHour.Validate if the designated constraints aren't met.
type CycleHourValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CycleHourValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CycleHourValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CycleHourValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CycleHourValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CycleHourValidationError) ErrorName() string { return "CycleHourValidationError" }

// Error satisfies the builtin error interface
func (e CycleHourValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCycleHour.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CycleHourValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CycleHourValidationError{}

// Validate checks the field values on LifeCycle with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LifeCycle) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LifeCycle with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LifeCycleMultiError, or nil
// if none found.
func (m *LifeCycle) ValidateAll() error {
	return m.validate(true)
}

func (m *LifeCycle) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Zone

	// no validation rules for StartTime

	if m.EndTime != nil {
		// no validation rules for EndTime
	}

	if len(errors) > 0 {
		return LifeCycleMultiError(errors)
	}

	return nil
}

// LifeCycleMultiError is an error wrapping multiple validation errors returned
// by LifeCycle.ValidateAll() if the designated constraints aren't met.
type LifeCycleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LifeCycleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LifeCycleMultiError) AllErrors() []error { return m }

// LifeCycleValidationError is the validation error returned by
// LifeCycle.Validate if the designated constraints aren't met.
type LifeCycleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LifeCycleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LifeCycleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LifeCycleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LifeCycleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LifeCycleValidationError) ErrorName() string { return "LifeCycleValidationError" }

// Error satisfies the builtin error interface
func (e LifeCycleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLifeCycle.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LifeCycleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LifeCycleValidationError{}

// Validate checks the field values on Crontab with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Crontab) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Crontab with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CrontabMultiError, or nil if none found.
func (m *Crontab) ValidateAll() error {
	return m.validate(true)
}

func (m *Crontab) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enable

	if all {
		switch v := interface{}(m.GetLifeCycle()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CrontabValidationError{
					field:  "LifeCycle",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CrontabValidationError{
					field:  "LifeCycle",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLifeCycle()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CrontabValidationError{
				field:  "LifeCycle",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.Cycle.(type) {
	case *Crontab_CycleOnce:
		if v == nil {
			err := CrontabValidationError{
				field:  "Cycle",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetCycleOnce()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CrontabValidationError{
						field:  "CycleOnce",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CrontabValidationError{
						field:  "CycleOnce",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCycleOnce()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CrontabValidationError{
					field:  "CycleOnce",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Crontab_CycleEvery:
		if v == nil {
			err := CrontabValidationError{
				field:  "Cycle",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetCycleEvery()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CrontabValidationError{
						field:  "CycleEvery",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CrontabValidationError{
						field:  "CycleEvery",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCycleEvery()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CrontabValidationError{
					field:  "CycleEvery",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Crontab_CycleEveryTime:
		if v == nil {
			err := CrontabValidationError{
				field:  "Cycle",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetCycleEveryTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CrontabValidationError{
						field:  "CycleEveryTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CrontabValidationError{
						field:  "CycleEveryTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCycleEveryTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CrontabValidationError{
					field:  "CycleEveryTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return CrontabMultiError(errors)
	}

	return nil
}

// CrontabMultiError is an error wrapping multiple validation errors returned
// by Crontab.ValidateAll() if the designated constraints aren't met.
type CrontabMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CrontabMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CrontabMultiError) AllErrors() []error { return m }

// CrontabValidationError is the validation error returned by Crontab.Validate
// if the designated constraints aren't met.
type CrontabValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CrontabValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CrontabValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CrontabValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CrontabValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CrontabValidationError) ErrorName() string { return "CrontabValidationError" }

// Error satisfies the builtin error interface
func (e CrontabValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCrontab.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CrontabValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CrontabValidationError{}

// Validate checks the field values on FQN with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *FQN) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FQN with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in FQNMultiError, or nil if none found.
func (m *FQN) ValidateAll() error {
	return m.validate(true)
}

func (m *FQN) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Schema

	// no validation rules for Table

	// no validation rules for Column

	if len(errors) > 0 {
		return FQNMultiError(errors)
	}

	return nil
}

// FQNMultiError is an error wrapping multiple validation errors returned by
// FQN.ValidateAll() if the designated constraints aren't met.
type FQNMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FQNMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FQNMultiError) AllErrors() []error { return m }

// FQNValidationError is the validation error returned by FQN.Validate if the
// designated constraints aren't met.
type FQNValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FQNValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FQNValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FQNValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FQNValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FQNValidationError) ErrorName() string { return "FQNValidationError" }

// Error satisfies the builtin error interface
func (e FQNValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFQN.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FQNValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FQNValidationError{}

// Validate checks the field values on Extra with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Extra) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Extra with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ExtraMultiError, or nil if none found.
func (m *Extra) ValidateAll() error {
	return m.validate(true)
}

func (m *Extra) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetGrouping() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExtraValidationError{
						field:  fmt.Sprintf("Grouping[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExtraValidationError{
						field:  fmt.Sprintf("Grouping[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExtraValidationError{
					field:  fmt.Sprintf("Grouping[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetSelects() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExtraValidationError{
						field:  fmt.Sprintf("Selects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExtraValidationError{
						field:  fmt.Sprintf("Selects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExtraValidationError{
					field:  fmt.Sprintf("Selects[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ExtraMultiError(errors)
	}

	return nil
}

// ExtraMultiError is an error wrapping multiple validation errors returned by
// Extra.ValidateAll() if the designated constraints aren't met.
type ExtraMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExtraMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExtraMultiError) AllErrors() []error { return m }

// ExtraValidationError is the validation error returned by Extra.Validate if
// the designated constraints aren't met.
type ExtraValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExtraValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExtraValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExtraValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExtraValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExtraValidationError) ErrorName() string { return "ExtraValidationError" }

// Error satisfies the builtin error interface
func (e ExtraValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExtra.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExtraValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExtraValidationError{}

// Validate checks the field values on Error with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Error) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Error with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ErrorMultiError, or nil if none found.
func (m *Error) ValidateAll() error {
	return m.validate(true)
}

func (m *Error) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if len(errors) > 0 {
		return ErrorMultiError(errors)
	}

	return nil
}

// ErrorMultiError is an error wrapping multiple validation errors returned by
// Error.ValidateAll() if the designated constraints aren't met.
type ErrorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ErrorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ErrorMultiError) AllErrors() []error { return m }

// ErrorValidationError is the validation error returned by Error.Validate if
// the designated constraints aren't met.
type ErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorValidationError) ErrorName() string { return "ErrorValidationError" }

// Error satisfies the builtin error interface
func (e ErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorValidationError{}
