// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        (unknown)
// source: entrypoint.proto

package mbpb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RunType int32

const (
	RunType_Cycle RunType = 0 // 周期
	RunType_Spark RunType = 1 // 手动
)

// Enum value maps for RunType.
var (
	RunType_name = map[int32]string{
		0: "Cycle",
		1: "Spark",
	}
	RunType_value = map[string]int32{
		"Cycle": 0,
		"Spark": 1,
	}
)

func (x RunType) Enum() *RunType {
	p := new(RunType)
	*p = x
	return p
}

func (x RunType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RunType) Descriptor() protoreflect.EnumDescriptor {
	return file_entrypoint_proto_enumTypes[0].Descriptor()
}

func (RunType) Type() protoreflect.EnumType {
	return &file_entrypoint_proto_enumTypes[0]
}

func (x RunType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RunType.Descriptor instead.
func (RunType) EnumDescriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{0}
}

type SourceType int32

const (
	SourceType_RemoteDB   SourceType = 0   // 远程数据库
	SourceType_ImportData SourceType = 1   // 导入数据
	SourceType_DataFill   SourceType = 2   // 数据填报
	SourceType_MbEtl      SourceType = 3   // ETL
	SourceType_RemoteApi  SourceType = 4   // RemoteAPI
	SourceType_UnknownSrc SourceType = 999 // 未知
)

// Enum value maps for SourceType.
var (
	SourceType_name = map[int32]string{
		0:   "RemoteDB",
		1:   "ImportData",
		2:   "DataFill",
		3:   "MbEtl",
		4:   "RemoteApi",
		999: "UnknownSrc",
	}
	SourceType_value = map[string]int32{
		"RemoteDB":   0,
		"ImportData": 1,
		"DataFill":   2,
		"MbEtl":      3,
		"RemoteApi":  4,
		"UnknownSrc": 999,
	}
)

func (x SourceType) Enum() *SourceType {
	p := new(SourceType)
	*p = x
	return p
}

func (x SourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_entrypoint_proto_enumTypes[1].Descriptor()
}

func (SourceType) Type() protoreflect.EnumType {
	return &file_entrypoint_proto_enumTypes[1]
}

func (x SourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SourceType.Descriptor instead.
func (SourceType) EnumDescriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{1}
}

// 运行状态
type RunStatus int32

const (
	RunStatus_Unknown    RunStatus = 0  // 未知
	RunStatus_NotRunning RunStatus = 2  // 未运行
	RunStatus_Scheme     RunStatus = 4  // 计划中
	RunStatus_Running    RunStatus = 8  // 运行中
	RunStatus_Success    RunStatus = 16 // 运行成功
	RunStatus_Fail       RunStatus = 32 // 运行失败
	RunStatus_Cancel     RunStatus = 64 // 已取消
)

// Enum value maps for RunStatus.
var (
	RunStatus_name = map[int32]string{
		0:  "Unknown",
		2:  "NotRunning",
		4:  "Scheme",
		8:  "Running",
		16: "Success",
		32: "Fail",
		64: "Cancel",
	}
	RunStatus_value = map[string]int32{
		"Unknown":    0,
		"NotRunning": 2,
		"Scheme":     4,
		"Running":    8,
		"Success":    16,
		"Fail":       32,
		"Cancel":     64,
	}
)

func (x RunStatus) Enum() *RunStatus {
	p := new(RunStatus)
	*p = x
	return p
}

func (x RunStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RunStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_entrypoint_proto_enumTypes[2].Descriptor()
}

func (RunStatus) Type() protoreflect.EnumType {
	return &file_entrypoint_proto_enumTypes[2]
}

func (x RunStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RunStatus.Descriptor instead.
func (RunStatus) EnumDescriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{2}
}

// 间隔时间执行类型
type EveryType int32

const (
	EveryType_EvNone   EveryType = 0 // 未定义
	EveryType_EvMinute EveryType = 1 // N分钟
	EveryType_EvHour   EveryType = 2 // N小时
	EveryType_EvDay    EveryType = 3 // N天
	EveryType_EvWeek   EveryType = 4 // N周
	EveryType_EvMonth  EveryType = 5 // N月
)

// Enum value maps for EveryType.
var (
	EveryType_name = map[int32]string{
		0: "EvNone",
		1: "EvMinute",
		2: "EvHour",
		3: "EvDay",
		4: "EvWeek",
		5: "EvMonth",
	}
	EveryType_value = map[string]int32{
		"EvNone":   0,
		"EvMinute": 1,
		"EvHour":   2,
		"EvDay":    3,
		"EvWeek":   4,
		"EvMonth":  5,
	}
)

func (x EveryType) Enum() *EveryType {
	p := new(EveryType)
	*p = x
	return p
}

func (x EveryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EveryType) Descriptor() protoreflect.EnumDescriptor {
	return file_entrypoint_proto_enumTypes[3].Descriptor()
}

func (EveryType) Type() protoreflect.EnumType {
	return &file_entrypoint_proto_enumTypes[3]
}

func (x EveryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EveryType.Descriptor instead.
func (EveryType) EnumDescriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{3}
}

// 周枚举
type EnumWeek int32

const (
	EnumWeek_Sun EnumWeek = 0 // 周日
	EnumWeek_Mon EnumWeek = 1 // 周一
	EnumWeek_Tue EnumWeek = 2 // 周二
	EnumWeek_Wed EnumWeek = 3 // 周三
	EnumWeek_Thu EnumWeek = 4 // 周四
	EnumWeek_Fri EnumWeek = 5 // 周五
	EnumWeek_Sat EnumWeek = 6 // 周六
)

// Enum value maps for EnumWeek.
var (
	EnumWeek_name = map[int32]string{
		0: "Sun",
		1: "Mon",
		2: "Tue",
		3: "Wed",
		4: "Thu",
		5: "Fri",
		6: "Sat",
	}
	EnumWeek_value = map[string]int32{
		"Sun": 0,
		"Mon": 1,
		"Tue": 2,
		"Wed": 3,
		"Thu": 4,
		"Fri": 5,
		"Sat": 6,
	}
)

func (x EnumWeek) Enum() *EnumWeek {
	p := new(EnumWeek)
	*p = x
	return p
}

func (x EnumWeek) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumWeek) Descriptor() protoreflect.EnumDescriptor {
	return file_entrypoint_proto_enumTypes[4].Descriptor()
}

func (EnumWeek) Type() protoreflect.EnumType {
	return &file_entrypoint_proto_enumTypes[4]
}

func (x EnumWeek) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnumWeek.Descriptor instead.
func (EnumWeek) EnumDescriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{4}
}

// 月枚举
type EnumMonth int32

const (
	EnumMonth_None EnumMonth = 0
	EnumMonth_Jan  EnumMonth = 1
	EnumMonth_Feb  EnumMonth = 2
	EnumMonth_Mar  EnumMonth = 3
	EnumMonth_Apr  EnumMonth = 4
	EnumMonth_May  EnumMonth = 5
	EnumMonth_Jun  EnumMonth = 6
	EnumMonth_Jul  EnumMonth = 7
	EnumMonth_Aug  EnumMonth = 8
	EnumMonth_Sep  EnumMonth = 9
	EnumMonth_Oct  EnumMonth = 10
	EnumMonth_Nov  EnumMonth = 11
	EnumMonth_Dec  EnumMonth = 12
)

// Enum value maps for EnumMonth.
var (
	EnumMonth_name = map[int32]string{
		0:  "None",
		1:  "Jan",
		2:  "Feb",
		3:  "Mar",
		4:  "Apr",
		5:  "May",
		6:  "Jun",
		7:  "Jul",
		8:  "Aug",
		9:  "Sep",
		10: "Oct",
		11: "Nov",
		12: "Dec",
	}
	EnumMonth_value = map[string]int32{
		"None": 0,
		"Jan":  1,
		"Feb":  2,
		"Mar":  3,
		"Apr":  4,
		"May":  5,
		"Jun":  6,
		"Jul":  7,
		"Aug":  8,
		"Sep":  9,
		"Oct":  10,
		"Nov":  11,
		"Dec":  12,
	}
)

func (x EnumMonth) Enum() *EnumMonth {
	p := new(EnumMonth)
	*p = x
	return p
}

func (x EnumMonth) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumMonth) Descriptor() protoreflect.EnumDescriptor {
	return file_entrypoint_proto_enumTypes[5].Descriptor()
}

func (EnumMonth) Type() protoreflect.EnumType {
	return &file_entrypoint_proto_enumTypes[5]
}

func (x EnumMonth) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnumMonth.Descriptor instead.
func (EnumMonth) EnumDescriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{5}
}

// 周期类型
type EveryTimeType int32

const (
	EveryTimeType_EveryNone    EveryTimeType = 0 // 未知
	EveryTimeType_EveryDay     EveryTimeType = 1 // 每天
	EveryTimeType_EveryWeek    EveryTimeType = 2 // 每周
	EveryTimeType_EveryMonth   EveryTimeType = 3 // 每月
	EveryTimeType_EveryQuarter EveryTimeType = 4 // 每季
	EveryTimeType_EveryYear    EveryTimeType = 5 // 每年
)

// Enum value maps for EveryTimeType.
var (
	EveryTimeType_name = map[int32]string{
		0: "EveryNone",
		1: "EveryDay",
		2: "EveryWeek",
		3: "EveryMonth",
		4: "EveryQuarter",
		5: "EveryYear",
	}
	EveryTimeType_value = map[string]int32{
		"EveryNone":    0,
		"EveryDay":     1,
		"EveryWeek":    2,
		"EveryMonth":   3,
		"EveryQuarter": 4,
		"EveryYear":    5,
	}
)

func (x EveryTimeType) Enum() *EveryTimeType {
	p := new(EveryTimeType)
	*p = x
	return p
}

func (x EveryTimeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EveryTimeType) Descriptor() protoreflect.EnumDescriptor {
	return file_entrypoint_proto_enumTypes[6].Descriptor()
}

func (EveryTimeType) Type() protoreflect.EnumType {
	return &file_entrypoint_proto_enumTypes[6]
}

func (x EveryTimeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EveryTimeType.Descriptor instead.
func (EveryTimeType) EnumDescriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{6}
}

// 启用请求
type EnableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DBInfo       *DBDetail `protobuf:"bytes,1,opt,name=DBInfo,proto3" json:"DBInfo,omitempty"`             // 数据库信息
	EnterpriseID string    `protobuf:"bytes,2,opt,name=EnterpriseID,proto3" json:"EnterpriseID,omitempty"` // 企业ID
	CardId       int64     `protobuf:"varint,3,opt,name=CardId,proto3" json:"CardId,omitempty"`            // Card ID
	UserId       int64     `protobuf:"varint,4,opt,name=UserId,proto3" json:"UserId,omitempty"`            // 创建人
	Crontab      *Crontab  `protobuf:"bytes,5,opt,name=Crontab,proto3,oneof" json:"Crontab,omitempty"`     //运行周期表达式
	SqlScript    string    `protobuf:"bytes,6,opt,name=SqlScript,proto3" json:"SqlScript,omitempty"`       // SQL代码
	Tables       []*Table  `protobuf:"bytes,7,rep,name=Tables,proto3" json:"Tables,omitempty"`             // SQL引用的实体表
	Extra        *Extra    `protobuf:"bytes,8,opt,name=Extra,proto3,oneof" json:"Extra,omitempty"`         // 附加信息
	Over         *Over     `protobuf:"bytes,9,opt,name=Over,proto3,oneof" json:"Over,omitempty"`           // BI不传
}

func (x *EnableRequest) Reset() {
	*x = EnableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entrypoint_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableRequest) ProtoMessage() {}

func (x *EnableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableRequest.ProtoReflect.Descriptor instead.
func (*EnableRequest) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{0}
}

func (x *EnableRequest) GetDBInfo() *DBDetail {
	if x != nil {
		return x.DBInfo
	}
	return nil
}

func (x *EnableRequest) GetEnterpriseID() string {
	if x != nil {
		return x.EnterpriseID
	}
	return ""
}

func (x *EnableRequest) GetCardId() int64 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *EnableRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *EnableRequest) GetCrontab() *Crontab {
	if x != nil {
		return x.Crontab
	}
	return nil
}

func (x *EnableRequest) GetSqlScript() string {
	if x != nil {
		return x.SqlScript
	}
	return ""
}

func (x *EnableRequest) GetTables() []*Table {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *EnableRequest) GetExtra() *Extra {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *EnableRequest) GetOver() *Over {
	if x != nil {
		return x.Over
	}
	return nil
}

// 启用回复
type EnableReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutTable    *Table    `protobuf:"bytes,1,opt,name=OutTable,proto3" json:"OutTable,omitempty"`             // 结果表
	Columns     []*Column `protobuf:"bytes,2,rep,name=Columns,proto3" json:"Columns,omitempty"`               // 字段类
	NextRunTime *string   `protobuf:"bytes,3,opt,name=NextRunTime,proto3,oneof" json:"NextRunTime,omitempty"` // 下次运行时间
	Error       *Error    `protobuf:"bytes,4,opt,name=Error,proto3,oneof" json:"Error,omitempty"`             // 错误信息 可选
}

func (x *EnableReply) Reset() {
	*x = EnableReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entrypoint_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableReply) ProtoMessage() {}

func (x *EnableReply) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableReply.ProtoReflect.Descriptor instead.
func (*EnableReply) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{1}
}

func (x *EnableReply) GetOutTable() *Table {
	if x != nil {
		return x.OutTable
	}
	return nil
}

func (x *EnableReply) GetColumns() []*Column {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *EnableReply) GetNextRunTime() string {
	if x != nil && x.NextRunTime != nil {
		return *x.NextRunTime
	}
	return ""
}

func (x *EnableReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// 行动请求
type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnterpriseID string `protobuf:"bytes,1,opt,name=EnterpriseID,proto3" json:"EnterpriseID,omitempty"` // 企业ID
	// int64 CardId = 2 [(validate.rules).int64.gte = 1]; // Card ID
	CardId int64 `protobuf:"varint,2,opt,name=CardId,proto3" json:"CardId,omitempty"`
	Over   *Over `protobuf:"bytes,3,opt,name=Over,proto3,oneof" json:"Over,omitempty"` // BI不传
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entrypoint_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{2}
}

func (x *Request) GetEnterpriseID() string {
	if x != nil {
		return x.EnterpriseID
	}
	return ""
}

func (x *Request) GetCardId() int64 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *Request) GetOver() *Over {
	if x != nil {
		return x.Over
	}
	return nil
}

type Over struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash         *string                `protobuf:"bytes,1,opt,name=Hash,proto3,oneof" json:"Hash,omitempty"`                          // Hash
	SequenceID   *string                `protobuf:"bytes,2,opt,name=SequenceID,proto3,oneof" json:"SequenceID,omitempty"`              // SequenceID
	RunType      *RunType               `protobuf:"varint,3,opt,name=RunType,proto3,enum=mbpb.RunType,oneof" json:"RunType,omitempty"` // 运行类型
	StartRunTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=StartRunTime,proto3,oneof" json:"StartRunTime,omitempty"`          // 开始运行时间
	NextRunTime  *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=NextRunTime,proto3,oneof" json:"NextRunTime,omitempty"`            // 下次运行时间
}

func (x *Over) Reset() {
	*x = Over{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entrypoint_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Over) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Over) ProtoMessage() {}

func (x *Over) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Over.ProtoReflect.Descriptor instead.
func (*Over) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{3}
}

func (x *Over) GetHash() string {
	if x != nil && x.Hash != nil {
		return *x.Hash
	}
	return ""
}

func (x *Over) GetSequenceID() string {
	if x != nil && x.SequenceID != nil {
		return *x.SequenceID
	}
	return ""
}

func (x *Over) GetRunType() RunType {
	if x != nil && x.RunType != nil {
		return *x.RunType
	}
	return RunType_Cycle
}

func (x *Over) GetStartRunTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartRunTime
	}
	return nil
}

func (x *Over) GetNextRunTime() *timestamppb.Timestamp {
	if x != nil {
		return x.NextRunTime
	}
	return nil
}

// 行动回复
type Reply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key        *string   `protobuf:"bytes,1,opt,name=Key,proto3,oneof" json:"Key,omitempty"`               // Key
	SequenceID *string   `protobuf:"bytes,2,opt,name=SequenceID,proto3,oneof" json:"SequenceID,omitempty"` // 序列ID
	Columns    []*Column `protobuf:"bytes,3,rep,name=Columns,proto3" json:"Columns,omitempty"`             // 字段类
	Error      *Error    `protobuf:"bytes,4,opt,name=Error,proto3,oneof" json:"Error,omitempty"`           // 错误信息 可选
}

func (x *Reply) Reset() {
	*x = Reply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entrypoint_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reply) ProtoMessage() {}

func (x *Reply) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reply.ProtoReflect.Descriptor instead.
func (*Reply) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{4}
}

func (x *Reply) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *Reply) GetSequenceID() string {
	if x != nil && x.SequenceID != nil {
		return *x.SequenceID
	}
	return ""
}

func (x *Reply) GetColumns() []*Column {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *Reply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type Graph struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string    `protobuf:"bytes,1,opt,name=Id,json=id,proto3" json:"Id,omitempty"`                   // id
	Children []*Source `protobuf:"bytes,2,rep,name=Children,json=children,proto3" json:"Children,omitempty"` // 节点
	Edges    []*Edge   `protobuf:"bytes,3,rep,name=Edges,json=edges,proto3" json:"Edges,omitempty"`          // 边缘
	Error    *Error    `protobuf:"bytes,4,opt,name=Error,json=error,proto3,oneof" json:"Error,omitempty"`    // 错误信息
}

func (x *Graph) Reset() {
	*x = Graph{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entrypoint_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Graph) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Graph) ProtoMessage() {}

func (x *Graph) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Graph.ProtoReflect.Descriptor instead.
func (*Graph) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{5}
}

func (x *Graph) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Graph) GetChildren() []*Source {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *Graph) GetEdges() []*Edge {
	if x != nil {
		return x.Edges
	}
	return nil
}

func (x *Graph) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// 边缘
type Edge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`          // 唯一键
	Source uint64 `protobuf:"varint,2,opt,name=Source,proto3" json:"Source,omitempty"` // 上游
	Target uint64 `protobuf:"varint,3,opt,name=Target,proto3" json:"Target,omitempty"` // 下游
}

func (x *Edge) Reset() {
	*x = Edge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entrypoint_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Edge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Edge) ProtoMessage() {}

func (x *Edge) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Edge.ProtoReflect.Descriptor instead.
func (*Edge) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{6}
}

func (x *Edge) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Edge) GetSource() uint64 {
	if x != nil {
		return x.Source
	}
	return 0
}

func (x *Edge) GetTarget() uint64 {
	if x != nil {
		return x.Target
	}
	return 0
}

// 来源
type Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint64               `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`                                                                                             // BaseId+Type Hash
	BaseId string               `protobuf:"bytes,2,opt,name=BaseId,proto3" json:"BaseId,omitempty"`                                                                                      // 原始唯一键
	Type   SourceType           `protobuf:"varint,3,opt,name=Type,proto3,enum=mbpb.SourceType" json:"Type,omitempty"`                                                                    // 类型
	Prev   map[uint64]*Property `protobuf:"bytes,4,rep,name=Prev,proto3" json:"Prev,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 上级 BI不传
}

func (x *Source) Reset() {
	*x = Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entrypoint_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Source) ProtoMessage() {}

func (x *Source) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Source.ProtoReflect.Descriptor instead.
func (*Source) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{7}
}

func (x *Source) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Source) GetBaseId() string {
	if x != nil {
		return x.BaseId
	}
	return ""
}

func (x *Source) GetType() SourceType {
	if x != nil {
		return x.Type
	}
	return SourceType_RemoteDB
}

func (x *Source) GetPrev() map[uint64]*Property {
	if x != nil {
		return x.Prev
	}
	return nil
}

type Property struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string     `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`                           // 原始唯一键
	Type SourceType `protobuf:"varint,2,opt,name=Type,proto3,enum=mbpb.SourceType" json:"Type,omitempty"` // 类型
}

func (x *Property) Reset() {
	*x = Property{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entrypoint_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Property) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Property) ProtoMessage() {}

func (x *Property) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Property.ProtoReflect.Descriptor instead.
func (*Property) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{8}
}

func (x *Property) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Property) GetType() SourceType {
	if x != nil {
		return x.Type
	}
	return SourceType_RemoteDB
}

// 实体表
type Table struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schema string  `protobuf:"bytes,1,opt,name=Schema,proto3" json:"Schema,omitempty"` // schema
	Table  string  `protobuf:"bytes,2,opt,name=Table,proto3" json:"Table,omitempty"`   // table
	Source *Source `protobuf:"bytes,3,opt,name=Source,proto3" json:"Source,omitempty"` // 来源
}

func (x *Table) Reset() {
	*x = Table{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entrypoint_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Table) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Table) ProtoMessage() {}

func (x *Table) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Table.ProtoReflect.Descriptor instead.
func (*Table) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{9}
}

func (x *Table) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *Table) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *Table) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

// 字段类
type Column struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`
}

func (x *Column) Reset() {
	*x = Column{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entrypoint_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Column) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Column) ProtoMessage() {}

func (x *Column) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Column.ProtoReflect.Descriptor instead.
func (*Column) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{10}
}

func (x *Column) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Column) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// 数据库信息
type DBDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DBType        string            `protobuf:"bytes,1,opt,name=DBType,proto3" json:"DBType,omitempty"`                                                                                                       //数据库类型
	Host          string            `protobuf:"bytes,2,opt,name=Host,proto3" json:"Host,omitempty"`                                                                                                           //数据主机地址
	Port          int32             `protobuf:"varint,3,opt,name=Port,proto3" json:"Port,omitempty"`                                                                                                          //数据库端口
	User          string            `protobuf:"bytes,4,opt,name=User,proto3" json:"User,omitempty"`                                                                                                           //数据库用户名
	Pwd           string            `protobuf:"bytes,5,opt,name=Pwd,proto3" json:"Pwd,omitempty"`                                                                                                             //数据库密码
	DBName        string            `protobuf:"bytes,6,opt,name=DBName,proto3" json:"DBName,omitempty"`                                                                                                       //数据库名称
	ConnectParams map[string]string `protobuf:"bytes,7,rep,name=ConnectParams,proto3" json:"ConnectParams,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 连接参数
}

func (x *DBDetail) Reset() {
	*x = DBDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entrypoint_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBDetail) ProtoMessage() {}

func (x *DBDetail) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBDetail.ProtoReflect.Descriptor instead.
func (*DBDetail) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{11}
}

func (x *DBDetail) GetDBType() string {
	if x != nil {
		return x.DBType
	}
	return ""
}

func (x *DBDetail) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *DBDetail) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *DBDetail) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *DBDetail) GetPwd() string {
	if x != nil {
		return x.Pwd
	}
	return ""
}

func (x *DBDetail) GetDBName() string {
	if x != nil {
		return x.DBName
	}
	return ""
}

func (x *DBDetail) GetConnectParams() map[string]string {
	if x != nil {
		return x.ConnectParams
	}
	return nil
}

// 执行一次
type CycleOnce struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expression *Expression `protobuf:"bytes,1,opt,name=Expression,proto3" json:"Expression,omitempty"` // 表达式
}

func (x *CycleOnce) Reset() {
	*x = CycleOnce{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entrypoint_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CycleOnce) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CycleOnce) ProtoMessage() {}

func (x *CycleOnce) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CycleOnce.ProtoReflect.Descriptor instead.
func (*CycleOnce) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{12}
}

func (x *CycleOnce) GetExpression() *Expression {
	if x != nil {
		return x.Expression
	}
	return nil
}

// 间隔时间执行
type CycleEvery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EveryExpress *EveryExpress `protobuf:"bytes,1,opt,name=EveryExpress,proto3" json:"EveryExpress,omitempty"`   // 间隔周期
	Expression   *Expression   `protobuf:"bytes,2,opt,name=Expression,proto3,oneof" json:"Expression,omitempty"` // 表达式
}

func (x *CycleEvery) Reset() {
	*x = CycleEvery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entrypoint_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CycleEvery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CycleEvery) ProtoMessage() {}

func (x *CycleEvery) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CycleEvery.ProtoReflect.Descriptor instead.
func (*CycleEvery) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{13}
}

func (x *CycleEvery) GetEveryExpress() *EveryExpress {
	if x != nil {
		return x.EveryExpress
	}
	return nil
}

func (x *CycleEvery) GetExpression() *Expression {
	if x != nil {
		return x.Expression
	}
	return nil
}

// 时间循环周期执行
type CycleEveryTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EveryType EveryTimeType `protobuf:"varint,1,opt,name=EveryType,proto3,enum=mbpb.EveryTimeType" json:"EveryType,omitempty"` // 类型
	RunTime   *CycleHour    `protobuf:"bytes,2,opt,name=RunTime,proto3" json:"RunTime,omitempty"`                              // 运行时间
	// Types that are assignable to EveryTime:
	//
	//	*CycleEveryTime_EveryDay
	//	*CycleEveryTime_EveryWeek
	//	*CycleEveryTime_EveryMonth
	//	*CycleEveryTime_EveryQuarter
	//	*CycleEveryTime_EveryYear
	EveryTime isCycleEveryTime_EveryTime `protobuf_oneof:"EveryTime"`
}

func (x *CycleEveryTime) Reset() {
	*x = CycleEveryTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entrypoint_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CycleEveryTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CycleEveryTime) ProtoMessage() {}

func (x *CycleEveryTime) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CycleEveryTime.ProtoReflect.Descriptor instead.
func (*CycleEveryTime) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{14}
}

func (x *CycleEveryTime) GetEveryType() EveryTimeType {
	if x != nil {
		return x.EveryType
	}
	return EveryTimeType_EveryNone
}

func (x *CycleEveryTime) GetRunTime() *CycleHour {
	if x != nil {
		return x.RunTime
	}
	return nil
}

func (m *CycleEveryTime) GetEveryTime() isCycleEveryTime_EveryTime {
	if m != nil {
		return m.EveryTime
	}
	return nil
}

func (x *CycleEveryTime) GetEveryDay() *CycleEveryDay {
	if x, ok := x.GetEveryTime().(*CycleEveryTime_EveryDay); ok {
		return x.EveryDay
	}
	return nil
}

func (x *CycleEveryTime) GetEveryWeek() *CycleEveryWeek {
	if x, ok := x.GetEveryTime().(*CycleEveryTime_EveryWeek); ok {
		return x.EveryWeek
	}
	return nil
}

func (x *CycleEveryTime) GetEveryMonth() *CycleEveryMonth {
	if x, ok := x.GetEveryTime().(*CycleEveryTime_EveryMonth); ok {
		return x.EveryMonth
	}
	return nil
}

func (x *CycleEveryTime) GetEveryQuarter() *CycleEveryQuarter {
	if x, ok := x.GetEveryTime().(*CycleEveryTime_EveryQuarter); ok {
		return x.EveryQuarter
	}
	return nil
}

func (x *CycleEveryTime) GetEveryYear() *CycleEveryYear {
	if x, ok := x.GetEveryTime().(*CycleEveryTime_EveryYear); ok {
		return x.EveryYear
	}
	return nil
}

type isCycleEveryTime_EveryTime interface {
	isCycleEveryTime_EveryTime()
}

type CycleEveryTime_EveryDay struct {
	EveryDay *CycleEveryDay `protobuf:"bytes,3,opt,name=EveryDay,proto3,oneof"` // 每天
}

type CycleEveryTime_EveryWeek struct {
	EveryWeek *CycleEveryWeek `protobuf:"bytes,4,opt,name=EveryWeek,proto3,oneof"` // 每周
}

type CycleEveryTime_EveryMonth struct {
	EveryMonth *CycleEveryMonth `protobuf:"bytes,5,opt,name=EveryMonth,proto3,oneof"` // 每月
}

type CycleEveryTime_EveryQuarter struct {
	EveryQuarter *CycleEveryQuarter `protobuf:"bytes,6,opt,name=EveryQuarter,proto3,oneof"` // 每季
}

type CycleEveryTime_EveryYear struct {
	EveryYear *CycleEveryYear `protobuf:"bytes,7,opt,name=EveryYear,proto3,oneof"` // 每年
}

func (*CycleEveryTime_EveryDay) isCycleEveryTime_EveryTime() {}

func (*CycleEveryTime_EveryWeek) isCycleEveryTime_EveryTime() {}

func (*CycleEveryTime_EveryMonth) isCycleEveryTime_EveryTime() {}

func (*CycleEveryTime_EveryQuarter) isCycleEveryTime_EveryTime() {}

func (*CycleEveryTime_EveryYear) isCycleEveryTime_EveryTime() {}

// 间隔周期
type EveryExpress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CycleType  EveryType `protobuf:"varint,1,opt,name=CycleType,proto3,enum=mbpb.EveryType" json:"CycleType,omitempty"` // 类型
	CycleValue int32     `protobuf:"varint,2,opt,name=CycleValue,proto3" json:"CycleValue,omitempty"`                   // Value
}

func (x *EveryExpress) Reset() {
	*x = EveryExpress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entrypoint_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EveryExpress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EveryExpress) ProtoMessage() {}

func (x *EveryExpress) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EveryExpress.ProtoReflect.Descriptor instead.
func (*EveryExpress) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{15}
}

func (x *EveryExpress) GetCycleType() EveryType {
	if x != nil {
		return x.CycleType
	}
	return EveryType_EvNone
}

func (x *EveryExpress) GetCycleValue() int32 {
	if x != nil {
		return x.CycleValue
	}
	return 0
}

// 表达式
type Expression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Express string `protobuf:"bytes,1,opt,name=Express,proto3" json:"Express,omitempty"` // 表达式
}

func (x *Expression) Reset() {
	*x = Expression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entrypoint_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression) ProtoMessage() {}

func (x *Expression) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression.ProtoReflect.Descriptor instead.
func (*Expression) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{16}
}

func (x *Expression) GetExpress() string {
	if x != nil {
		return x.Express
	}
	return ""
}

// 每天
type CycleEveryDay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CycleEveryDay) Reset() {
	*x = CycleEveryDay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entrypoint_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CycleEveryDay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CycleEveryDay) ProtoMessage() {}

func (x *CycleEveryDay) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CycleEveryDay.ProtoReflect.Descriptor instead.
func (*CycleEveryDay) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{17}
}

// 每周
type CycleEveryWeek struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 周 切片
	Week []EnumWeek `protobuf:"varint,2,rep,packed,name=Week,proto3,enum=mbpb.EnumWeek" json:"Week,omitempty"`
}

func (x *CycleEveryWeek) Reset() {
	*x = CycleEveryWeek{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entrypoint_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CycleEveryWeek) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CycleEveryWeek) ProtoMessage() {}

func (x *CycleEveryWeek) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CycleEveryWeek.ProtoReflect.Descriptor instead.
func (*CycleEveryWeek) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{18}
}

func (x *CycleEveryWeek) GetWeek() []EnumWeek {
	if x != nil {
		return x.Week
	}
	return nil
}

// 每月
type CycleEveryMonth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Day []int32 `protobuf:"varint,1,rep,packed,name=Day,proto3" json:"Day,omitempty"` // 天 切片
}

func (x *CycleEveryMonth) Reset() {
	*x = CycleEveryMonth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entrypoint_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CycleEveryMonth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CycleEveryMonth) ProtoMessage() {}

func (x *CycleEveryMonth) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CycleEveryMonth.ProtoReflect.Descriptor instead.
func (*CycleEveryMonth) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{19}
}

func (x *CycleEveryMonth) GetDay() []int32 {
	if x != nil {
		return x.Day
	}
	return nil
}

// 月份
type WithMonth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 月份
	Month EnumMonth `protobuf:"varint,1,opt,name=Month,proto3,enum=mbpb.EnumMonth" json:"Month,omitempty"`
	// 天 切片 -1=最后1天
	Day []int32 `protobuf:"varint,2,rep,packed,name=Day,proto3" json:"Day,omitempty"`
}

func (x *WithMonth) Reset() {
	*x = WithMonth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entrypoint_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithMonth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithMonth) ProtoMessage() {}

func (x *WithMonth) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithMonth.ProtoReflect.Descriptor instead.
func (*WithMonth) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{20}
}

func (x *WithMonth) GetMonth() EnumMonth {
	if x != nil {
		return x.Month
	}
	return EnumMonth_None
}

func (x *WithMonth) GetDay() []int32 {
	if x != nil {
		return x.Day
	}
	return nil
}

// 按年 包含12个月 每个月不同的天
type CycleEveryYear struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 月 切片
	Month []*WithMonth `protobuf:"bytes,1,rep,name=Month,proto3" json:"Month,omitempty"`
}

func (x *CycleEveryYear) Reset() {
	*x = CycleEveryYear{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entrypoint_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CycleEveryYear) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CycleEveryYear) ProtoMessage() {}

func (x *CycleEveryYear) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CycleEveryYear.ProtoReflect.Descriptor instead.
func (*CycleEveryYear) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{21}
}

func (x *CycleEveryYear) GetMonth() []*WithMonth {
	if x != nil {
		return x.Month
	}
	return nil
}

// 季
type WithQuarter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 第N个月
	Month int32 `protobuf:"varint,1,opt,name=Month,proto3" json:"Month,omitempty"`
	// 天 切片 -1=最后1天
	Day []int32 `protobuf:"varint,2,rep,packed,name=Day,proto3" json:"Day,omitempty"`
}

func (x *WithQuarter) Reset() {
	*x = WithQuarter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entrypoint_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithQuarter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithQuarter) ProtoMessage() {}

func (x *WithQuarter) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithQuarter.ProtoReflect.Descriptor instead.
func (*WithQuarter) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{22}
}

func (x *WithQuarter) GetMonth() int32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *WithQuarter) GetDay() []int32 {
	if x != nil {
		return x.Day
	}
	return nil
}

// 每季度
type CycleEveryQuarter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 季切片
	Month []*WithQuarter `protobuf:"bytes,1,rep,name=Month,proto3" json:"Month,omitempty"`
}

func (x *CycleEveryQuarter) Reset() {
	*x = CycleEveryQuarter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entrypoint_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CycleEveryQuarter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CycleEveryQuarter) ProtoMessage() {}

func (x *CycleEveryQuarter) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CycleEveryQuarter.ProtoReflect.Descriptor instead.
func (*CycleEveryQuarter) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{23}
}

func (x *CycleEveryQuarter) GetMonth() []*WithQuarter {
	if x != nil {
		return x.Month
	}
	return nil
}

// 小时
type CycleHour struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hour   []int32 `protobuf:"varint,1,rep,packed,name=Hour,proto3" json:"Hour,omitempty"`     // 小时 切片
	Minute []int32 `protobuf:"varint,2,rep,packed,name=Minute,proto3" json:"Minute,omitempty"` // 分钟 切片
}

func (x *CycleHour) Reset() {
	*x = CycleHour{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entrypoint_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CycleHour) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CycleHour) ProtoMessage() {}

func (x *CycleHour) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CycleHour.ProtoReflect.Descriptor instead.
func (*CycleHour) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{24}
}

func (x *CycleHour) GetHour() []int32 {
	if x != nil {
		return x.Hour
	}
	return nil
}

func (x *CycleHour) GetMinute() []int32 {
	if x != nil {
		return x.Minute
	}
	return nil
}

// 生命周期
type LifeCycle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 时区
	Zone string `protobuf:"bytes,1,opt,name=Zone,proto3" json:"Zone,omitempty"`
	// 执行时间
	StartTime string `protobuf:"bytes,2,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	// 结束时间 无限期为null
	EndTime *string `protobuf:"bytes,3,opt,name=EndTime,proto3,oneof" json:"EndTime,omitempty"`
}

func (x *LifeCycle) Reset() {
	*x = LifeCycle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entrypoint_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LifeCycle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LifeCycle) ProtoMessage() {}

func (x *LifeCycle) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LifeCycle.ProtoReflect.Descriptor instead.
func (*LifeCycle) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{25}
}

func (x *LifeCycle) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *LifeCycle) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *LifeCycle) GetEndTime() string {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return ""
}

// Crontab表达式
type Crontab struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 调度状态
	Enable bool `protobuf:"varint,1,opt,name=Enable,proto3" json:"Enable,omitempty"`
	// 生命周期
	LifeCycle *LifeCycle `protobuf:"bytes,2,opt,name=LifeCycle,proto3" json:"LifeCycle,omitempty"`
	// 执行周期
	//
	// Types that are assignable to Cycle:
	//
	//	*Crontab_CycleOnce
	//	*Crontab_CycleEvery
	//	*Crontab_CycleEveryTime
	Cycle isCrontab_Cycle `protobuf_oneof:"Cycle"`
}

func (x *Crontab) Reset() {
	*x = Crontab{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entrypoint_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Crontab) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Crontab) ProtoMessage() {}

func (x *Crontab) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Crontab.ProtoReflect.Descriptor instead.
func (*Crontab) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{26}
}

func (x *Crontab) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Crontab) GetLifeCycle() *LifeCycle {
	if x != nil {
		return x.LifeCycle
	}
	return nil
}

func (m *Crontab) GetCycle() isCrontab_Cycle {
	if m != nil {
		return m.Cycle
	}
	return nil
}

func (x *Crontab) GetCycleOnce() *CycleOnce {
	if x, ok := x.GetCycle().(*Crontab_CycleOnce); ok {
		return x.CycleOnce
	}
	return nil
}

func (x *Crontab) GetCycleEvery() *CycleEvery {
	if x, ok := x.GetCycle().(*Crontab_CycleEvery); ok {
		return x.CycleEvery
	}
	return nil
}

func (x *Crontab) GetCycleEveryTime() *CycleEveryTime {
	if x, ok := x.GetCycle().(*Crontab_CycleEveryTime); ok {
		return x.CycleEveryTime
	}
	return nil
}

type isCrontab_Cycle interface {
	isCrontab_Cycle()
}

type Crontab_CycleOnce struct {
	// 只执行1次
	CycleOnce *CycleOnce `protobuf:"bytes,3,opt,name=CycleOnce,proto3,oneof"`
}

type Crontab_CycleEvery struct {
	// 每隔多久执行一次
	CycleEvery *CycleEvery `protobuf:"bytes,4,opt,name=CycleEvery,proto3,oneof"`
}

type Crontab_CycleEveryTime struct {
	// 时间循环周期执行
	CycleEveryTime *CycleEveryTime `protobuf:"bytes,5,opt,name=CycleEveryTime,proto3,oneof"`
}

func (*Crontab_CycleOnce) isCrontab_Cycle() {}

func (*Crontab_CycleEvery) isCrontab_Cycle() {}

func (*Crontab_CycleEveryTime) isCrontab_Cycle() {}

// Fully Qualified Name
type FQN struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schema string `protobuf:"bytes,1,opt,name=Schema,proto3" json:"Schema,omitempty"`
	Table  string `protobuf:"bytes,2,opt,name=Table,proto3" json:"Table,omitempty"`
	Column string `protobuf:"bytes,3,opt,name=Column,proto3" json:"Column,omitempty"`
}

func (x *FQN) Reset() {
	*x = FQN{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entrypoint_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FQN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FQN) ProtoMessage() {}

func (x *FQN) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FQN.ProtoReflect.Descriptor instead.
func (*FQN) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{27}
}

func (x *FQN) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *FQN) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *FQN) GetColumn() string {
	if x != nil {
		return x.Column
	}
	return ""
}

// 附加信息
type Extra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Grouping []*FQN `protobuf:"bytes,1,rep,name=Grouping,proto3" json:"Grouping,omitempty"` // 分组信息
	Selects  []*FQN `protobuf:"bytes,2,rep,name=Selects,proto3" json:"Selects,omitempty"`   // 最外层查询列信息
}

func (x *Extra) Reset() {
	*x = Extra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entrypoint_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Extra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Extra) ProtoMessage() {}

func (x *Extra) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Extra.ProtoReflect.Descriptor instead.
func (*Extra) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{28}
}

func (x *Extra) GetGrouping() []*FQN {
	if x != nil {
		return x.Grouping
	}
	return nil
}

func (x *Extra) GetSelects() []*FQN {
	if x != nil {
		return x.Selects
	}
	return nil
}

// 错误信息
type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"` // 错误码
	Msg  string `protobuf:"bytes,2,opt,name=Msg,proto3" json:"Msg,omitempty"`    // 错误信息
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entrypoint_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{29}
}

func (x *Error) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Error) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

var File_entrypoint_proto protoreflect.FileDescriptor

var file_entrypoint_proto_rawDesc = []byte{
	0x0a, 0x10, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x04, 0x6d, 0x62, 0x70, 0x62, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe8, 0x02, 0x0a, 0x0d, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x44, 0x42, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x62, 0x70, 0x62,
	0x2e, 0x44, 0x42, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x06, 0x44, 0x42, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x73, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x07, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x62, 0x70, 0x62, 0x2e, 0x43, 0x72,
	0x6f, 0x6e, 0x74, 0x61, 0x62, 0x48, 0x00, 0x52, 0x07, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62,
	0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x71, 0x6c, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x71, 0x6c, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x12, 0x23, 0x0a, 0x06, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x6d, 0x62, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x06,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x05, 0x45, 0x78, 0x74, 0x72, 0x61, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6d, 0x62, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x48, 0x01, 0x52, 0x05, 0x45, 0x78, 0x74, 0x72, 0x61, 0x88, 0x01, 0x01, 0x12, 0x23,
	0x0a, 0x04, 0x4f, 0x76, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x6d,
	0x62, 0x70, 0x62, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x48, 0x02, 0x52, 0x04, 0x4f, 0x76, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x45, 0x78, 0x74, 0x72, 0x61, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x4f, 0x76,
	0x65, 0x72, 0x22, 0xc7, 0x01, 0x0a, 0x0b, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x27, 0x0a, 0x08, 0x4f, 0x75, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6d, 0x62, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x08, 0x4f, 0x75, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x07, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d,
	0x62, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x07, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0b, 0x4e, 0x65, 0x78, 0x74, 0x52, 0x75, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x4e, 0x65, 0x78, 0x74,
	0x52, 0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x05, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6d, 0x62, 0x70, 0x62,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x01, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x88,
	0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x4e, 0x65, 0x78, 0x74, 0x52, 0x75, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x73, 0x0a, 0x07,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x43,
	0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x43, 0x61, 0x72,
	0x64, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x4f, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x6d, 0x62, 0x70, 0x62, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x04, 0x4f, 0x76, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x4f, 0x76, 0x65,
	0x72, 0x22, 0xbf, 0x02, 0x0a, 0x04, 0x4f, 0x76, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x04, 0x48, 0x61,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68,
	0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x53, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x07, 0x52, 0x75, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x6d, 0x62, 0x70, 0x62,
	0x2e, 0x52, 0x75, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x48, 0x02, 0x52, 0x07, 0x52, 0x75, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52,
	0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x03, 0x52, 0x0c, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x52, 0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x0b, 0x4e,
	0x65, 0x78, 0x74, 0x52, 0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x04, 0x52, 0x0b,
	0x4e, 0x65, 0x78, 0x74, 0x52, 0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x48, 0x61, 0x73, 0x68, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x53, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x52, 0x75, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x75, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x4e, 0x65, 0x78, 0x74, 0x52, 0x75, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0xb4, 0x01, 0x0a, 0x05, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x15, 0x0a,
	0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x4b, 0x65,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x53, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x07, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x62, 0x70,
	0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x07, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x73, 0x12, 0x26, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x6d, 0x62, 0x70, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x02, 0x52,
	0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x4b, 0x65,
	0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x44,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x95, 0x01, 0x0a, 0x05, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x08, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x62, 0x70, 0x62, 0x2e, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x20,
	0x0a, 0x05, 0x45, 0x64, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x6d, 0x62, 0x70, 0x62, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x52, 0x05, 0x65, 0x64, 0x67, 0x65, 0x73,
	0x12, 0x26, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x6d, 0x62, 0x70, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x46, 0x0a, 0x04, 0x45, 0x64, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0xcb, 0x01, 0x0a, 0x06, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x61, 0x73, 0x65, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6d, 0x62,
	0x70, 0x62, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x50, 0x72, 0x65, 0x76, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x62, 0x70, 0x62, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x50, 0x72, 0x65, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x50, 0x72, 0x65, 0x76, 0x1a,
	0x47, 0x0a, 0x09, 0x50, 0x72, 0x65, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x24,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x6d, 0x62, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x40, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6d, 0x62, 0x70, 0x62, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0x5b, 0x0a, 0x05, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x24, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x62, 0x70, 0x62, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x30, 0x0a, 0x06, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0x93, 0x02, 0x0a, 0x08, 0x44, 0x42,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x42, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x42, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x6f,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x77,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x50, 0x77, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x44, 0x42, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x42,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x62,
	0x70, 0x62, 0x2e, 0x44, 0x42, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x40, 0x0a,
	0x12, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x3d, 0x0a, 0x09, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x4f, 0x6e, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x0a,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x6d, 0x62, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x8a,
	0x01, 0x0a, 0x0a, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x72, 0x79, 0x12, 0x36, 0x0a,
	0x0c, 0x45, 0x76, 0x65, 0x72, 0x79, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x62, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x65, 0x72, 0x79,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0c, 0x45, 0x76, 0x65, 0x72, 0x79, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x62, 0x70, 0x62,
	0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x92, 0x03, 0x0a, 0x0e,
	0x43, 0x79, 0x63, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x31,
	0x0a, 0x09, 0x45, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x6d, 0x62, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x65, 0x72, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x45, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x29, 0x0a, 0x07, 0x52, 0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x62, 0x70, 0x62, 0x2e, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x48,
	0x6f, 0x75, 0x72, 0x52, 0x07, 0x52, 0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x08,
	0x45, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6d, 0x62, 0x70, 0x62, 0x2e, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x72, 0x79,
	0x44, 0x61, 0x79, 0x48, 0x00, 0x52, 0x08, 0x45, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x79, 0x12,
	0x34, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x72, 0x79, 0x57, 0x65, 0x65, 0x6b, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x62, 0x70, 0x62, 0x2e, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x45,
	0x76, 0x65, 0x72, 0x79, 0x57, 0x65, 0x65, 0x6b, 0x48, 0x00, 0x52, 0x09, 0x45, 0x76, 0x65, 0x72,
	0x79, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x37, 0x0a, 0x0a, 0x45, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x62, 0x70, 0x62,
	0x2e, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x48, 0x00, 0x52, 0x0a, 0x45, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x3d,
	0x0a, 0x0c, 0x45, 0x76, 0x65, 0x72, 0x79, 0x51, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x62, 0x70, 0x62, 0x2e, 0x43, 0x79, 0x63, 0x6c,
	0x65, 0x45, 0x76, 0x65, 0x72, 0x79, 0x51, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x0c, 0x45, 0x76, 0x65, 0x72, 0x79, 0x51, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x12, 0x34, 0x0a,
	0x09, 0x45, 0x76, 0x65, 0x72, 0x79, 0x59, 0x65, 0x61, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6d, 0x62, 0x70, 0x62, 0x2e, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x45, 0x76, 0x65,
	0x72, 0x79, 0x59, 0x65, 0x61, 0x72, 0x48, 0x00, 0x52, 0x09, 0x45, 0x76, 0x65, 0x72, 0x79, 0x59,
	0x65, 0x61, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x5d, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x72, 0x79, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x2d, 0x0a, 0x09, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x6d, 0x62, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x65, 0x72, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x26, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x22, 0x0f, 0x0a, 0x0d, 0x43, 0x79, 0x63, 0x6c, 0x65,
	0x45, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x79, 0x22, 0x34, 0x0a, 0x0e, 0x43, 0x79, 0x63, 0x6c,
	0x65, 0x45, 0x76, 0x65, 0x72, 0x79, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x22, 0x0a, 0x04, 0x57, 0x65,
	0x65, 0x6b, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x6d, 0x62, 0x70, 0x62, 0x2e,
	0x45, 0x6e, 0x75, 0x6d, 0x57, 0x65, 0x65, 0x6b, 0x52, 0x04, 0x57, 0x65, 0x65, 0x6b, 0x22, 0x23,
	0x0a, 0x0f, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x6f, 0x6e, 0x74,
	0x68, 0x12, 0x10, 0x0a, 0x03, 0x44, 0x61, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x03,
	0x44, 0x61, 0x79, 0x22, 0x44, 0x0a, 0x09, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x12, 0x25, 0x0a, 0x05, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x6d, 0x62, 0x70, 0x62, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x52, 0x05, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x44, 0x61, 0x79, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x03, 0x44, 0x61, 0x79, 0x22, 0x37, 0x0a, 0x0e, 0x43, 0x79, 0x63,
	0x6c, 0x65, 0x45, 0x76, 0x65, 0x72, 0x79, 0x59, 0x65, 0x61, 0x72, 0x12, 0x25, 0x0a, 0x05, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x62, 0x70,
	0x62, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x05, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x22, 0x35, 0x0a, 0x0b, 0x57, 0x69, 0x74, 0x68, 0x51, 0x75, 0x61, 0x72, 0x74, 0x65,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x44, 0x61, 0x79, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x03, 0x44, 0x61, 0x79, 0x22, 0x3c, 0x0a, 0x11, 0x43, 0x79, 0x63,
	0x6c, 0x65, 0x45, 0x76, 0x65, 0x72, 0x79, 0x51, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x12, 0x27,
	0x0a, 0x05, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x6d, 0x62, 0x70, 0x62, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x51, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72,
	0x52, 0x05, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x22, 0x37, 0x0a, 0x09, 0x43, 0x79, 0x63, 0x6c, 0x65,
	0x48, 0x6f, 0x75, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x6f, 0x75, 0x72, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x04, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x69, 0x6e, 0x75,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x22, 0x68, 0x0a, 0x09, 0x4c, 0x69, 0x66, 0x65, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x5a, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x5a, 0x6f, 0x6e,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xfe, 0x01, 0x0a, 0x07, 0x43,
	0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x12, 0x16, 0x0a, 0x06, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2d,
	0x0a, 0x09, 0x4c, 0x69, 0x66, 0x65, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x62, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x66, 0x65, 0x43, 0x79, 0x63,
	0x6c, 0x65, 0x52, 0x09, 0x4c, 0x69, 0x66, 0x65, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x2f, 0x0a,
	0x09, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x4f, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x6d, 0x62, 0x70, 0x62, 0x2e, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x4f, 0x6e, 0x63,
	0x65, 0x48, 0x00, 0x52, 0x09, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x4f, 0x6e, 0x63, 0x65, 0x12, 0x32,
	0x0a, 0x0a, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x62, 0x70, 0x62, 0x2e, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x45,
	0x76, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x45, 0x76, 0x65,
	0x72, 0x79, 0x12, 0x3e, 0x0a, 0x0e, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x72, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x62, 0x70,
	0x62, 0x2e, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x48, 0x00, 0x52, 0x0e, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x72, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x22, 0x4b, 0x0a, 0x03, 0x46,
	0x51, 0x4e, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0x53, 0x0a, 0x05, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x12, 0x25, 0x0a, 0x08, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x6d, 0x62, 0x70, 0x62, 0x2e, 0x46, 0x51, 0x4e, 0x52, 0x08,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x07, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x6d, 0x62, 0x70, 0x62,
	0x2e, 0x46, 0x51, 0x4e, 0x52, 0x07, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x73, 0x22, 0x2d, 0x0a,
	0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4d, 0x73, 0x67, 0x2a, 0x1f, 0x0a, 0x07,
	0x52, 0x75, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x79, 0x63, 0x6c, 0x65,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x70, 0x61, 0x72, 0x6b, 0x10, 0x01, 0x2a, 0x63, 0x0a,
	0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x42, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x61, 0x74,
	0x61, 0x46, 0x69, 0x6c, 0x6c, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x62, 0x45, 0x74, 0x6c,
	0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x70, 0x69, 0x10,
	0x04, 0x12, 0x0f, 0x0a, 0x0a, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x53, 0x72, 0x63, 0x10,
	0xe7, 0x07, 0x2a, 0x64, 0x0a, 0x09, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x4e, 0x6f, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x75, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x10, 0x10, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x61, 0x69, 0x6c, 0x10, 0x20, 0x12, 0x0a, 0x0a, 0x06,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x10, 0x40, 0x2a, 0x55, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x72,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x76, 0x4e, 0x6f, 0x6e, 0x65, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x76, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x45, 0x76, 0x48, 0x6f, 0x75, 0x72, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45,
	0x76, 0x44, 0x61, 0x79, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x76, 0x57, 0x65, 0x65, 0x6b,
	0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x76, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x10, 0x05, 0x2a,
	0x49, 0x0a, 0x08, 0x45, 0x6e, 0x75, 0x6d, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x07, 0x0a, 0x03, 0x53,
	0x75, 0x6e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x07, 0x0a,
	0x03, 0x54, 0x75, 0x65, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x57, 0x65, 0x64, 0x10, 0x03, 0x12,
	0x07, 0x0a, 0x03, 0x54, 0x68, 0x75, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x46, 0x72, 0x69, 0x10,
	0x05, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x61, 0x74, 0x10, 0x06, 0x2a, 0x81, 0x01, 0x0a, 0x09, 0x45,
	0x6e, 0x75, 0x6d, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65,
	0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4a, 0x61, 0x6e, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x46,
	0x65, 0x62, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x61, 0x72, 0x10, 0x03, 0x12, 0x07, 0x0a,
	0x03, 0x41, 0x70, 0x72, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x61, 0x79, 0x10, 0x05, 0x12,
	0x07, 0x0a, 0x03, 0x4a, 0x75, 0x6e, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x4a, 0x75, 0x6c, 0x10,
	0x07, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x75, 0x67, 0x10, 0x08, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x65,
	0x70, 0x10, 0x09, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x63, 0x74, 0x10, 0x0a, 0x12, 0x07, 0x0a, 0x03,
	0x4e, 0x6f, 0x76, 0x10, 0x0b, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x65, 0x63, 0x10, 0x0c, 0x2a, 0x6c,
	0x0a, 0x0d, 0x45, 0x76, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0d, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x72, 0x79, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x45, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x79, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09,
	0x45, 0x76, 0x65, 0x72, 0x79, 0x57, 0x65, 0x65, 0x6b, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x45,
	0x76, 0x65, 0x72, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x45,
	0x76, 0x65, 0x72, 0x79, 0x51, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x10, 0x04, 0x12, 0x0d, 0x0a,
	0x09, 0x45, 0x76, 0x65, 0x72, 0x79, 0x59, 0x65, 0x61, 0x72, 0x10, 0x05, 0x32, 0xeb, 0x01, 0x0a,
	0x05, 0x4d, 0x42, 0x65, 0x74, 0x6c, 0x12, 0x32, 0x0a, 0x06, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x13, 0x2e, 0x6d, 0x62, 0x70, 0x62, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x6d, 0x62, 0x70, 0x62, 0x2e, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x27, 0x0a, 0x07, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x0d, 0x2e, 0x6d, 0x62, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x6d, 0x62, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x23, 0x0a, 0x03, 0x52, 0x75, 0x6e, 0x12, 0x0d, 0x2e, 0x6d, 0x62, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x6d, 0x62, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x26, 0x0a, 0x06, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x12, 0x0d, 0x2e, 0x6d, 0x62, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0b, 0x2e, 0x6d, 0x62, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x38, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x67, 0x65, 0x12,
	0x0d, 0x2e, 0x6d, 0x62, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b,
	0x2e, 0x6d, 0x62, 0x70, 0x62, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x22, 0x0d, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x07, 0x12, 0x05, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x42, 0x4d, 0x0a, 0x14, 0x63, 0x6f,
	0x6d, 0x2e, 0x6f, 0x74, 0x6f, 0x72, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x42, 0x0c, 0x4d, 0x42, 0x45, 0x74, 0x6c, 0x70, 0x62, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x25, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66,
	0x6f, 0x72, 0x68, 0x73, 0x64, 0x2f, 0x6d, 0x62, 0x70, 0x62, 0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e,
	0x67, 0x2f, 0x76, 0x31, 0x3b, 0x6d, 0x62, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_entrypoint_proto_rawDescOnce sync.Once
	file_entrypoint_proto_rawDescData = file_entrypoint_proto_rawDesc
)

func file_entrypoint_proto_rawDescGZIP() []byte {
	file_entrypoint_proto_rawDescOnce.Do(func() {
		file_entrypoint_proto_rawDescData = protoimpl.X.CompressGZIP(file_entrypoint_proto_rawDescData)
	})
	return file_entrypoint_proto_rawDescData
}

var file_entrypoint_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_entrypoint_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_entrypoint_proto_goTypes = []interface{}{
	(RunType)(0),                  // 0: mbpb.RunType
	(SourceType)(0),               // 1: mbpb.SourceType
	(RunStatus)(0),                // 2: mbpb.RunStatus
	(EveryType)(0),                // 3: mbpb.EveryType
	(EnumWeek)(0),                 // 4: mbpb.EnumWeek
	(EnumMonth)(0),                // 5: mbpb.EnumMonth
	(EveryTimeType)(0),            // 6: mbpb.EveryTimeType
	(*EnableRequest)(nil),         // 7: mbpb.EnableRequest
	(*EnableReply)(nil),           // 8: mbpb.EnableReply
	(*Request)(nil),               // 9: mbpb.Request
	(*Over)(nil),                  // 10: mbpb.Over
	(*Reply)(nil),                 // 11: mbpb.Reply
	(*Graph)(nil),                 // 12: mbpb.Graph
	(*Edge)(nil),                  // 13: mbpb.Edge
	(*Source)(nil),                // 14: mbpb.Source
	(*Property)(nil),              // 15: mbpb.Property
	(*Table)(nil),                 // 16: mbpb.Table
	(*Column)(nil),                // 17: mbpb.Column
	(*DBDetail)(nil),              // 18: mbpb.DBDetail
	(*CycleOnce)(nil),             // 19: mbpb.CycleOnce
	(*CycleEvery)(nil),            // 20: mbpb.CycleEvery
	(*CycleEveryTime)(nil),        // 21: mbpb.CycleEveryTime
	(*EveryExpress)(nil),          // 22: mbpb.EveryExpress
	(*Expression)(nil),            // 23: mbpb.Expression
	(*CycleEveryDay)(nil),         // 24: mbpb.CycleEveryDay
	(*CycleEveryWeek)(nil),        // 25: mbpb.CycleEveryWeek
	(*CycleEveryMonth)(nil),       // 26: mbpb.CycleEveryMonth
	(*WithMonth)(nil),             // 27: mbpb.WithMonth
	(*CycleEveryYear)(nil),        // 28: mbpb.CycleEveryYear
	(*WithQuarter)(nil),           // 29: mbpb.WithQuarter
	(*CycleEveryQuarter)(nil),     // 30: mbpb.CycleEveryQuarter
	(*CycleHour)(nil),             // 31: mbpb.CycleHour
	(*LifeCycle)(nil),             // 32: mbpb.LifeCycle
	(*Crontab)(nil),               // 33: mbpb.Crontab
	(*FQN)(nil),                   // 34: mbpb.FQN
	(*Extra)(nil),                 // 35: mbpb.Extra
	(*Error)(nil),                 // 36: mbpb.Error
	nil,                           // 37: mbpb.Source.PrevEntry
	nil,                           // 38: mbpb.DBDetail.ConnectParamsEntry
	(*timestamppb.Timestamp)(nil), // 39: google.protobuf.Timestamp
}
var file_entrypoint_proto_depIdxs = []int32{
	18, // 0: mbpb.EnableRequest.DBInfo:type_name -> mbpb.DBDetail
	33, // 1: mbpb.EnableRequest.Crontab:type_name -> mbpb.Crontab
	16, // 2: mbpb.EnableRequest.Tables:type_name -> mbpb.Table
	35, // 3: mbpb.EnableRequest.Extra:type_name -> mbpb.Extra
	10, // 4: mbpb.EnableRequest.Over:type_name -> mbpb.Over
	16, // 5: mbpb.EnableReply.OutTable:type_name -> mbpb.Table
	17, // 6: mbpb.EnableReply.Columns:type_name -> mbpb.Column
	36, // 7: mbpb.EnableReply.Error:type_name -> mbpb.Error
	10, // 8: mbpb.Request.Over:type_name -> mbpb.Over
	0,  // 9: mbpb.Over.RunType:type_name -> mbpb.RunType
	39, // 10: mbpb.Over.StartRunTime:type_name -> google.protobuf.Timestamp
	39, // 11: mbpb.Over.NextRunTime:type_name -> google.protobuf.Timestamp
	17, // 12: mbpb.Reply.Columns:type_name -> mbpb.Column
	36, // 13: mbpb.Reply.Error:type_name -> mbpb.Error
	14, // 14: mbpb.Graph.Children:type_name -> mbpb.Source
	13, // 15: mbpb.Graph.Edges:type_name -> mbpb.Edge
	36, // 16: mbpb.Graph.Error:type_name -> mbpb.Error
	1,  // 17: mbpb.Source.Type:type_name -> mbpb.SourceType
	37, // 18: mbpb.Source.Prev:type_name -> mbpb.Source.PrevEntry
	1,  // 19: mbpb.Property.Type:type_name -> mbpb.SourceType
	14, // 20: mbpb.Table.Source:type_name -> mbpb.Source
	38, // 21: mbpb.DBDetail.ConnectParams:type_name -> mbpb.DBDetail.ConnectParamsEntry
	23, // 22: mbpb.CycleOnce.Expression:type_name -> mbpb.Expression
	22, // 23: mbpb.CycleEvery.EveryExpress:type_name -> mbpb.EveryExpress
	23, // 24: mbpb.CycleEvery.Expression:type_name -> mbpb.Expression
	6,  // 25: mbpb.CycleEveryTime.EveryType:type_name -> mbpb.EveryTimeType
	31, // 26: mbpb.CycleEveryTime.RunTime:type_name -> mbpb.CycleHour
	24, // 27: mbpb.CycleEveryTime.EveryDay:type_name -> mbpb.CycleEveryDay
	25, // 28: mbpb.CycleEveryTime.EveryWeek:type_name -> mbpb.CycleEveryWeek
	26, // 29: mbpb.CycleEveryTime.EveryMonth:type_name -> mbpb.CycleEveryMonth
	30, // 30: mbpb.CycleEveryTime.EveryQuarter:type_name -> mbpb.CycleEveryQuarter
	28, // 31: mbpb.CycleEveryTime.EveryYear:type_name -> mbpb.CycleEveryYear
	3,  // 32: mbpb.EveryExpress.CycleType:type_name -> mbpb.EveryType
	4,  // 33: mbpb.CycleEveryWeek.Week:type_name -> mbpb.EnumWeek
	5,  // 34: mbpb.WithMonth.Month:type_name -> mbpb.EnumMonth
	27, // 35: mbpb.CycleEveryYear.Month:type_name -> mbpb.WithMonth
	29, // 36: mbpb.CycleEveryQuarter.Month:type_name -> mbpb.WithQuarter
	32, // 37: mbpb.Crontab.LifeCycle:type_name -> mbpb.LifeCycle
	19, // 38: mbpb.Crontab.CycleOnce:type_name -> mbpb.CycleOnce
	20, // 39: mbpb.Crontab.CycleEvery:type_name -> mbpb.CycleEvery
	21, // 40: mbpb.Crontab.CycleEveryTime:type_name -> mbpb.CycleEveryTime
	34, // 41: mbpb.Extra.Grouping:type_name -> mbpb.FQN
	34, // 42: mbpb.Extra.Selects:type_name -> mbpb.FQN
	15, // 43: mbpb.Source.PrevEntry.value:type_name -> mbpb.Property
	7,  // 44: mbpb.MBetl.Enable:input_type -> mbpb.EnableRequest
	9,  // 45: mbpb.MBetl.Disable:input_type -> mbpb.Request
	9,  // 46: mbpb.MBetl.Run:input_type -> mbpb.Request
	9,  // 47: mbpb.MBetl.Cancel:input_type -> mbpb.Request
	9,  // 48: mbpb.MBetl.DataLineage:input_type -> mbpb.Request
	8,  // 49: mbpb.MBetl.Enable:output_type -> mbpb.EnableReply
	11, // 50: mbpb.MBetl.Disable:output_type -> mbpb.Reply
	11, // 51: mbpb.MBetl.Run:output_type -> mbpb.Reply
	11, // 52: mbpb.MBetl.Cancel:output_type -> mbpb.Reply
	12, // 53: mbpb.MBetl.DataLineage:output_type -> mbpb.Graph
	49, // [49:54] is the sub-list for method output_type
	44, // [44:49] is the sub-list for method input_type
	44, // [44:44] is the sub-list for extension type_name
	44, // [44:44] is the sub-list for extension extendee
	0,  // [0:44] is the sub-list for field type_name
}

func init() { file_entrypoint_proto_init() }
func file_entrypoint_proto_init() {
	if File_entrypoint_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_entrypoint_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entrypoint_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entrypoint_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entrypoint_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Over); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entrypoint_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entrypoint_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Graph); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entrypoint_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Edge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entrypoint_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entrypoint_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Property); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entrypoint_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Table); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entrypoint_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Column); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entrypoint_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entrypoint_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CycleOnce); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entrypoint_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CycleEvery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entrypoint_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CycleEveryTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entrypoint_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EveryExpress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entrypoint_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entrypoint_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CycleEveryDay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entrypoint_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CycleEveryWeek); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entrypoint_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CycleEveryMonth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entrypoint_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithMonth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entrypoint_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CycleEveryYear); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entrypoint_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithQuarter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entrypoint_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CycleEveryQuarter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entrypoint_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CycleHour); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entrypoint_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LifeCycle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entrypoint_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Crontab); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entrypoint_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FQN); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entrypoint_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Extra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entrypoint_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_entrypoint_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_entrypoint_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_entrypoint_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_entrypoint_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_entrypoint_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_entrypoint_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_entrypoint_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_entrypoint_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*CycleEveryTime_EveryDay)(nil),
		(*CycleEveryTime_EveryWeek)(nil),
		(*CycleEveryTime_EveryMonth)(nil),
		(*CycleEveryTime_EveryQuarter)(nil),
		(*CycleEveryTime_EveryYear)(nil),
	}
	file_entrypoint_proto_msgTypes[25].OneofWrappers = []interface{}{}
	file_entrypoint_proto_msgTypes[26].OneofWrappers = []interface{}{
		(*Crontab_CycleOnce)(nil),
		(*Crontab_CycleEvery)(nil),
		(*Crontab_CycleEveryTime)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_entrypoint_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_entrypoint_proto_goTypes,
		DependencyIndexes: file_entrypoint_proto_depIdxs,
		EnumInfos:         file_entrypoint_proto_enumTypes,
		MessageInfos:      file_entrypoint_proto_msgTypes,
	}.Build()
	File_entrypoint_proto = out.File
	file_entrypoint_proto_rawDesc = nil
	file_entrypoint_proto_goTypes = nil
	file_entrypoint_proto_depIdxs = nil
}
