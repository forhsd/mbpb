// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: entrypoint.proto

package mbpb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SyncType int32

const (
	SyncType_STOCK SyncType = 0 // 存量
	SyncType_INCRE SyncType = 1 // 增量
)

// Enum value maps for SyncType.
var (
	SyncType_name = map[int32]string{
		0: "STOCK",
		1: "INCRE",
	}
	SyncType_value = map[string]int32{
		"STOCK": 0,
		"INCRE": 1,
	}
)

func (x SyncType) Enum() *SyncType {
	p := new(SyncType)
	*p = x
	return p
}

func (x SyncType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SyncType) Descriptor() protoreflect.EnumDescriptor {
	return file_entrypoint_proto_enumTypes[0].Descriptor()
}

func (SyncType) Type() protoreflect.EnumType {
	return &file_entrypoint_proto_enumTypes[0]
}

func (x SyncType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SyncType.Descriptor instead.
func (SyncType) EnumDescriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{0}
}

type OperationType int32

const (
	OperationType_UNKNOWN OperationType = 0 // 无效操作
	OperationType_ENABLE  OperationType = 1 // 启用
	OperationType_DISABLE OperationType = 2 // 禁用
	OperationType_REMOVE  OperationType = 3 // 删除
	OperationType_READ    OperationType = 4 // 读取
)

// Enum value maps for OperationType.
var (
	OperationType_name = map[int32]string{
		0: "UNKNOWN",
		1: "ENABLE",
		2: "DISABLE",
		3: "REMOVE",
		4: "READ",
	}
	OperationType_value = map[string]int32{
		"UNKNOWN": 0,
		"ENABLE":  1,
		"DISABLE": 2,
		"REMOVE":  3,
		"READ":    4,
	}
)

func (x OperationType) Enum() *OperationType {
	p := new(OperationType)
	*p = x
	return p
}

func (x OperationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperationType) Descriptor() protoreflect.EnumDescriptor {
	return file_entrypoint_proto_enumTypes[1].Descriptor()
}

func (OperationType) Type() protoreflect.EnumType {
	return &file_entrypoint_proto_enumTypes[1]
}

func (x OperationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperationType.Descriptor instead.
func (OperationType) EnumDescriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{1}
}

type FlowTaskType int32

const (
	FlowTaskType_InvalidTask    FlowTaskType = 0 // 无效任务
	FlowTaskType_RefInvalidTask FlowTaskType = 1 // 任务被引用所以失效 后期数据不会更新
	FlowTaskType_NormalTask     FlowTaskType = 2 // 正常任务
)

// Enum value maps for FlowTaskType.
var (
	FlowTaskType_name = map[int32]string{
		0: "InvalidTask",
		1: "RefInvalidTask",
		2: "NormalTask",
	}
	FlowTaskType_value = map[string]int32{
		"InvalidTask":    0,
		"RefInvalidTask": 1,
		"NormalTask":     2,
	}
)

func (x FlowTaskType) Enum() *FlowTaskType {
	p := new(FlowTaskType)
	*p = x
	return p
}

func (x FlowTaskType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlowTaskType) Descriptor() protoreflect.EnumDescriptor {
	return file_entrypoint_proto_enumTypes[2].Descriptor()
}

func (FlowTaskType) Type() protoreflect.EnumType {
	return &file_entrypoint_proto_enumTypes[2]
}

func (x FlowTaskType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlowTaskType.Descriptor instead.
func (FlowTaskType) EnumDescriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{2}
}

type AcceptAction int32

const (
	AcceptAction_Nothing    AcceptAction = 0 // 无任何动作
	AcceptAction_NewFlow    AcceptAction = 1 // 新建工作流
	AcceptAction_AppendFlow AcceptAction = 2 // 追加工作流
	AcceptAction_MergeFlow  AcceptAction = 3 // 合并工作流
)

// Enum value maps for AcceptAction.
var (
	AcceptAction_name = map[int32]string{
		0: "Nothing",
		1: "NewFlow",
		2: "AppendFlow",
		3: "MergeFlow",
	}
	AcceptAction_value = map[string]int32{
		"Nothing":    0,
		"NewFlow":    1,
		"AppendFlow": 2,
		"MergeFlow":  3,
	}
)

func (x AcceptAction) Enum() *AcceptAction {
	p := new(AcceptAction)
	*p = x
	return p
}

func (x AcceptAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AcceptAction) Descriptor() protoreflect.EnumDescriptor {
	return file_entrypoint_proto_enumTypes[3].Descriptor()
}

func (AcceptAction) Type() protoreflect.EnumType {
	return &file_entrypoint_proto_enumTypes[3]
}

func (x AcceptAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AcceptAction.Descriptor instead.
func (AcceptAction) EnumDescriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{3}
}

// 任务类型
type TaskType int32

const (
	TaskType_BasicTask   TaskType = 0 // 基本任务
	TaskType_FlowTask    TaskType = 1 // 工作流
	TaskType_WebhookTask TaskType = 2 // 钩子任务
)

// Enum value maps for TaskType.
var (
	TaskType_name = map[int32]string{
		0: "BasicTask",
		1: "FlowTask",
		2: "WebhookTask",
	}
	TaskType_value = map[string]int32{
		"BasicTask":   0,
		"FlowTask":    1,
		"WebhookTask": 2,
	}
)

func (x TaskType) Enum() *TaskType {
	p := new(TaskType)
	*p = x
	return p
}

func (x TaskType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskType) Descriptor() protoreflect.EnumDescriptor {
	return file_entrypoint_proto_enumTypes[4].Descriptor()
}

func (TaskType) Type() protoreflect.EnumType {
	return &file_entrypoint_proto_enumTypes[4]
}

func (x TaskType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskType.Descriptor instead.
func (TaskType) EnumDescriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{4}
}

type RunType int32

const (
	RunType_Cycle RunType = 0 // 周期
	RunType_Spark RunType = 1 // 手动
)

// Enum value maps for RunType.
var (
	RunType_name = map[int32]string{
		0: "Cycle",
		1: "Spark",
	}
	RunType_value = map[string]int32{
		"Cycle": 0,
		"Spark": 1,
	}
)

func (x RunType) Enum() *RunType {
	p := new(RunType)
	*p = x
	return p
}

func (x RunType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RunType) Descriptor() protoreflect.EnumDescriptor {
	return file_entrypoint_proto_enumTypes[5].Descriptor()
}

func (RunType) Type() protoreflect.EnumType {
	return &file_entrypoint_proto_enumTypes[5]
}

func (x RunType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RunType.Descriptor instead.
func (RunType) EnumDescriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{5}
}

type SourceType int32

const (
	SourceType_RemoteDB   SourceType = 0   // 远程数据库
	SourceType_ImportData SourceType = 1   // 导入数据
	SourceType_DataFill   SourceType = 2   // 数据填报
	SourceType_MbEtl      SourceType = 3   // ETL
	SourceType_RemoteApi  SourceType = 4   // RemoteAPI
	SourceType_UnknownSrc SourceType = 999 // 未知
)

// Enum value maps for SourceType.
var (
	SourceType_name = map[int32]string{
		0:   "RemoteDB",
		1:   "ImportData",
		2:   "DataFill",
		3:   "MbEtl",
		4:   "RemoteApi",
		999: "UnknownSrc",
	}
	SourceType_value = map[string]int32{
		"RemoteDB":   0,
		"ImportData": 1,
		"DataFill":   2,
		"MbEtl":      3,
		"RemoteApi":  4,
		"UnknownSrc": 999,
	}
)

func (x SourceType) Enum() *SourceType {
	p := new(SourceType)
	*p = x
	return p
}

func (x SourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_entrypoint_proto_enumTypes[6].Descriptor()
}

func (SourceType) Type() protoreflect.EnumType {
	return &file_entrypoint_proto_enumTypes[6]
}

func (x SourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SourceType.Descriptor instead.
func (SourceType) EnumDescriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{6}
}

// 工作流进度
type FlowDataStat int32

const (
	FlowDataStat_Inside FlowDataStat = 0 // 内部默认
	FlowDataStat_Draft  FlowDataStat = 1 // 草稿
	FlowDataStat_Formal FlowDataStat = 2 // 正式
)

// Enum value maps for FlowDataStat.
var (
	FlowDataStat_name = map[int32]string{
		0: "Inside",
		1: "Draft",
		2: "Formal",
	}
	FlowDataStat_value = map[string]int32{
		"Inside": 0,
		"Draft":  1,
		"Formal": 2,
	}
)

func (x FlowDataStat) Enum() *FlowDataStat {
	p := new(FlowDataStat)
	*p = x
	return p
}

func (x FlowDataStat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlowDataStat) Descriptor() protoreflect.EnumDescriptor {
	return file_entrypoint_proto_enumTypes[7].Descriptor()
}

func (FlowDataStat) Type() protoreflect.EnumType {
	return &file_entrypoint_proto_enumTypes[7]
}

func (x FlowDataStat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlowDataStat.Descriptor instead.
func (FlowDataStat) EnumDescriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{7}
}

// 运行状态
type RunStatus int32

const (
	RunStatus_Unknown    RunStatus = 0   // 未知
	RunStatus_NotRunning RunStatus = 2   // 未运行
	RunStatus_Scheme     RunStatus = 4   // 计划中
	RunStatus_Running    RunStatus = 8   // 运行中
	RunStatus_Success    RunStatus = 16  // 运行成功
	RunStatus_Fail       RunStatus = 32  // 运行失败
	RunStatus_Cancel     RunStatus = 64  // 已取消
	RunStatus_Skip       RunStatus = 128 // 跳过
)

// Enum value maps for RunStatus.
var (
	RunStatus_name = map[int32]string{
		0:   "Unknown",
		2:   "NotRunning",
		4:   "Scheme",
		8:   "Running",
		16:  "Success",
		32:  "Fail",
		64:  "Cancel",
		128: "Skip",
	}
	RunStatus_value = map[string]int32{
		"Unknown":    0,
		"NotRunning": 2,
		"Scheme":     4,
		"Running":    8,
		"Success":    16,
		"Fail":       32,
		"Cancel":     64,
		"Skip":       128,
	}
)

func (x RunStatus) Enum() *RunStatus {
	p := new(RunStatus)
	*p = x
	return p
}

func (x RunStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RunStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_entrypoint_proto_enumTypes[8].Descriptor()
}

func (RunStatus) Type() protoreflect.EnumType {
	return &file_entrypoint_proto_enumTypes[8]
}

func (x RunStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RunStatus.Descriptor instead.
func (RunStatus) EnumDescriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{8}
}

type DBType int32

const (
	DBType_UNSPECIFIED DBType = 0 // 未定义
	DBType_POSTGRES    DBType = 1 // postgres
	DBType_DORIS       DBType = 2 // doris
	DBType_MYSQL       DBType = 3 // mysql
)

// Enum value maps for DBType.
var (
	DBType_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "POSTGRES",
		2: "DORIS",
		3: "MYSQL",
	}
	DBType_value = map[string]int32{
		"UNSPECIFIED": 0,
		"POSTGRES":    1,
		"DORIS":       2,
		"MYSQL":       3,
	}
)

func (x DBType) Enum() *DBType {
	p := new(DBType)
	*p = x
	return p
}

func (x DBType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DBType) Descriptor() protoreflect.EnumDescriptor {
	return file_entrypoint_proto_enumTypes[9].Descriptor()
}

func (DBType) Type() protoreflect.EnumType {
	return &file_entrypoint_proto_enumTypes[9]
}

func (x DBType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DBType.Descriptor instead.
func (DBType) EnumDescriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{9}
}

// 间隔时间执行类型
type EveryType int32

const (
	EveryType_EvNone   EveryType = 0 // 未定义
	EveryType_EvMinute EveryType = 1 // N分钟
	EveryType_EvHour   EveryType = 2 // N小时
	EveryType_EvDay    EveryType = 3 // N天
	EveryType_EvWeek   EveryType = 4 // N周
	EveryType_EvMonth  EveryType = 5 // N月
)

// Enum value maps for EveryType.
var (
	EveryType_name = map[int32]string{
		0: "EvNone",
		1: "EvMinute",
		2: "EvHour",
		3: "EvDay",
		4: "EvWeek",
		5: "EvMonth",
	}
	EveryType_value = map[string]int32{
		"EvNone":   0,
		"EvMinute": 1,
		"EvHour":   2,
		"EvDay":    3,
		"EvWeek":   4,
		"EvMonth":  5,
	}
)

func (x EveryType) Enum() *EveryType {
	p := new(EveryType)
	*p = x
	return p
}

func (x EveryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EveryType) Descriptor() protoreflect.EnumDescriptor {
	return file_entrypoint_proto_enumTypes[10].Descriptor()
}

func (EveryType) Type() protoreflect.EnumType {
	return &file_entrypoint_proto_enumTypes[10]
}

func (x EveryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EveryType.Descriptor instead.
func (EveryType) EnumDescriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{10}
}

// 周枚举
type EnumWeek int32

const (
	EnumWeek_Sun EnumWeek = 0 // 周日
	EnumWeek_Mon EnumWeek = 1 // 周一
	EnumWeek_Tue EnumWeek = 2 // 周二
	EnumWeek_Wed EnumWeek = 3 // 周三
	EnumWeek_Thu EnumWeek = 4 // 周四
	EnumWeek_Fri EnumWeek = 5 // 周五
	EnumWeek_Sat EnumWeek = 6 // 周六
)

// Enum value maps for EnumWeek.
var (
	EnumWeek_name = map[int32]string{
		0: "Sun",
		1: "Mon",
		2: "Tue",
		3: "Wed",
		4: "Thu",
		5: "Fri",
		6: "Sat",
	}
	EnumWeek_value = map[string]int32{
		"Sun": 0,
		"Mon": 1,
		"Tue": 2,
		"Wed": 3,
		"Thu": 4,
		"Fri": 5,
		"Sat": 6,
	}
)

func (x EnumWeek) Enum() *EnumWeek {
	p := new(EnumWeek)
	*p = x
	return p
}

func (x EnumWeek) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumWeek) Descriptor() protoreflect.EnumDescriptor {
	return file_entrypoint_proto_enumTypes[11].Descriptor()
}

func (EnumWeek) Type() protoreflect.EnumType {
	return &file_entrypoint_proto_enumTypes[11]
}

func (x EnumWeek) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnumWeek.Descriptor instead.
func (EnumWeek) EnumDescriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{11}
}

// 月枚举
type EnumMonth int32

const (
	EnumMonth_None EnumMonth = 0
	EnumMonth_Jan  EnumMonth = 1
	EnumMonth_Feb  EnumMonth = 2
	EnumMonth_Mar  EnumMonth = 3
	EnumMonth_Apr  EnumMonth = 4
	EnumMonth_May  EnumMonth = 5
	EnumMonth_Jun  EnumMonth = 6
	EnumMonth_Jul  EnumMonth = 7
	EnumMonth_Aug  EnumMonth = 8
	EnumMonth_Sep  EnumMonth = 9
	EnumMonth_Oct  EnumMonth = 10
	EnumMonth_Nov  EnumMonth = 11
	EnumMonth_Dec  EnumMonth = 12
)

// Enum value maps for EnumMonth.
var (
	EnumMonth_name = map[int32]string{
		0:  "None",
		1:  "Jan",
		2:  "Feb",
		3:  "Mar",
		4:  "Apr",
		5:  "May",
		6:  "Jun",
		7:  "Jul",
		8:  "Aug",
		9:  "Sep",
		10: "Oct",
		11: "Nov",
		12: "Dec",
	}
	EnumMonth_value = map[string]int32{
		"None": 0,
		"Jan":  1,
		"Feb":  2,
		"Mar":  3,
		"Apr":  4,
		"May":  5,
		"Jun":  6,
		"Jul":  7,
		"Aug":  8,
		"Sep":  9,
		"Oct":  10,
		"Nov":  11,
		"Dec":  12,
	}
)

func (x EnumMonth) Enum() *EnumMonth {
	p := new(EnumMonth)
	*p = x
	return p
}

func (x EnumMonth) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumMonth) Descriptor() protoreflect.EnumDescriptor {
	return file_entrypoint_proto_enumTypes[12].Descriptor()
}

func (EnumMonth) Type() protoreflect.EnumType {
	return &file_entrypoint_proto_enumTypes[12]
}

func (x EnumMonth) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnumMonth.Descriptor instead.
func (EnumMonth) EnumDescriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{12}
}

// 周期类型
type EveryTimeType int32

const (
	EveryTimeType_EveryNone    EveryTimeType = 0 // 未知
	EveryTimeType_EveryDay     EveryTimeType = 1 // 每天
	EveryTimeType_EveryWeek    EveryTimeType = 2 // 每周
	EveryTimeType_EveryMonth   EveryTimeType = 3 // 每月
	EveryTimeType_EveryQuarter EveryTimeType = 4 // 每季
	EveryTimeType_EveryYear    EveryTimeType = 5 // 每年
)

// Enum value maps for EveryTimeType.
var (
	EveryTimeType_name = map[int32]string{
		0: "EveryNone",
		1: "EveryDay",
		2: "EveryWeek",
		3: "EveryMonth",
		4: "EveryQuarter",
		5: "EveryYear",
	}
	EveryTimeType_value = map[string]int32{
		"EveryNone":    0,
		"EveryDay":     1,
		"EveryWeek":    2,
		"EveryMonth":   3,
		"EveryQuarter": 4,
		"EveryYear":    5,
	}
)

func (x EveryTimeType) Enum() *EveryTimeType {
	p := new(EveryTimeType)
	*p = x
	return p
}

func (x EveryTimeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EveryTimeType) Descriptor() protoreflect.EnumDescriptor {
	return file_entrypoint_proto_enumTypes[13].Descriptor()
}

func (EveryTimeType) Type() protoreflect.EnumType {
	return &file_entrypoint_proto_enumTypes[13]
}

func (x EveryTimeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EveryTimeType.Descriptor instead.
func (EveryTimeType) EnumDescriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{13}
}

type PrimaryKey struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                   // 主键
	Page          *int32                 `protobuf:"varint,2,opt,name=page,proto3,oneof" json:"page,omitempty"`                         // 页码
	PageSize      *int32                 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"` // 每页大小
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PrimaryKey) Reset() {
	*x = PrimaryKey{}
	mi := &file_entrypoint_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrimaryKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrimaryKey) ProtoMessage() {}

func (x *PrimaryKey) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrimaryKey.ProtoReflect.Descriptor instead.
func (*PrimaryKey) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{0}
}

func (x *PrimaryKey) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PrimaryKey) GetPage() int32 {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return 0
}

func (x *PrimaryKey) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

type GenericReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *Error                 `protobuf:"bytes,1,opt,name=error,proto3,oneof" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenericReply) Reset() {
	*x = GenericReply{}
	mi := &file_entrypoint_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenericReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericReply) ProtoMessage() {}

func (x *GenericReply) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericReply.ProtoReflect.Descriptor instead.
func (*GenericReply) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{1}
}

func (x *GenericReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// 增量请求
type IncrRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// id新建时不传
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 读取数据库ID
	ReadDbId int32 `protobuf:"varint,2,opt,name=read_db_id,json=readDbId,proto3" json:"read_db_id,omitempty"`
	// 写入数据库ID
	WriteDbId int32 `protobuf:"varint,3,opt,name=write_db_id,json=writeDbId,proto3" json:"write_db_id,omitempty"`
	// 建表语句id
	ModelId int32 `protobuf:"varint,4,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	// 存量最小时间sql 格式2006-01-02 15:04:05
	StockMinTimeScript string `protobuf:"bytes,5,opt,name=stock_min_time_script,json=stockMinTimeScript,proto3" json:"stock_min_time_script,omitempty"`
	// 存量同步数据间距 单位h 默认72h
	StockInterval string `protobuf:"bytes,6,opt,name=stock_interval,json=stockInterval,proto3" json:"stock_interval,omitempty"`
	// 增量周期
	IncrCycle *Crontab `protobuf:"bytes,7,opt,name=incr_cycle,json=incrCycle,proto3" json:"incr_cycle,omitempty"`
	// 结果保存位置 schema.table
	TableIdentifier *SchemaQualifiedName `protobuf:"bytes,8,opt,name=table_identifier,json=tableIdentifier,proto3" json:"table_identifier,omitempty"`
	// 维度集合查询语句
	DimensionSetSql *string `protobuf:"bytes,9,opt,name=dimension_set_sql,json=dimensionSetSql,proto3,oneof" json:"dimension_set_sql,omitempty"`
	// 查询脚本
	//
	// Types that are valid to be assigned to ReadScript:
	//
	//	*IncrRequest_Basic
	//	*IncrRequest_Template
	ReadScript    isIncrRequest_ReadScript `protobuf_oneof:"read_script"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IncrRequest) Reset() {
	*x = IncrRequest{}
	mi := &file_entrypoint_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IncrRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncrRequest) ProtoMessage() {}

func (x *IncrRequest) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncrRequest.ProtoReflect.Descriptor instead.
func (*IncrRequest) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{2}
}

func (x *IncrRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *IncrRequest) GetReadDbId() int32 {
	if x != nil {
		return x.ReadDbId
	}
	return 0
}

func (x *IncrRequest) GetWriteDbId() int32 {
	if x != nil {
		return x.WriteDbId
	}
	return 0
}

func (x *IncrRequest) GetModelId() int32 {
	if x != nil {
		return x.ModelId
	}
	return 0
}

func (x *IncrRequest) GetStockMinTimeScript() string {
	if x != nil {
		return x.StockMinTimeScript
	}
	return ""
}

func (x *IncrRequest) GetStockInterval() string {
	if x != nil {
		return x.StockInterval
	}
	return ""
}

func (x *IncrRequest) GetIncrCycle() *Crontab {
	if x != nil {
		return x.IncrCycle
	}
	return nil
}

func (x *IncrRequest) GetTableIdentifier() *SchemaQualifiedName {
	if x != nil {
		return x.TableIdentifier
	}
	return nil
}

func (x *IncrRequest) GetDimensionSetSql() string {
	if x != nil && x.DimensionSetSql != nil {
		return *x.DimensionSetSql
	}
	return ""
}

func (x *IncrRequest) GetReadScript() isIncrRequest_ReadScript {
	if x != nil {
		return x.ReadScript
	}
	return nil
}

func (x *IncrRequest) GetBasic() string {
	if x != nil {
		if x, ok := x.ReadScript.(*IncrRequest_Basic); ok {
			return x.Basic
		}
	}
	return ""
}

func (x *IncrRequest) GetTemplate() string {
	if x != nil {
		if x, ok := x.ReadScript.(*IncrRequest_Template); ok {
			return x.Template
		}
	}
	return ""
}

type isIncrRequest_ReadScript interface {
	isIncrRequest_ReadScript()
}

type IncrRequest_Basic struct {
	// 基本任务
	Basic string `protobuf:"bytes,101,opt,name=basic,proto3,oneof"`
}

type IncrRequest_Template struct {
	// 模板任务
	Template string `protobuf:"bytes,102,opt,name=template,proto3,oneof"`
}

func (*IncrRequest_Basic) isIncrRequest_ReadScript() {}

func (*IncrRequest_Template) isIncrRequest_ReadScript() {}

// 增量响应
type IncrReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Incres        []*IncrRequest         `protobuf:"bytes,1,rep,name=incres,proto3" json:"incres,omitempty"`
	Error         *Error                 `protobuf:"bytes,2,opt,name=error,proto3,oneof" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IncrReply) Reset() {
	*x = IncrReply{}
	mi := &file_entrypoint_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IncrReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncrReply) ProtoMessage() {}

func (x *IncrReply) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncrReply.ProtoReflect.Descriptor instead.
func (*IncrReply) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{3}
}

func (x *IncrReply) GetIncres() []*IncrRequest {
	if x != nil {
		return x.Incres
	}
	return nil
}

func (x *IncrReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type ModelRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                     // 新建时不传
	DisplayName   string                 `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"` // 显示名
	TargetDbId    int32                  `protobuf:"varint,3,opt,name=target_db_id,json=targetDbId,proto3" json:"target_db_id,omitempty"` // 目标数据库ID
	Script        string                 `protobuf:"bytes,4,opt,name=script,proto3" json:"script,omitempty"`                              // sql语句
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ModelRequest) Reset() {
	*x = ModelRequest{}
	mi := &file_entrypoint_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelRequest) ProtoMessage() {}

func (x *ModelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelRequest.ProtoReflect.Descriptor instead.
func (*ModelRequest) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{4}
}

func (x *ModelRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ModelRequest) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ModelRequest) GetTargetDbId() int32 {
	if x != nil {
		return x.TargetDbId
	}
	return 0
}

func (x *ModelRequest) GetScript() string {
	if x != nil {
		return x.Script
	}
	return ""
}

type ModelReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tables        []*ModelRequest        `protobuf:"bytes,1,rep,name=tables,proto3" json:"tables,omitempty"`                               // 表列表
	Table         *ModelRequest          `protobuf:"bytes,2,opt,name=table,proto3,oneof" json:"table,omitempty"`                           // 表
	TotalRows     *int64                 `protobuf:"varint,3,opt,name=total_rows,json=totalRows,proto3,oneof" json:"total_rows,omitempty"` // 总行数
	TotalPage     *int64                 `protobuf:"varint,4,opt,name=total_page,json=totalPage,proto3,oneof" json:"total_page,omitempty"` // 总页数
	Request       *PrimaryKey            `protobuf:"bytes,5,opt,name=request,proto3,oneof" json:"request,omitempty"`                       // 请求参数
	Error         *Error                 `protobuf:"bytes,6,opt,name=error,proto3,oneof" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ModelReply) Reset() {
	*x = ModelReply{}
	mi := &file_entrypoint_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModelReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelReply) ProtoMessage() {}

func (x *ModelReply) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelReply.ProtoReflect.Descriptor instead.
func (*ModelReply) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{5}
}

func (x *ModelReply) GetTables() []*ModelRequest {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *ModelReply) GetTable() *ModelRequest {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *ModelReply) GetTotalRows() int64 {
	if x != nil && x.TotalRows != nil {
		return *x.TotalRows
	}
	return 0
}

func (x *ModelReply) GetTotalPage() int64 {
	if x != nil && x.TotalPage != nil {
		return *x.TotalPage
	}
	return 0
}

func (x *ModelReply) GetRequest() *PrimaryKey {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *ModelReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type SchemaQualifiedName struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Schema        string                 `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"` // 后期支持${enterprise_id}语法
	Table         string                 `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`   //
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SchemaQualifiedName) Reset() {
	*x = SchemaQualifiedName{}
	mi := &file_entrypoint_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchemaQualifiedName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaQualifiedName) ProtoMessage() {}

func (x *SchemaQualifiedName) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaQualifiedName.ProtoReflect.Descriptor instead.
func (*SchemaQualifiedName) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{6}
}

func (x *SchemaQualifiedName) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *SchemaQualifiedName) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

type BatchOpRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BatchOps      []*WebHookRequest      `protobuf:"bytes,1,rep,name=batch_ops,json=batchOps,proto3" json:"batch_ops,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchOpRequest) Reset() {
	*x = BatchOpRequest{}
	mi := &file_entrypoint_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchOpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchOpRequest) ProtoMessage() {}

func (x *BatchOpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchOpRequest.ProtoReflect.Descriptor instead.
func (*BatchOpRequest) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{7}
}

func (x *BatchOpRequest) GetBatchOps() []*WebHookRequest {
	if x != nil {
		return x.BatchOps
	}
	return nil
}

type BatchOpResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Responses     []*WebHookReply        `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchOpResponse) Reset() {
	*x = BatchOpResponse{}
	mi := &file_entrypoint_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchOpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchOpResponse) ProtoMessage() {}

func (x *BatchOpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchOpResponse.ProtoReflect.Descriptor instead.
func (*BatchOpResponse) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{8}
}

func (x *BatchOpResponse) GetResponses() []*WebHookReply {
	if x != nil {
		return x.Responses
	}
	return nil
}

// 定期回调任务 不发kafka
type WebHookRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                             // 自增ID,新增时不传,修改时必传
	UniqueId      string                 `protobuf:"bytes,2,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`  // 唯一ID
	Url           string                 `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`                            // 回调地址
	Type          OperationType          `protobuf:"varint,4,opt,name=type,proto3,enum=mbpb.OperationType" json:"type,omitempty"` // 操作类型
	Crontab       *Crontab               `protobuf:"bytes,5,opt,name=crontab,proto3" json:"crontab,omitempty"`                    // Crontab表达式
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WebHookRequest) Reset() {
	*x = WebHookRequest{}
	mi := &file_entrypoint_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WebHookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebHookRequest) ProtoMessage() {}

func (x *WebHookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebHookRequest.ProtoReflect.Descriptor instead.
func (*WebHookRequest) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{9}
}

func (x *WebHookRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WebHookRequest) GetUniqueId() string {
	if x != nil {
		return x.UniqueId
	}
	return ""
}

func (x *WebHookRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *WebHookRequest) GetType() OperationType {
	if x != nil {
		return x.Type
	}
	return OperationType_UNKNOWN
}

func (x *WebHookRequest) GetCrontab() *Crontab {
	if x != nil {
		return x.Crontab
	}
	return nil
}

type WebHookReply struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 自增主键ID
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 下次运行时间
	NextRuntime *string `protobuf:"bytes,2,opt,name=next_runtime,json=nextRuntime,proto3,oneof" json:"next_runtime,omitempty"`
	// 运作为READ时,返回上一次成功保存的请求体
	Request *WebHookRequest `protobuf:"bytes,3,opt,name=request,proto3,oneof" json:"request,omitempty"`
	// 错误信息 可选
	Error         *Error `protobuf:"bytes,4,opt,name=error,proto3,oneof" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WebHookReply) Reset() {
	*x = WebHookReply{}
	mi := &file_entrypoint_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WebHookReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebHookReply) ProtoMessage() {}

func (x *WebHookReply) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebHookReply.ProtoReflect.Descriptor instead.
func (*WebHookReply) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{10}
}

func (x *WebHookReply) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WebHookReply) GetNextRuntime() string {
	if x != nil && x.NextRuntime != nil {
		return *x.NextRuntime
	}
	return ""
}

func (x *WebHookReply) GetRequest() *WebHookRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *WebHookReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type BatchRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           []int32                `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchRequest) Reset() {
	*x = BatchRequest{}
	mi := &file_entrypoint_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchRequest) ProtoMessage() {}

func (x *BatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchRequest.ProtoReflect.Descriptor instead.
func (*BatchRequest) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{11}
}

func (x *BatchRequest) GetIds() []int32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

// 任务流查询请求结构
type FlowRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                      // 工作流ID
	SequenceId    *string                `protobuf:"bytes,2,opt,name=sequenceId,proto3,oneof" json:"sequenceId,omitempty"` // 序列ID,仅工作流运行接口传递,运行必传
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlowRequest) Reset() {
	*x = FlowRequest{}
	mi := &file_entrypoint_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowRequest) ProtoMessage() {}

func (x *FlowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowRequest.ProtoReflect.Descriptor instead.
func (*FlowRequest) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{12}
}

func (x *FlowRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FlowRequest) GetSequenceId() string {
	if x != nil && x.SequenceId != nil {
		return *x.SequenceId
	}
	return ""
}

// 工作流取消响应
type FlowCancelReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SequenceID    *string                `protobuf:"bytes,1,opt,name=sequenceID,proto3,oneof" json:"sequenceID,omitempty"` // 序列ID
	Error         *Error                 `protobuf:"bytes,2,opt,name=error,proto3,oneof" json:"error,omitempty"`           // 错误信息 可选
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlowCancelReply) Reset() {
	*x = FlowCancelReply{}
	mi := &file_entrypoint_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlowCancelReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowCancelReply) ProtoMessage() {}

func (x *FlowCancelReply) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowCancelReply.ProtoReflect.Descriptor instead.
func (*FlowCancelReply) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{13}
}

func (x *FlowCancelReply) GetSequenceID() string {
	if x != nil && x.SequenceID != nil {
		return *x.SequenceID
	}
	return ""
}

func (x *FlowCancelReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type FlowReply struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 关系图
	Graph *Graph `protobuf:"bytes,1,opt,name=graph,proto3,oneof" json:"graph,omitempty"`
	// 状态
	Status []*Status `protobuf:"bytes,2,rep,name=status,proto3" json:"status,omitempty"`
	// 类型
	TaskType FlowTaskType `protobuf:"varint,3,opt,name=taskType,proto3,enum=mbpb.FlowTaskType" json:"taskType,omitempty"`
	// 引用id
	ReferenceID *int32 `protobuf:"varint,4,opt,name=referenceID,proto3,oneof" json:"referenceID,omitempty"`
	// 错误信息
	Error         *Error `protobuf:"bytes,5,opt,name=error,proto3,oneof" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlowReply) Reset() {
	*x = FlowReply{}
	mi := &file_entrypoint_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlowReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowReply) ProtoMessage() {}

func (x *FlowReply) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowReply.ProtoReflect.Descriptor instead.
func (*FlowReply) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{14}
}

func (x *FlowReply) GetGraph() *Graph {
	if x != nil {
		return x.Graph
	}
	return nil
}

func (x *FlowReply) GetStatus() []*Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *FlowReply) GetTaskType() FlowTaskType {
	if x != nil {
		return x.TaskType
	}
	return FlowTaskType_InvalidTask
}

func (x *FlowReply) GetReferenceID() int32 {
	if x != nil && x.ReferenceID != nil {
		return *x.ReferenceID
	}
	return 0
}

func (x *FlowReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type FlowRemoveReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RecoverFlow   []int64                `protobuf:"varint,1,rep,packed,name=recoverFlow,proto3" json:"recoverFlow,omitempty"` // 恢复工作流列表
	RecoverNode   []int64                `protobuf:"varint,2,rep,packed,name=recoverNode,proto3" json:"recoverNode,omitempty"` // 恢复流节点列流
	Error         *Error                 `protobuf:"bytes,3,opt,name=error,proto3,oneof" json:"error,omitempty"`               // 错误信息 可选
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlowRemoveReply) Reset() {
	*x = FlowRemoveReply{}
	mi := &file_entrypoint_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlowRemoveReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowRemoveReply) ProtoMessage() {}

func (x *FlowRemoveReply) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowRemoveReply.ProtoReflect.Descriptor instead.
func (*FlowRemoveReply) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{15}
}

func (x *FlowRemoveReply) GetRecoverFlow() []int64 {
	if x != nil {
		return x.RecoverFlow
	}
	return nil
}

func (x *FlowRemoveReply) GetRecoverNode() []int64 {
	if x != nil {
		return x.RecoverNode
	}
	return nil
}

func (x *FlowRemoveReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type WorkflowReply struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Reply:
	//
	//	*WorkflowReply_EnableReply
	//	*WorkflowReply_FlowReply
	Reply         isWorkflowReply_Reply `protobuf_oneof:"reply"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkflowReply) Reset() {
	*x = WorkflowReply{}
	mi := &file_entrypoint_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowReply) ProtoMessage() {}

func (x *WorkflowReply) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowReply.ProtoReflect.Descriptor instead.
func (*WorkflowReply) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{16}
}

func (x *WorkflowReply) GetReply() isWorkflowReply_Reply {
	if x != nil {
		return x.Reply
	}
	return nil
}

func (x *WorkflowReply) GetEnableReply() *EnableReply {
	if x != nil {
		if x, ok := x.Reply.(*WorkflowReply_EnableReply); ok {
			return x.EnableReply
		}
	}
	return nil
}

func (x *WorkflowReply) GetFlowReply() *Reply {
	if x != nil {
		if x, ok := x.Reply.(*WorkflowReply_FlowReply); ok {
			return x.FlowReply
		}
	}
	return nil
}

type isWorkflowReply_Reply interface {
	isWorkflowReply_Reply()
}

type WorkflowReply_EnableReply struct {
	EnableReply *EnableReply `protobuf:"bytes,1,opt,name=enableReply,proto3,oneof"`
}

type WorkflowReply_FlowReply struct {
	FlowReply *Reply `protobuf:"bytes,2,opt,name=flowReply,proto3,oneof"`
}

func (*WorkflowReply_EnableReply) isWorkflowReply_Reply() {}

func (*WorkflowReply_FlowReply) isWorkflowReply_Reply() {}

type WorkflowRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Request:
	//
	//	*WorkflowRequest_BaseworkRequest
	//	*WorkflowRequest_FlowRequest
	Request       isWorkflowRequest_Request `protobuf_oneof:"request"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkflowRequest) Reset() {
	*x = WorkflowRequest{}
	mi := &file_entrypoint_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowRequest) ProtoMessage() {}

func (x *WorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowRequest.ProtoReflect.Descriptor instead.
func (*WorkflowRequest) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{17}
}

func (x *WorkflowRequest) GetRequest() isWorkflowRequest_Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *WorkflowRequest) GetBaseworkRequest() *EnableRequest {
	if x != nil {
		if x, ok := x.Request.(*WorkflowRequest_BaseworkRequest); ok {
			return x.BaseworkRequest
		}
	}
	return nil
}

func (x *WorkflowRequest) GetFlowRequest() *Request {
	if x != nil {
		if x, ok := x.Request.(*WorkflowRequest_FlowRequest); ok {
			return x.FlowRequest
		}
	}
	return nil
}

type isWorkflowRequest_Request interface {
	isWorkflowRequest_Request()
}

type WorkflowRequest_BaseworkRequest struct {
	BaseworkRequest *EnableRequest `protobuf:"bytes,1,opt,name=baseworkRequest,proto3,oneof"`
}

type WorkflowRequest_FlowRequest struct {
	FlowRequest *Request `protobuf:"bytes,2,opt,name=flowRequest,proto3,oneof"`
}

func (*WorkflowRequest_BaseworkRequest) isWorkflowRequest_Request() {}

func (*WorkflowRequest_FlowRequest) isWorkflowRequest_Request() {}

// 任务流请求
type FlowEnableRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	State         bool                   `protobuf:"varint,1,opt,name=state,proto3" json:"state,omitempty"`                                      // 启用状态
	FlowID        int64                  `protobuf:"varint,2,opt,name=flowID,proto3" json:"flowID,omitempty"`                                    // 任务流ID
	Crontab       *Crontab               `protobuf:"bytes,3,opt,name=crontab,proto3" json:"crontab,omitempty"`                                   //运行周期表达式,不能为空
	AcceptAction  AcceptAction           `protobuf:"varint,4,opt,name=acceptAction,proto3,enum=mbpb.AcceptAction" json:"acceptAction,omitempty"` // 接受动作
	UserId        int64                  `protobuf:"varint,5,opt,name=userId,proto3" json:"userId,omitempty"`                                    // 创建人
	EnterpriseID  string                 `protobuf:"bytes,6,opt,name=enterpriseID,proto3" json:"enterpriseID,omitempty"`                         // 企业ID
	EmitCardId    *int64                 `protobuf:"varint,7,opt,name=emitCardId,proto3,oneof" json:"emitCardId,omitempty"`                      // 发起cardID
	Over          *Over                  `protobuf:"bytes,8,opt,name=over,proto3,oneof" json:"over,omitempty"`                                   // BI不传
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlowEnableRequest) Reset() {
	*x = FlowEnableRequest{}
	mi := &file_entrypoint_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlowEnableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowEnableRequest) ProtoMessage() {}

func (x *FlowEnableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowEnableRequest.ProtoReflect.Descriptor instead.
func (*FlowEnableRequest) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{18}
}

func (x *FlowEnableRequest) GetState() bool {
	if x != nil {
		return x.State
	}
	return false
}

func (x *FlowEnableRequest) GetFlowID() int64 {
	if x != nil {
		return x.FlowID
	}
	return 0
}

func (x *FlowEnableRequest) GetCrontab() *Crontab {
	if x != nil {
		return x.Crontab
	}
	return nil
}

func (x *FlowEnableRequest) GetAcceptAction() AcceptAction {
	if x != nil {
		return x.AcceptAction
	}
	return AcceptAction_Nothing
}

func (x *FlowEnableRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *FlowEnableRequest) GetEnterpriseID() string {
	if x != nil {
		return x.EnterpriseID
	}
	return ""
}

func (x *FlowEnableRequest) GetEmitCardId() int64 {
	if x != nil && x.EmitCardId != nil {
		return *x.EmitCardId
	}
	return 0
}

func (x *FlowEnableRequest) GetOver() *Over {
	if x != nil {
		return x.Over
	}
	return nil
}

// 启用请求
type EnableRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SourceDb      *DBDetail              `protobuf:"bytes,1,opt,name=source_db,json=sourceDb,proto3" json:"source_db,omitempty"`               // 源数据库
	TargetDb      *DBDetail              `protobuf:"bytes,2,opt,name=target_db,json=targetDb,proto3" json:"target_db,omitempty"`               // 目标数据库
	EnterpriseId  string                 `protobuf:"bytes,3,opt,name=enterprise_id,json=enterpriseId,proto3" json:"enterprise_id,omitempty"`   // 企业ID
	CardId        int64                  `protobuf:"varint,4,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`                    // Card ID
	UserId        int64                  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                    // 创建人
	Crontab       *Crontab               `protobuf:"bytes,6,opt,name=crontab,proto3,oneof" json:"crontab,omitempty"`                           // 运行周期表达式
	SqlScript     string                 `protobuf:"bytes,7,opt,name=sql_script,json=sqlScript,proto3" json:"sql_script,omitempty"`            // SQL代码
	Tables        []*Table               `protobuf:"bytes,8,rep,name=tables,proto3" json:"tables,omitempty"`                                   // SQL引用的实体表
	Extra         *Extra                 `protobuf:"bytes,9,opt,name=extra,proto3,oneof" json:"extra,omitempty"`                               // 附加信息
	Over          *Over                  `protobuf:"bytes,10,opt,name=over,proto3,oneof" json:"over,omitempty"`                                // BI不传
	SkipWorkflow  bool                   `protobuf:"varint,11,opt,name=skip_workflow,json=skipWorkflow,proto3" json:"skip_workflow,omitempty"` // 跳过工作流
	AllTables     []*Table               `protobuf:"bytes,12,rep,name=all_tables,json=allTables,proto3" json:"all_tables,omitempty"`           // 所有实体表 BI不传
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnableRequest) Reset() {
	*x = EnableRequest{}
	mi := &file_entrypoint_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableRequest) ProtoMessage() {}

func (x *EnableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableRequest.ProtoReflect.Descriptor instead.
func (*EnableRequest) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{19}
}

func (x *EnableRequest) GetSourceDb() *DBDetail {
	if x != nil {
		return x.SourceDb
	}
	return nil
}

func (x *EnableRequest) GetTargetDb() *DBDetail {
	if x != nil {
		return x.TargetDb
	}
	return nil
}

func (x *EnableRequest) GetEnterpriseId() string {
	if x != nil {
		return x.EnterpriseId
	}
	return ""
}

func (x *EnableRequest) GetCardId() int64 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *EnableRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *EnableRequest) GetCrontab() *Crontab {
	if x != nil {
		return x.Crontab
	}
	return nil
}

func (x *EnableRequest) GetSqlScript() string {
	if x != nil {
		return x.SqlScript
	}
	return ""
}

func (x *EnableRequest) GetTables() []*Table {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *EnableRequest) GetExtra() *Extra {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *EnableRequest) GetOver() *Over {
	if x != nil {
		return x.Over
	}
	return nil
}

func (x *EnableRequest) GetSkipWorkflow() bool {
	if x != nil {
		return x.SkipWorkflow
	}
	return false
}

func (x *EnableRequest) GetAllTables() []*Table {
	if x != nil {
		return x.AllTables
	}
	return nil
}

type Identifier struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EnterpriseId  string                 `protobuf:"bytes,1,opt,name=enterprise_id,json=enterpriseId,proto3" json:"enterprise_id,omitempty"` // 企业ID
	CardId        int64                  `protobuf:"varint,2,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`                  // Card ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Identifier) Reset() {
	*x = Identifier{}
	mi := &file_entrypoint_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Identifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identifier) ProtoMessage() {}

func (x *Identifier) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identifier.ProtoReflect.Descriptor instead.
func (*Identifier) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{20}
}

func (x *Identifier) GetEnterpriseId() string {
	if x != nil {
		return x.EnterpriseId
	}
	return ""
}

func (x *Identifier) GetCardId() int64 {
	if x != nil {
		return x.CardId
	}
	return 0
}

// 启用回复
type EnableReply struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 结果表
	OutTable *Table `protobuf:"bytes,1,opt,name=outTable,proto3" json:"outTable,omitempty"`
	// 字段类
	Columns []*Column `protobuf:"bytes,2,rep,name=columns,proto3" json:"columns,omitempty"`
	// 下次运行时间
	NextRunTime *string `protobuf:"bytes,3,opt,name=nextRunTime,proto3,oneof" json:"nextRunTime,omitempty"`
	// 错误信息 可选
	Error *Error `protobuf:"bytes,4,opt,name=error,proto3,oneof" json:"error,omitempty"`
	// 工作流元数据
	FlowData      *FlowMetadata `protobuf:"bytes,5,opt,name=flowData,proto3" json:"flowData,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnableReply) Reset() {
	*x = EnableReply{}
	mi := &file_entrypoint_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnableReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableReply) ProtoMessage() {}

func (x *EnableReply) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableReply.ProtoReflect.Descriptor instead.
func (*EnableReply) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{21}
}

func (x *EnableReply) GetOutTable() *Table {
	if x != nil {
		return x.OutTable
	}
	return nil
}

func (x *EnableReply) GetColumns() []*Column {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *EnableReply) GetNextRunTime() string {
	if x != nil && x.NextRunTime != nil {
		return *x.NextRunTime
	}
	return ""
}

func (x *EnableReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *EnableReply) GetFlowData() *FlowMetadata {
	if x != nil {
		return x.FlowData
	}
	return nil
}

// 工作流启用响应
type FlowEnableReply struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 下次运行时间
	NextRunTime *string `protobuf:"bytes,1,opt,name=nextRunTime,proto3,oneof" json:"nextRunTime,omitempty"`
	// 错误信息 可选
	Error         *Error `protobuf:"bytes,2,opt,name=error,proto3,oneof" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlowEnableReply) Reset() {
	*x = FlowEnableReply{}
	mi := &file_entrypoint_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlowEnableReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowEnableReply) ProtoMessage() {}

func (x *FlowEnableReply) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowEnableReply.ProtoReflect.Descriptor instead.
func (*FlowEnableReply) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{22}
}

func (x *FlowEnableReply) GetNextRunTime() string {
	if x != nil && x.NextRunTime != nil {
		return *x.NextRunTime
	}
	return ""
}

func (x *FlowEnableReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// 工作流元数据
type FlowMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 任务类型
	TaskType TaskType `protobuf:"varint,1,opt,name=taskType,proto3,enum=mbpb.TaskType" json:"taskType,omitempty"`
	// 流程图 key代表现有工作流ID
	// 2do可能存在多个任务流,map 工作流ID
	BeforeFlow map[int64]*Graph `protobuf:"bytes,2,rep,name=beforeFlow,proto3" json:"beforeFlow,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// 合并后、或加入后的工作流
	AfterFlow *Graph `protobuf:"bytes,3,opt,name=afterFlow,proto3" json:"afterFlow,omitempty"`
	// 确认动作,点击是或否后的动作
	AcceptAction AcceptAction `protobuf:"varint,4,opt,name=acceptAction,proto3,enum=mbpb.AcceptAction" json:"acceptAction,omitempty"`
	// 工作流ID映射
	FlowMap map[string]*FlowMap `protobuf:"bytes,5,rep,name=flowMap,proto3" json:"flowMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// 任务流ID
	FlowID        int64 `protobuf:"varint,6,opt,name=flowID,proto3" json:"flowID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlowMetadata) Reset() {
	*x = FlowMetadata{}
	mi := &file_entrypoint_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlowMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowMetadata) ProtoMessage() {}

func (x *FlowMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowMetadata.ProtoReflect.Descriptor instead.
func (*FlowMetadata) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{23}
}

func (x *FlowMetadata) GetTaskType() TaskType {
	if x != nil {
		return x.TaskType
	}
	return TaskType_BasicTask
}

func (x *FlowMetadata) GetBeforeFlow() map[int64]*Graph {
	if x != nil {
		return x.BeforeFlow
	}
	return nil
}

func (x *FlowMetadata) GetAfterFlow() *Graph {
	if x != nil {
		return x.AfterFlow
	}
	return nil
}

func (x *FlowMetadata) GetAcceptAction() AcceptAction {
	if x != nil {
		return x.AcceptAction
	}
	return AcceptAction_Nothing
}

func (x *FlowMetadata) GetFlowMap() map[string]*FlowMap {
	if x != nil {
		return x.FlowMap
	}
	return nil
}

func (x *FlowMetadata) GetFlowID() int64 {
	if x != nil {
		return x.FlowID
	}
	return 0
}

type FlowMap struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	FlowID        int64                  `protobuf:"varint,2,opt,name=flowID,proto3" json:"flowID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlowMap) Reset() {
	*x = FlowMap{}
	mi := &file_entrypoint_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlowMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowMap) ProtoMessage() {}

func (x *FlowMap) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowMap.ProtoReflect.Descriptor instead.
func (*FlowMap) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{24}
}

func (x *FlowMap) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *FlowMap) GetFlowID() int64 {
	if x != nil {
		return x.FlowID
	}
	return 0
}

// 行动请求
type Request struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	EnterpriseID string                 `protobuf:"bytes,1,opt,name=enterpriseID,proto3" json:"enterpriseID,omitempty"` // 企业ID
	// int64 CardId = 2 [(validate.rules).int64.gte = 1]; // Card ID
	CardId        int64 `protobuf:"varint,2,opt,name=cardId,proto3" json:"cardId,omitempty"`
	Over          *Over `protobuf:"bytes,3,opt,name=over,proto3,oneof" json:"over,omitempty"` // BI不传
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Request) Reset() {
	*x = Request{}
	mi := &file_entrypoint_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{25}
}

func (x *Request) GetEnterpriseID() string {
	if x != nil {
		return x.EnterpriseID
	}
	return ""
}

func (x *Request) GetCardId() int64 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *Request) GetOver() *Over {
	if x != nil {
		return x.Over
	}
	return nil
}

type Over struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Uid            *string                `protobuf:"bytes,1,opt,name=uid,proto3,oneof" json:"uid,omitempty"`                               // uid
	SequenceID     *string                `protobuf:"bytes,2,opt,name=sequenceID,proto3,oneof" json:"sequenceID,omitempty"`                 // SequenceID
	RunType        *RunType               `protobuf:"varint,3,opt,name=runType,proto3,enum=mbpb.RunType,oneof" json:"runType,omitempty"`    // 运行类型
	StartRunTime   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=startRunTime,proto3,oneof" json:"startRunTime,omitempty"`             // 开始运行时间
	NextRunTime    *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=nextRunTime,proto3,oneof" json:"nextRunTime,omitempty"`               // 下次运行时间
	TaskType       *TaskType              `protobuf:"varint,6,opt,name=taskType,proto3,enum=mbpb.TaskType,oneof" json:"taskType,omitempty"` // 任务类型
	FlowSequenceID *string                `protobuf:"bytes,7,opt,name=flowSequenceID,proto3,oneof" json:"flowSequenceID,omitempty"`         // 工作流唯一标识
	Children       []*Source              `protobuf:"bytes,8,rep,name=children,proto3" json:"children,omitempty"`                           // 工作流节点
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Over) Reset() {
	*x = Over{}
	mi := &file_entrypoint_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Over) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Over) ProtoMessage() {}

func (x *Over) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Over.ProtoReflect.Descriptor instead.
func (*Over) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{26}
}

func (x *Over) GetUid() string {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return ""
}

func (x *Over) GetSequenceID() string {
	if x != nil && x.SequenceID != nil {
		return *x.SequenceID
	}
	return ""
}

func (x *Over) GetRunType() RunType {
	if x != nil && x.RunType != nil {
		return *x.RunType
	}
	return RunType_Cycle
}

func (x *Over) GetStartRunTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartRunTime
	}
	return nil
}

func (x *Over) GetNextRunTime() *timestamppb.Timestamp {
	if x != nil {
		return x.NextRunTime
	}
	return nil
}

func (x *Over) GetTaskType() TaskType {
	if x != nil && x.TaskType != nil {
		return *x.TaskType
	}
	return TaskType_BasicTask
}

func (x *Over) GetFlowSequenceID() string {
	if x != nil && x.FlowSequenceID != nil {
		return *x.FlowSequenceID
	}
	return ""
}

func (x *Over) GetChildren() []*Source {
	if x != nil {
		return x.Children
	}
	return nil
}

// 运行响应
type Reply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           *string                `protobuf:"bytes,1,opt,name=key,proto3,oneof" json:"key,omitempty"`                 // Key
	SequenceID    *string                `protobuf:"bytes,2,opt,name=sequenceID,proto3,oneof" json:"sequenceID,omitempty"`   // 序列ID
	Columns       []*Column              `protobuf:"bytes,3,rep,name=columns,proto3" json:"columns,omitempty"`               // 字段类
	NextRunTime   *string                `protobuf:"bytes,4,opt,name=nextRunTime,proto3,oneof" json:"nextRunTime,omitempty"` // 下次运行时间 可选 手动运行需要
	Error         *Error                 `protobuf:"bytes,5,opt,name=error,proto3,oneof" json:"error,omitempty"`             // 错误信息 可选
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Reply) Reset() {
	*x = Reply{}
	mi := &file_entrypoint_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Reply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reply) ProtoMessage() {}

func (x *Reply) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reply.ProtoReflect.Descriptor instead.
func (*Reply) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{27}
}

func (x *Reply) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *Reply) GetSequenceID() string {
	if x != nil && x.SequenceID != nil {
		return *x.SequenceID
	}
	return ""
}

func (x *Reply) GetColumns() []*Column {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *Reply) GetNextRunTime() string {
	if x != nil && x.NextRunTime != nil {
		return *x.NextRunTime
	}
	return ""
}

func (x *Reply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// 工作流运行响应
type RunReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                  // 工作流ID
	SequenceID    string                 `protobuf:"bytes,2,opt,name=sequenceID,proto3" json:"sequenceID,omitempty"`   // 序列ID
	NextRunTime   string                 `protobuf:"bytes,3,opt,name=nextRunTime,proto3" json:"nextRunTime,omitempty"` // 下次运行时间
	Error         *Error                 `protobuf:"bytes,4,opt,name=error,proto3,oneof" json:"error,omitempty"`       // 错误信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunReply) Reset() {
	*x = RunReply{}
	mi := &file_entrypoint_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunReply) ProtoMessage() {}

func (x *RunReply) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunReply.ProtoReflect.Descriptor instead.
func (*RunReply) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{28}
}

func (x *RunReply) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RunReply) GetSequenceID() string {
	if x != nil {
		return x.SequenceID
	}
	return ""
}

func (x *RunReply) GetNextRunTime() string {
	if x != nil {
		return x.NextRunTime
	}
	return ""
}

func (x *RunReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type Graph struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`             // id
	Children      []*Source              `protobuf:"bytes,2,rep,name=children,proto3" json:"children,omitempty"` // 节点
	Edges         []*Edge                `protobuf:"bytes,3,rep,name=edges,proto3" json:"edges,omitempty"`       // 边缘
	Error         *Error                 `protobuf:"bytes,4,opt,name=error,proto3,oneof" json:"error,omitempty"` // 错误信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Graph) Reset() {
	*x = Graph{}
	mi := &file_entrypoint_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Graph) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Graph) ProtoMessage() {}

func (x *Graph) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Graph.ProtoReflect.Descriptor instead.
func (*Graph) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{29}
}

func (x *Graph) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Graph) GetChildren() []*Source {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *Graph) GetEdges() []*Edge {
	if x != nil {
		return x.Edges
	}
	return nil
}

func (x *Graph) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type Status struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                    // cardID
	LastRuntime   string                 `protobuf:"bytes,2,opt,name=lastRuntime,proto3" json:"lastRuntime,omitempty"`                  // 上次运行时间
	RunStatus     RunStatus              `protobuf:"varint,3,opt,name=runStatus,proto3,enum=mbpb.RunStatus" json:"runStatus,omitempty"` // 运行状态
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Status) Reset() {
	*x = Status{}
	mi := &file_entrypoint_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{30}
}

func (x *Status) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Status) GetLastRuntime() string {
	if x != nil {
		return x.LastRuntime
	}
	return ""
}

func (x *Status) GetRunStatus() RunStatus {
	if x != nil {
		return x.RunStatus
	}
	return RunStatus_Unknown
}

// 边缘
type Edge struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`         // 唯一键
	Source        string                 `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"` // 上游
	Target        string                 `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"` // 下游
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Edge) Reset() {
	*x = Edge{}
	mi := &file_entrypoint_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Edge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Edge) ProtoMessage() {}

func (x *Edge) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Edge.ProtoReflect.Descriptor instead.
func (*Edge) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{31}
}

func (x *Edge) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Edge) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Edge) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

// 来源
type Source struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                                               // baseId+type hash BI不传
	BaseId        string                 `protobuf:"bytes,2,opt,name=baseId,proto3" json:"baseId,omitempty"`                                                                       // 原始唯一键
	Type          SourceType             `protobuf:"varint,3,opt,name=type,proto3,enum=mbpb.SourceType" json:"type,omitempty"`                                                     // 类型
	Prev          map[string]*Property   `protobuf:"bytes,4,rep,name=prev,proto3" json:"prev,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 上级 BI不传
	RunStatus     *RunStatus             `protobuf:"varint,5,opt,name=runStatus,proto3,enum=mbpb.RunStatus,oneof" json:"runStatus,omitempty"`                                      // 运行状态 BI不传
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Source) Reset() {
	*x = Source{}
	mi := &file_entrypoint_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Source) ProtoMessage() {}

func (x *Source) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Source.ProtoReflect.Descriptor instead.
func (*Source) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{32}
}

func (x *Source) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Source) GetBaseId() string {
	if x != nil {
		return x.BaseId
	}
	return ""
}

func (x *Source) GetType() SourceType {
	if x != nil {
		return x.Type
	}
	return SourceType_RemoteDB
}

func (x *Source) GetPrev() map[string]*Property {
	if x != nil {
		return x.Prev
	}
	return nil
}

func (x *Source) GetRunStatus() RunStatus {
	if x != nil && x.RunStatus != nil {
		return *x.RunStatus
	}
	return RunStatus_Unknown
}

type Property struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                           // 原始唯一键
	Type          SourceType             `protobuf:"varint,2,opt,name=type,proto3,enum=mbpb.SourceType" json:"type,omitempty"` // 类型
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Property) Reset() {
	*x = Property{}
	mi := &file_entrypoint_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Property) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Property) ProtoMessage() {}

func (x *Property) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Property.ProtoReflect.Descriptor instead.
func (*Property) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{33}
}

func (x *Property) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Property) GetType() SourceType {
	if x != nil {
		return x.Type
	}
	return SourceType_RemoteDB
}

// 实体表
type Table struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Schema        string                 `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`       // schema
	Table         string                 `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`         // table
	Source        *Source                `protobuf:"bytes,3,opt,name=source,proto3,oneof" json:"source,omitempty"` // 来源
	Target        *Source                `protobuf:"bytes,4,opt,name=target,proto3,oneof" json:"target,omitempty"` // 目标 BI不传
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Table) Reset() {
	*x = Table{}
	mi := &file_entrypoint_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Table) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Table) ProtoMessage() {}

func (x *Table) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Table.ProtoReflect.Descriptor instead.
func (*Table) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{34}
}

func (x *Table) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *Table) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *Table) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Table) GetTarget() *Source {
	if x != nil {
		return x.Target
	}
	return nil
}

type Depend struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Source        *Source                `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`  // 来源
	Target        *Source                `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`  // 目标
	Linked        bool                   `protobuf:"varint,3,opt,name=linked,proto3" json:"linked,omitempty"` // 链接
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Depend) Reset() {
	*x = Depend{}
	mi := &file_entrypoint_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Depend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Depend) ProtoMessage() {}

func (x *Depend) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Depend.ProtoReflect.Descriptor instead.
func (*Depend) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{35}
}

func (x *Depend) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Depend) GetTarget() *Source {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *Depend) GetLinked() bool {
	if x != nil {
		return x.Linked
	}
	return false
}

// 字段类
type Column struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type          string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	PrimaryKey    bool                   `protobuf:"varint,4,opt,name=primary_key,json=primaryKey,proto3" json:"primary_key,omitempty"`
	NotNull       bool                   `protobuf:"varint,5,opt,name=not_null,json=notNull,proto3" json:"not_null,omitempty"`
	Unique        bool                   `protobuf:"varint,6,opt,name=unique,proto3" json:"unique,omitempty"`
	TypeModifier  int32                  `protobuf:"varint,7,opt,name=type_modifier,json=typeModifier,proto3" json:"type_modifier,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Column) Reset() {
	*x = Column{}
	mi := &file_entrypoint_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Column) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Column) ProtoMessage() {}

func (x *Column) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Column.ProtoReflect.Descriptor instead.
func (*Column) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{36}
}

func (x *Column) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Column) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Column) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Column) GetPrimaryKey() bool {
	if x != nil {
		return x.PrimaryKey
	}
	return false
}

func (x *Column) GetNotNull() bool {
	if x != nil {
		return x.NotNull
	}
	return false
}

func (x *Column) GetUnique() bool {
	if x != nil {
		return x.Unique
	}
	return false
}

func (x *Column) GetTypeModifier() int32 {
	if x != nil {
		return x.TypeModifier
	}
	return 0
}

type DatabaseRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                     // 新建时不传
	DisplayName   string                 `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"` // 显示名
	Details       *DBDetail              `protobuf:"bytes,3,opt,name=details,proto3" json:"details,omitempty"`                            // 详情
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatabaseRequest) Reset() {
	*x = DatabaseRequest{}
	mi := &file_entrypoint_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseRequest) ProtoMessage() {}

func (x *DatabaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseRequest.ProtoReflect.Descriptor instead.
func (*DatabaseRequest) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{37}
}

func (x *DatabaseRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DatabaseRequest) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *DatabaseRequest) GetDetails() *DBDetail {
	if x != nil {
		return x.Details
	}
	return nil
}

type DatabaseReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Databases     []*DatabaseRequest     `protobuf:"bytes,1,rep,name=databases,proto3" json:"databases,omitempty"`                         // 数据库列表
	Database      *DatabaseRequest       `protobuf:"bytes,2,opt,name=database,proto3,oneof" json:"database,omitempty"`                     // 数据库
	TotalRows     *int64                 `protobuf:"varint,3,opt,name=total_rows,json=totalRows,proto3,oneof" json:"total_rows,omitempty"` // 总行数
	TotalPage     *int64                 `protobuf:"varint,4,opt,name=total_page,json=totalPage,proto3,oneof" json:"total_page,omitempty"` // 总页数
	Request       *PrimaryKey            `protobuf:"bytes,5,opt,name=request,proto3,oneof" json:"request,omitempty"`                       // 请求参数
	Error         *Error                 `protobuf:"bytes,6,opt,name=error,proto3,oneof" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatabaseReply) Reset() {
	*x = DatabaseReply{}
	mi := &file_entrypoint_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseReply) ProtoMessage() {}

func (x *DatabaseReply) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseReply.ProtoReflect.Descriptor instead.
func (*DatabaseReply) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{38}
}

func (x *DatabaseReply) GetDatabases() []*DatabaseRequest {
	if x != nil {
		return x.Databases
	}
	return nil
}

func (x *DatabaseReply) GetDatabase() *DatabaseRequest {
	if x != nil {
		return x.Database
	}
	return nil
}

func (x *DatabaseReply) GetTotalRows() int64 {
	if x != nil && x.TotalRows != nil {
		return *x.TotalRows
	}
	return 0
}

func (x *DatabaseReply) GetTotalPage() int64 {
	if x != nil && x.TotalPage != nil {
		return *x.TotalPage
	}
	return 0
}

func (x *DatabaseReply) GetRequest() *PrimaryKey {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *DatabaseReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// 数据库信息
type DBDetail struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	DbType DBType                 `protobuf:"varint,1,opt,name=db_type,json=dbType,proto3,enum=mbpb.DBType" json:"db_type,omitempty"` // engine 引擎
	// Types that are valid to be assigned to Payload:
	//
	//	*DBDetail_Postgres
	//	*DBDetail_Doris
	//	*DBDetail_Mysql
	Payload       isDBDetail_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DBDetail) Reset() {
	*x = DBDetail{}
	mi := &file_entrypoint_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DBDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBDetail) ProtoMessage() {}

func (x *DBDetail) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBDetail.ProtoReflect.Descriptor instead.
func (*DBDetail) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{39}
}

func (x *DBDetail) GetDbType() DBType {
	if x != nil {
		return x.DbType
	}
	return DBType_UNSPECIFIED
}

func (x *DBDetail) GetPayload() isDBDetail_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *DBDetail) GetPostgres() *GenericDB {
	if x != nil {
		if x, ok := x.Payload.(*DBDetail_Postgres); ok {
			return x.Postgres
		}
	}
	return nil
}

func (x *DBDetail) GetDoris() *Doris {
	if x != nil {
		if x, ok := x.Payload.(*DBDetail_Doris); ok {
			return x.Doris
		}
	}
	return nil
}

func (x *DBDetail) GetMysql() *GenericDB {
	if x != nil {
		if x, ok := x.Payload.(*DBDetail_Mysql); ok {
			return x.Mysql
		}
	}
	return nil
}

type isDBDetail_Payload interface {
	isDBDetail_Payload()
}

type DBDetail_Postgres struct {
	Postgres *GenericDB `protobuf:"bytes,101,opt,name=postgres,proto3,oneof"`
}

type DBDetail_Doris struct {
	Doris *Doris `protobuf:"bytes,102,opt,name=doris,proto3,oneof"`
}

type DBDetail_Mysql struct {
	Mysql *GenericDB `protobuf:"bytes,103,opt,name=mysql,proto3,oneof"`
}

func (*DBDetail_Postgres) isDBDetail_Payload() {}

func (*DBDetail_Doris) isDBDetail_Payload() {}

func (*DBDetail_Mysql) isDBDetail_Payload() {}

type Doris struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Host          string                 `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`                                                                                                                  // 数据主机地址
	HttpPort      int32                  `protobuf:"varint,2,opt,name=http_port,json=httpPort,proto3" json:"http_port,omitempty"`                                                                                         // http协议端口 例如: 8030
	QueryPort     int32                  `protobuf:"varint,3,opt,name=query_port,json=queryPort,proto3" json:"query_port,omitempty"`                                                                                      // sql协议端口 例如: 9030
	FlightPort    int32                  `protobuf:"varint,4,opt,name=flight_port,json=flightPort,proto3" json:"flight_port,omitempty"`                                                                                   // Flight SQL端口 例如: 9090
	User          string                 `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty"`                                                                                                                  // 数据库用户名
	Pwd           string                 `protobuf:"bytes,6,opt,name=pwd,proto3" json:"pwd,omitempty"`                                                                                                                    // 数据库密码
	DbName        string                 `protobuf:"bytes,7,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty"`                                                                                                // 数据库名称
	ConnectParams map[string]string      `protobuf:"bytes,8,rep,name=connect_params,json=connectParams,proto3" json:"connect_params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 连接参数
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Doris) Reset() {
	*x = Doris{}
	mi := &file_entrypoint_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Doris) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Doris) ProtoMessage() {}

func (x *Doris) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Doris.ProtoReflect.Descriptor instead.
func (*Doris) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{40}
}

func (x *Doris) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Doris) GetHttpPort() int32 {
	if x != nil {
		return x.HttpPort
	}
	return 0
}

func (x *Doris) GetQueryPort() int32 {
	if x != nil {
		return x.QueryPort
	}
	return 0
}

func (x *Doris) GetFlightPort() int32 {
	if x != nil {
		return x.FlightPort
	}
	return 0
}

func (x *Doris) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *Doris) GetPwd() string {
	if x != nil {
		return x.Pwd
	}
	return ""
}

func (x *Doris) GetDbName() string {
	if x != nil {
		return x.DbName
	}
	return ""
}

func (x *Doris) GetConnectParams() map[string]string {
	if x != nil {
		return x.ConnectParams
	}
	return nil
}

type GenericDB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Host          string                 `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`                                                                                                                  // 数据主机地址
	Port          int32                  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`                                                                                                                 // 数据库端口
	User          string                 `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`                                                                                                                  // 数据库用户名
	Pwd           string                 `protobuf:"bytes,4,opt,name=pwd,proto3" json:"pwd,omitempty"`                                                                                                                    // 数据库密码
	DbName        string                 `protobuf:"bytes,5,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty"`                                                                                                // 数据库名称
	ConnectParams map[string]string      `protobuf:"bytes,6,rep,name=connect_params,json=connectParams,proto3" json:"connect_params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 连接参数
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenericDB) Reset() {
	*x = GenericDB{}
	mi := &file_entrypoint_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenericDB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericDB) ProtoMessage() {}

func (x *GenericDB) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericDB.ProtoReflect.Descriptor instead.
func (*GenericDB) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{41}
}

func (x *GenericDB) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *GenericDB) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *GenericDB) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *GenericDB) GetPwd() string {
	if x != nil {
		return x.Pwd
	}
	return ""
}

func (x *GenericDB) GetDbName() string {
	if x != nil {
		return x.DbName
	}
	return ""
}

func (x *GenericDB) GetConnectParams() map[string]string {
	if x != nil {
		return x.ConnectParams
	}
	return nil
}

// 执行一次
type CycleOnce struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 表达式 Expression应置空
	//
	// Deprecated: Marked as deprecated in entrypoint.proto.
	Expression    *Expression `protobuf:"bytes,1,opt,name=expression,proto3" json:"expression,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CycleOnce) Reset() {
	*x = CycleOnce{}
	mi := &file_entrypoint_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CycleOnce) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CycleOnce) ProtoMessage() {}

func (x *CycleOnce) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CycleOnce.ProtoReflect.Descriptor instead.
func (*CycleOnce) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{42}
}

// Deprecated: Marked as deprecated in entrypoint.proto.
func (x *CycleOnce) GetExpression() *Expression {
	if x != nil {
		return x.Expression
	}
	return nil
}

// 间隔时间执行
type CycleEvery struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 间隔周期
	EveryExpress *EveryExpress `protobuf:"bytes,1,opt,name=everyExpress,proto3" json:"everyExpress,omitempty"`
	// 表达式 Expression己弃用,应使用EveryExpress
	//
	// Deprecated: Marked as deprecated in entrypoint.proto.
	Expression    *Expression `protobuf:"bytes,2,opt,name=expression,proto3,oneof" json:"expression,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CycleEvery) Reset() {
	*x = CycleEvery{}
	mi := &file_entrypoint_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CycleEvery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CycleEvery) ProtoMessage() {}

func (x *CycleEvery) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CycleEvery.ProtoReflect.Descriptor instead.
func (*CycleEvery) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{43}
}

func (x *CycleEvery) GetEveryExpress() *EveryExpress {
	if x != nil {
		return x.EveryExpress
	}
	return nil
}

// Deprecated: Marked as deprecated in entrypoint.proto.
func (x *CycleEvery) GetExpression() *Expression {
	if x != nil {
		return x.Expression
	}
	return nil
}

// 时间循环周期执行
type CycleEveryTime struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	EveryType EveryTimeType          `protobuf:"varint,1,opt,name=everyType,proto3,enum=mbpb.EveryTimeType" json:"everyType,omitempty"` // 类型
	RunTime   *CycleHour             `protobuf:"bytes,2,opt,name=runTime,proto3" json:"runTime,omitempty"`                              // 运行时间
	// Types that are valid to be assigned to EveryTime:
	//
	//	*CycleEveryTime_EveryDay
	//	*CycleEveryTime_EveryWeek
	//	*CycleEveryTime_EveryMonth
	//	*CycleEveryTime_EveryQuarter
	//	*CycleEveryTime_EveryYear
	EveryTime     isCycleEveryTime_EveryTime `protobuf_oneof:"everyTime"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CycleEveryTime) Reset() {
	*x = CycleEveryTime{}
	mi := &file_entrypoint_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CycleEveryTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CycleEveryTime) ProtoMessage() {}

func (x *CycleEveryTime) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CycleEveryTime.ProtoReflect.Descriptor instead.
func (*CycleEveryTime) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{44}
}

func (x *CycleEveryTime) GetEveryType() EveryTimeType {
	if x != nil {
		return x.EveryType
	}
	return EveryTimeType_EveryNone
}

func (x *CycleEveryTime) GetRunTime() *CycleHour {
	if x != nil {
		return x.RunTime
	}
	return nil
}

func (x *CycleEveryTime) GetEveryTime() isCycleEveryTime_EveryTime {
	if x != nil {
		return x.EveryTime
	}
	return nil
}

func (x *CycleEveryTime) GetEveryDay() *CycleEveryDay {
	if x != nil {
		if x, ok := x.EveryTime.(*CycleEveryTime_EveryDay); ok {
			return x.EveryDay
		}
	}
	return nil
}

func (x *CycleEveryTime) GetEveryWeek() *CycleEveryWeek {
	if x != nil {
		if x, ok := x.EveryTime.(*CycleEveryTime_EveryWeek); ok {
			return x.EveryWeek
		}
	}
	return nil
}

func (x *CycleEveryTime) GetEveryMonth() *CycleEveryMonth {
	if x != nil {
		if x, ok := x.EveryTime.(*CycleEveryTime_EveryMonth); ok {
			return x.EveryMonth
		}
	}
	return nil
}

func (x *CycleEveryTime) GetEveryQuarter() *CycleEveryQuarter {
	if x != nil {
		if x, ok := x.EveryTime.(*CycleEveryTime_EveryQuarter); ok {
			return x.EveryQuarter
		}
	}
	return nil
}

func (x *CycleEveryTime) GetEveryYear() *CycleEveryYear {
	if x != nil {
		if x, ok := x.EveryTime.(*CycleEveryTime_EveryYear); ok {
			return x.EveryYear
		}
	}
	return nil
}

type isCycleEveryTime_EveryTime interface {
	isCycleEveryTime_EveryTime()
}

type CycleEveryTime_EveryDay struct {
	EveryDay *CycleEveryDay `protobuf:"bytes,3,opt,name=everyDay,proto3,oneof"` // 每天
}

type CycleEveryTime_EveryWeek struct {
	EveryWeek *CycleEveryWeek `protobuf:"bytes,4,opt,name=everyWeek,proto3,oneof"` // 每周
}

type CycleEveryTime_EveryMonth struct {
	EveryMonth *CycleEveryMonth `protobuf:"bytes,5,opt,name=everyMonth,proto3,oneof"` // 每月
}

type CycleEveryTime_EveryQuarter struct {
	EveryQuarter *CycleEveryQuarter `protobuf:"bytes,6,opt,name=everyQuarter,proto3,oneof"` // 每季
}

type CycleEveryTime_EveryYear struct {
	EveryYear *CycleEveryYear `protobuf:"bytes,7,opt,name=everyYear,proto3,oneof"` // 每年
}

func (*CycleEveryTime_EveryDay) isCycleEveryTime_EveryTime() {}

func (*CycleEveryTime_EveryWeek) isCycleEveryTime_EveryTime() {}

func (*CycleEveryTime_EveryMonth) isCycleEveryTime_EveryTime() {}

func (*CycleEveryTime_EveryQuarter) isCycleEveryTime_EveryTime() {}

func (*CycleEveryTime_EveryYear) isCycleEveryTime_EveryTime() {}

// 间隔周期
type EveryExpress struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CycleType     EveryType              `protobuf:"varint,1,opt,name=cycleType,proto3,enum=mbpb.EveryType" json:"cycleType,omitempty"` // 类型
	CycleValue    int32                  `protobuf:"varint,2,opt,name=cycleValue,proto3" json:"cycleValue,omitempty"`                   // Value
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EveryExpress) Reset() {
	*x = EveryExpress{}
	mi := &file_entrypoint_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EveryExpress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EveryExpress) ProtoMessage() {}

func (x *EveryExpress) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EveryExpress.ProtoReflect.Descriptor instead.
func (*EveryExpress) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{45}
}

func (x *EveryExpress) GetCycleType() EveryType {
	if x != nil {
		return x.CycleType
	}
	return EveryType_EvNone
}

func (x *EveryExpress) GetCycleValue() int32 {
	if x != nil {
		return x.CycleValue
	}
	return 0
}

// 表达式
type Expression struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated: Marked as deprecated in entrypoint.proto.
	Express       string `protobuf:"bytes,1,opt,name=express,proto3" json:"express,omitempty"` // 表达式
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Expression) Reset() {
	*x = Expression{}
	mi := &file_entrypoint_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression) ProtoMessage() {}

func (x *Expression) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression.ProtoReflect.Descriptor instead.
func (*Expression) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{46}
}

// Deprecated: Marked as deprecated in entrypoint.proto.
func (x *Expression) GetExpress() string {
	if x != nil {
		return x.Express
	}
	return ""
}

// 每天
type CycleEveryDay struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CycleEveryDay) Reset() {
	*x = CycleEveryDay{}
	mi := &file_entrypoint_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CycleEveryDay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CycleEveryDay) ProtoMessage() {}

func (x *CycleEveryDay) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CycleEveryDay.ProtoReflect.Descriptor instead.
func (*CycleEveryDay) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{47}
}

// 每周
type CycleEveryWeek struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 周 切片
	Week          []EnumWeek `protobuf:"varint,2,rep,packed,name=week,proto3,enum=mbpb.EnumWeek" json:"week,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CycleEveryWeek) Reset() {
	*x = CycleEveryWeek{}
	mi := &file_entrypoint_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CycleEveryWeek) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CycleEveryWeek) ProtoMessage() {}

func (x *CycleEveryWeek) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CycleEveryWeek.ProtoReflect.Descriptor instead.
func (*CycleEveryWeek) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{48}
}

func (x *CycleEveryWeek) GetWeek() []EnumWeek {
	if x != nil {
		return x.Week
	}
	return nil
}

// 每月
type CycleEveryMonth struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Day           []int32                `protobuf:"varint,1,rep,packed,name=day,proto3" json:"day,omitempty"` // 天 切片
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CycleEveryMonth) Reset() {
	*x = CycleEveryMonth{}
	mi := &file_entrypoint_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CycleEveryMonth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CycleEveryMonth) ProtoMessage() {}

func (x *CycleEveryMonth) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CycleEveryMonth.ProtoReflect.Descriptor instead.
func (*CycleEveryMonth) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{49}
}

func (x *CycleEveryMonth) GetDay() []int32 {
	if x != nil {
		return x.Day
	}
	return nil
}

// 月份
type WithMonth struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 月份
	Month EnumMonth `protobuf:"varint,1,opt,name=month,proto3,enum=mbpb.EnumMonth" json:"month,omitempty"`
	// 天 切片 -1=最后1天
	Day           []int32 `protobuf:"varint,2,rep,packed,name=day,proto3" json:"day,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WithMonth) Reset() {
	*x = WithMonth{}
	mi := &file_entrypoint_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WithMonth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithMonth) ProtoMessage() {}

func (x *WithMonth) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithMonth.ProtoReflect.Descriptor instead.
func (*WithMonth) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{50}
}

func (x *WithMonth) GetMonth() EnumMonth {
	if x != nil {
		return x.Month
	}
	return EnumMonth_None
}

func (x *WithMonth) GetDay() []int32 {
	if x != nil {
		return x.Day
	}
	return nil
}

// 按年 包含12个月 每个月不同的天
type CycleEveryYear struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 月 切片
	Month         []*WithMonth `protobuf:"bytes,1,rep,name=month,proto3" json:"month,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CycleEveryYear) Reset() {
	*x = CycleEveryYear{}
	mi := &file_entrypoint_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CycleEveryYear) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CycleEveryYear) ProtoMessage() {}

func (x *CycleEveryYear) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CycleEveryYear.ProtoReflect.Descriptor instead.
func (*CycleEveryYear) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{51}
}

func (x *CycleEveryYear) GetMonth() []*WithMonth {
	if x != nil {
		return x.Month
	}
	return nil
}

// 季
type WithQuarter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 第N个月
	Month int32 `protobuf:"varint,1,opt,name=month,proto3" json:"month,omitempty"`
	// 天 切片 -1=最后1天
	Day           []int32 `protobuf:"varint,2,rep,packed,name=day,proto3" json:"day,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WithQuarter) Reset() {
	*x = WithQuarter{}
	mi := &file_entrypoint_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WithQuarter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithQuarter) ProtoMessage() {}

func (x *WithQuarter) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithQuarter.ProtoReflect.Descriptor instead.
func (*WithQuarter) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{52}
}

func (x *WithQuarter) GetMonth() int32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *WithQuarter) GetDay() []int32 {
	if x != nil {
		return x.Day
	}
	return nil
}

// 每季度
type CycleEveryQuarter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 季切片
	Month         []*WithQuarter `protobuf:"bytes,1,rep,name=month,proto3" json:"month,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CycleEveryQuarter) Reset() {
	*x = CycleEveryQuarter{}
	mi := &file_entrypoint_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CycleEveryQuarter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CycleEveryQuarter) ProtoMessage() {}

func (x *CycleEveryQuarter) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CycleEveryQuarter.ProtoReflect.Descriptor instead.
func (*CycleEveryQuarter) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{53}
}

func (x *CycleEveryQuarter) GetMonth() []*WithQuarter {
	if x != nil {
		return x.Month
	}
	return nil
}

// 小时
type CycleHour struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hour          []int32                `protobuf:"varint,1,rep,packed,name=hour,proto3" json:"hour,omitempty"`     // 小时 切片
	Minute        []int32                `protobuf:"varint,2,rep,packed,name=minute,proto3" json:"minute,omitempty"` // 分钟 切片
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CycleHour) Reset() {
	*x = CycleHour{}
	mi := &file_entrypoint_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CycleHour) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CycleHour) ProtoMessage() {}

func (x *CycleHour) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CycleHour.ProtoReflect.Descriptor instead.
func (*CycleHour) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{54}
}

func (x *CycleHour) GetHour() []int32 {
	if x != nil {
		return x.Hour
	}
	return nil
}

func (x *CycleHour) GetMinute() []int32 {
	if x != nil {
		return x.Minute
	}
	return nil
}

// 生命周期
type LifeCycle struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 时区
	Zone string `protobuf:"bytes,1,opt,name=zone,proto3" json:"zone,omitempty"`
	// 执行时间
	StartTime string `protobuf:"bytes,2,opt,name=startTime,proto3" json:"startTime,omitempty"`
	// 结束时间 无限期为null
	EndTime       *string `protobuf:"bytes,3,opt,name=endTime,proto3,oneof" json:"endTime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LifeCycle) Reset() {
	*x = LifeCycle{}
	mi := &file_entrypoint_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LifeCycle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LifeCycle) ProtoMessage() {}

func (x *LifeCycle) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LifeCycle.ProtoReflect.Descriptor instead.
func (*LifeCycle) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{55}
}

func (x *LifeCycle) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *LifeCycle) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *LifeCycle) GetEndTime() string {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return ""
}

// Crontab表达式
type Crontab struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 调度状态
	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	// 生命周期
	LifeCycle *LifeCycle `protobuf:"bytes,2,opt,name=lifeCycle,proto3" json:"lifeCycle,omitempty"`
	// 执行周期
	//
	// Types that are valid to be assigned to Cycle:
	//
	//	*Crontab_CycleOnce
	//	*Crontab_CycleEvery
	//	*Crontab_CycleEveryTime
	Cycle         isCrontab_Cycle `protobuf_oneof:"cycle"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Crontab) Reset() {
	*x = Crontab{}
	mi := &file_entrypoint_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Crontab) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Crontab) ProtoMessage() {}

func (x *Crontab) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Crontab.ProtoReflect.Descriptor instead.
func (*Crontab) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{56}
}

func (x *Crontab) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Crontab) GetLifeCycle() *LifeCycle {
	if x != nil {
		return x.LifeCycle
	}
	return nil
}

func (x *Crontab) GetCycle() isCrontab_Cycle {
	if x != nil {
		return x.Cycle
	}
	return nil
}

func (x *Crontab) GetCycleOnce() *CycleOnce {
	if x != nil {
		if x, ok := x.Cycle.(*Crontab_CycleOnce); ok {
			return x.CycleOnce
		}
	}
	return nil
}

func (x *Crontab) GetCycleEvery() *CycleEvery {
	if x != nil {
		if x, ok := x.Cycle.(*Crontab_CycleEvery); ok {
			return x.CycleEvery
		}
	}
	return nil
}

func (x *Crontab) GetCycleEveryTime() *CycleEveryTime {
	if x != nil {
		if x, ok := x.Cycle.(*Crontab_CycleEveryTime); ok {
			return x.CycleEveryTime
		}
	}
	return nil
}

type isCrontab_Cycle interface {
	isCrontab_Cycle()
}

type Crontab_CycleOnce struct {
	// 只执行1次
	CycleOnce *CycleOnce `protobuf:"bytes,3,opt,name=cycleOnce,proto3,oneof"`
}

type Crontab_CycleEvery struct {
	// 每隔多久执行一次
	CycleEvery *CycleEvery `protobuf:"bytes,4,opt,name=cycleEvery,proto3,oneof"`
}

type Crontab_CycleEveryTime struct {
	// 时间循环周期执行
	CycleEveryTime *CycleEveryTime `protobuf:"bytes,5,opt,name=cycleEveryTime,proto3,oneof"`
}

func (*Crontab_CycleOnce) isCrontab_Cycle() {}

func (*Crontab_CycleEvery) isCrontab_Cycle() {}

func (*Crontab_CycleEveryTime) isCrontab_Cycle() {}

// Fully Qualified Name
type FQN struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Schema        string                 `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
	Table         string                 `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	Column        string                 `protobuf:"bytes,3,opt,name=column,proto3" json:"column,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FQN) Reset() {
	*x = FQN{}
	mi := &file_entrypoint_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FQN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FQN) ProtoMessage() {}

func (x *FQN) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FQN.ProtoReflect.Descriptor instead.
func (*FQN) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{57}
}

func (x *FQN) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *FQN) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *FQN) GetColumn() string {
	if x != nil {
		return x.Column
	}
	return ""
}

// 附加信息
type Extra struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Grouping      []*FQN                 `protobuf:"bytes,1,rep,name=grouping,proto3" json:"grouping,omitempty"` // 分组信息
	Selects       []*FQN                 `protobuf:"bytes,2,rep,name=selects,proto3" json:"selects,omitempty"`   // 最外层查询列信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Extra) Reset() {
	*x = Extra{}
	mi := &file_entrypoint_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Extra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Extra) ProtoMessage() {}

func (x *Extra) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Extra.ProtoReflect.Descriptor instead.
func (*Extra) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{58}
}

func (x *Extra) GetGrouping() []*FQN {
	if x != nil {
		return x.Grouping
	}
	return nil
}

func (x *Extra) GetSelects() []*FQN {
	if x != nil {
		return x.Selects
	}
	return nil
}

// 错误信息
type Error struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 错误码
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 错误信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Error) Reset() {
	*x = Error{}
	mi := &file_entrypoint_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_entrypoint_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_entrypoint_proto_rawDescGZIP(), []int{59}
}

func (x *Error) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Error) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

var file_entrypoint_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.EnumOptions)(nil),
		ExtensionType: (*int32)(nil),
		Field:         1108,
		Name:          "mbpb.default_code",
		Tag:           "varint,1108,opt,name=default_code",
		Filename:      "entrypoint.proto",
	},
	{
		ExtendedType:  (*descriptorpb.EnumValueOptions)(nil),
		ExtensionType: (*int32)(nil),
		Field:         1109,
		Name:          "mbpb.code",
		Tag:           "varint,1109,opt,name=code",
		Filename:      "entrypoint.proto",
	},
}

// Extension fields to descriptorpb.EnumOptions.
var (
	// optional int32 default_code = 1108;
	E_DefaultCode = &file_entrypoint_proto_extTypes[0]
)

// Extension fields to descriptorpb.EnumValueOptions.
var (
	// optional int32 code = 1109;
	E_Code = &file_entrypoint_proto_extTypes[1]
)

var File_entrypoint_proto protoreflect.FileDescriptor

const file_entrypoint_proto_rawDesc = "" +
	"\n" +
	"\x10entrypoint.proto\x12\x04mbpb\x1a\x1cgoogle/api/annotations.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a google/protobuf/descriptor.proto\"n\n" +
	"\n" +
	"PrimaryKey\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12\x17\n" +
	"\x04page\x18\x02 \x01(\x05H\x00R\x04page\x88\x01\x01\x12 \n" +
	"\tpage_size\x18\x03 \x01(\x05H\x01R\bpageSize\x88\x01\x01B\a\n" +
	"\x05_pageB\f\n" +
	"\n" +
	"_page_size\"@\n" +
	"\fGenericReply\x12&\n" +
	"\x05error\x18\x01 \x01(\v2\v.mbpb.ErrorH\x00R\x05error\x88\x01\x01B\b\n" +
	"\x06_error\"\xd0\x03\n" +
	"\vIncrRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12\x1c\n" +
	"\n" +
	"read_db_id\x18\x02 \x01(\x05R\breadDbId\x12\x1e\n" +
	"\vwrite_db_id\x18\x03 \x01(\x05R\twriteDbId\x12\x19\n" +
	"\bmodel_id\x18\x04 \x01(\x05R\amodelId\x121\n" +
	"\x15stock_min_time_script\x18\x05 \x01(\tR\x12stockMinTimeScript\x12%\n" +
	"\x0estock_interval\x18\x06 \x01(\tR\rstockInterval\x12,\n" +
	"\n" +
	"incr_cycle\x18\a \x01(\v2\r.mbpb.CrontabR\tincrCycle\x12D\n" +
	"\x10table_identifier\x18\b \x01(\v2\x19.mbpb.SchemaQualifiedNameR\x0ftableIdentifier\x12/\n" +
	"\x11dimension_set_sql\x18\t \x01(\tH\x01R\x0fdimensionSetSql\x88\x01\x01\x12\x16\n" +
	"\x05basic\x18e \x01(\tH\x00R\x05basic\x12\x1c\n" +
	"\btemplate\x18f \x01(\tH\x00R\btemplateB\r\n" +
	"\vread_scriptB\x14\n" +
	"\x12_dimension_set_sql\"h\n" +
	"\tIncrReply\x12)\n" +
	"\x06incres\x18\x01 \x03(\v2\x11.mbpb.IncrRequestR\x06incres\x12&\n" +
	"\x05error\x18\x02 \x01(\v2\v.mbpb.ErrorH\x00R\x05error\x88\x01\x01B\b\n" +
	"\x06_error\"{\n" +
	"\fModelRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12!\n" +
	"\fdisplay_name\x18\x02 \x01(\tR\vdisplayName\x12 \n" +
	"\ftarget_db_id\x18\x03 \x01(\x05R\n" +
	"targetDbId\x12\x16\n" +
	"\x06script\x18\x04 \x01(\tR\x06script\"\xc6\x02\n" +
	"\n" +
	"ModelReply\x12*\n" +
	"\x06tables\x18\x01 \x03(\v2\x12.mbpb.ModelRequestR\x06tables\x12-\n" +
	"\x05table\x18\x02 \x01(\v2\x12.mbpb.ModelRequestH\x00R\x05table\x88\x01\x01\x12\"\n" +
	"\n" +
	"total_rows\x18\x03 \x01(\x03H\x01R\ttotalRows\x88\x01\x01\x12\"\n" +
	"\n" +
	"total_page\x18\x04 \x01(\x03H\x02R\ttotalPage\x88\x01\x01\x12/\n" +
	"\arequest\x18\x05 \x01(\v2\x10.mbpb.PrimaryKeyH\x03R\arequest\x88\x01\x01\x12&\n" +
	"\x05error\x18\x06 \x01(\v2\v.mbpb.ErrorH\x04R\x05error\x88\x01\x01B\b\n" +
	"\x06_tableB\r\n" +
	"\v_total_rowsB\r\n" +
	"\v_total_pageB\n" +
	"\n" +
	"\b_requestB\b\n" +
	"\x06_error\"C\n" +
	"\x13SchemaQualifiedName\x12\x16\n" +
	"\x06schema\x18\x01 \x01(\tR\x06schema\x12\x14\n" +
	"\x05table\x18\x02 \x01(\tR\x05table\"C\n" +
	"\x0eBatchOpRequest\x121\n" +
	"\tbatch_ops\x18\x01 \x03(\v2\x14.mbpb.WebHookRequestR\bbatchOps\"C\n" +
	"\x0fBatchOpResponse\x120\n" +
	"\tresponses\x18\x01 \x03(\v2\x12.mbpb.WebHookReplyR\tresponses\"\xa1\x01\n" +
	"\x0eWebHookRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12\x1b\n" +
	"\tunique_id\x18\x02 \x01(\tR\buniqueId\x12\x10\n" +
	"\x03url\x18\x03 \x01(\tR\x03url\x12'\n" +
	"\x04type\x18\x04 \x01(\x0e2\x13.mbpb.OperationTypeR\x04type\x12'\n" +
	"\acrontab\x18\x05 \x01(\v2\r.mbpb.CrontabR\acrontab\"\xca\x01\n" +
	"\fWebHookReply\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12&\n" +
	"\fnext_runtime\x18\x02 \x01(\tH\x00R\vnextRuntime\x88\x01\x01\x123\n" +
	"\arequest\x18\x03 \x01(\v2\x14.mbpb.WebHookRequestH\x01R\arequest\x88\x01\x01\x12&\n" +
	"\x05error\x18\x04 \x01(\v2\v.mbpb.ErrorH\x02R\x05error\x88\x01\x01B\x0f\n" +
	"\r_next_runtimeB\n" +
	"\n" +
	"\b_requestB\b\n" +
	"\x06_error\" \n" +
	"\fBatchRequest\x12\x10\n" +
	"\x03ids\x18\x01 \x03(\x05R\x03ids\"Q\n" +
	"\vFlowRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12#\n" +
	"\n" +
	"sequenceId\x18\x02 \x01(\tH\x00R\n" +
	"sequenceId\x88\x01\x01B\r\n" +
	"\v_sequenceId\"w\n" +
	"\x0fFlowCancelReply\x12#\n" +
	"\n" +
	"sequenceID\x18\x01 \x01(\tH\x00R\n" +
	"sequenceID\x88\x01\x01\x12&\n" +
	"\x05error\x18\x02 \x01(\v2\v.mbpb.ErrorH\x01R\x05error\x88\x01\x01B\r\n" +
	"\v_sequenceIDB\b\n" +
	"\x06_error\"\xfc\x01\n" +
	"\tFlowReply\x12&\n" +
	"\x05graph\x18\x01 \x01(\v2\v.mbpb.GraphH\x00R\x05graph\x88\x01\x01\x12$\n" +
	"\x06status\x18\x02 \x03(\v2\f.mbpb.StatusR\x06status\x12.\n" +
	"\btaskType\x18\x03 \x01(\x0e2\x12.mbpb.FlowTaskTypeR\btaskType\x12%\n" +
	"\vreferenceID\x18\x04 \x01(\x05H\x01R\vreferenceID\x88\x01\x01\x12&\n" +
	"\x05error\x18\x05 \x01(\v2\v.mbpb.ErrorH\x02R\x05error\x88\x01\x01B\b\n" +
	"\x06_graphB\x0e\n" +
	"\f_referenceIDB\b\n" +
	"\x06_error\"\x87\x01\n" +
	"\x0fFlowRemoveReply\x12 \n" +
	"\vrecoverFlow\x18\x01 \x03(\x03R\vrecoverFlow\x12 \n" +
	"\vrecoverNode\x18\x02 \x03(\x03R\vrecoverNode\x12&\n" +
	"\x05error\x18\x03 \x01(\v2\v.mbpb.ErrorH\x00R\x05error\x88\x01\x01B\b\n" +
	"\x06_error\"|\n" +
	"\rWorkflowReply\x125\n" +
	"\venableReply\x18\x01 \x01(\v2\x11.mbpb.EnableReplyH\x00R\venableReply\x12+\n" +
	"\tflowReply\x18\x02 \x01(\v2\v.mbpb.ReplyH\x00R\tflowReplyB\a\n" +
	"\x05reply\"\x90\x01\n" +
	"\x0fWorkflowRequest\x12?\n" +
	"\x0fbaseworkRequest\x18\x01 \x01(\v2\x13.mbpb.EnableRequestH\x00R\x0fbaseworkRequest\x121\n" +
	"\vflowRequest\x18\x02 \x01(\v2\r.mbpb.RequestH\x00R\vflowRequestB\t\n" +
	"\arequest\"\xc0\x02\n" +
	"\x11FlowEnableRequest\x12\x14\n" +
	"\x05state\x18\x01 \x01(\bR\x05state\x12\x16\n" +
	"\x06flowID\x18\x02 \x01(\x03R\x06flowID\x12'\n" +
	"\acrontab\x18\x03 \x01(\v2\r.mbpb.CrontabR\acrontab\x126\n" +
	"\facceptAction\x18\x04 \x01(\x0e2\x12.mbpb.AcceptActionR\facceptAction\x12\x16\n" +
	"\x06userId\x18\x05 \x01(\x03R\x06userId\x12\"\n" +
	"\fenterpriseID\x18\x06 \x01(\tR\fenterpriseID\x12#\n" +
	"\n" +
	"emitCardId\x18\a \x01(\x03H\x00R\n" +
	"emitCardId\x88\x01\x01\x12#\n" +
	"\x04over\x18\b \x01(\v2\n" +
	".mbpb.OverH\x01R\x04over\x88\x01\x01B\r\n" +
	"\v_emitCardIdB\a\n" +
	"\x05_over\"\xef\x03\n" +
	"\rEnableRequest\x12+\n" +
	"\tsource_db\x18\x01 \x01(\v2\x0e.mbpb.DBDetailR\bsourceDb\x12+\n" +
	"\ttarget_db\x18\x02 \x01(\v2\x0e.mbpb.DBDetailR\btargetDb\x12#\n" +
	"\renterprise_id\x18\x03 \x01(\tR\fenterpriseId\x12\x17\n" +
	"\acard_id\x18\x04 \x01(\x03R\x06cardId\x12\x17\n" +
	"\auser_id\x18\x05 \x01(\x03R\x06userId\x12,\n" +
	"\acrontab\x18\x06 \x01(\v2\r.mbpb.CrontabH\x00R\acrontab\x88\x01\x01\x12\x1d\n" +
	"\n" +
	"sql_script\x18\a \x01(\tR\tsqlScript\x12#\n" +
	"\x06tables\x18\b \x03(\v2\v.mbpb.TableR\x06tables\x12&\n" +
	"\x05extra\x18\t \x01(\v2\v.mbpb.ExtraH\x01R\x05extra\x88\x01\x01\x12#\n" +
	"\x04over\x18\n" +
	" \x01(\v2\n" +
	".mbpb.OverH\x02R\x04over\x88\x01\x01\x12#\n" +
	"\rskip_workflow\x18\v \x01(\bR\fskipWorkflow\x12*\n" +
	"\n" +
	"all_tables\x18\f \x03(\v2\v.mbpb.TableR\tallTablesB\n" +
	"\n" +
	"\b_crontabB\b\n" +
	"\x06_extraB\a\n" +
	"\x05_over\"J\n" +
	"\n" +
	"Identifier\x12#\n" +
	"\renterprise_id\x18\x01 \x01(\tR\fenterpriseId\x12\x17\n" +
	"\acard_id\x18\x02 \x01(\x03R\x06cardId\"\xf7\x01\n" +
	"\vEnableReply\x12'\n" +
	"\boutTable\x18\x01 \x01(\v2\v.mbpb.TableR\boutTable\x12&\n" +
	"\acolumns\x18\x02 \x03(\v2\f.mbpb.ColumnR\acolumns\x12%\n" +
	"\vnextRunTime\x18\x03 \x01(\tH\x00R\vnextRunTime\x88\x01\x01\x12&\n" +
	"\x05error\x18\x04 \x01(\v2\v.mbpb.ErrorH\x01R\x05error\x88\x01\x01\x12.\n" +
	"\bflowData\x18\x05 \x01(\v2\x12.mbpb.FlowMetadataR\bflowDataB\x0e\n" +
	"\f_nextRunTimeB\b\n" +
	"\x06_error\"z\n" +
	"\x0fFlowEnableReply\x12%\n" +
	"\vnextRunTime\x18\x01 \x01(\tH\x00R\vnextRunTime\x88\x01\x01\x12&\n" +
	"\x05error\x18\x02 \x01(\v2\v.mbpb.ErrorH\x01R\x05error\x88\x01\x01B\x0e\n" +
	"\f_nextRunTimeB\b\n" +
	"\x06_error\"\xcb\x03\n" +
	"\fFlowMetadata\x12*\n" +
	"\btaskType\x18\x01 \x01(\x0e2\x0e.mbpb.TaskTypeR\btaskType\x12B\n" +
	"\n" +
	"beforeFlow\x18\x02 \x03(\v2\".mbpb.FlowMetadata.BeforeFlowEntryR\n" +
	"beforeFlow\x12)\n" +
	"\tafterFlow\x18\x03 \x01(\v2\v.mbpb.GraphR\tafterFlow\x126\n" +
	"\facceptAction\x18\x04 \x01(\x0e2\x12.mbpb.AcceptActionR\facceptAction\x129\n" +
	"\aflowMap\x18\x05 \x03(\v2\x1f.mbpb.FlowMetadata.FlowMapEntryR\aflowMap\x12\x16\n" +
	"\x06flowID\x18\x06 \x01(\x03R\x06flowID\x1aJ\n" +
	"\x0fBeforeFlowEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x12!\n" +
	"\x05value\x18\x02 \x01(\v2\v.mbpb.GraphR\x05value:\x028\x01\x1aI\n" +
	"\fFlowMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12#\n" +
	"\x05value\x18\x02 \x01(\v2\r.mbpb.FlowMapR\x05value:\x028\x01\"5\n" +
	"\aFlowMap\x12\x12\n" +
	"\x04uuid\x18\x01 \x01(\tR\x04uuid\x12\x16\n" +
	"\x06flowID\x18\x02 \x01(\x03R\x06flowID\"s\n" +
	"\aRequest\x12\"\n" +
	"\fenterpriseID\x18\x01 \x01(\tR\fenterpriseID\x12\x16\n" +
	"\x06cardId\x18\x02 \x01(\x03R\x06cardId\x12#\n" +
	"\x04over\x18\x03 \x01(\v2\n" +
	".mbpb.OverH\x00R\x04over\x88\x01\x01B\a\n" +
	"\x05_over\"\xe4\x03\n" +
	"\x04Over\x12\x15\n" +
	"\x03uid\x18\x01 \x01(\tH\x00R\x03uid\x88\x01\x01\x12#\n" +
	"\n" +
	"sequenceID\x18\x02 \x01(\tH\x01R\n" +
	"sequenceID\x88\x01\x01\x12,\n" +
	"\arunType\x18\x03 \x01(\x0e2\r.mbpb.RunTypeH\x02R\arunType\x88\x01\x01\x12C\n" +
	"\fstartRunTime\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampH\x03R\fstartRunTime\x88\x01\x01\x12A\n" +
	"\vnextRunTime\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampH\x04R\vnextRunTime\x88\x01\x01\x12/\n" +
	"\btaskType\x18\x06 \x01(\x0e2\x0e.mbpb.TaskTypeH\x05R\btaskType\x88\x01\x01\x12+\n" +
	"\x0eflowSequenceID\x18\a \x01(\tH\x06R\x0eflowSequenceID\x88\x01\x01\x12(\n" +
	"\bchildren\x18\b \x03(\v2\f.mbpb.SourceR\bchildrenB\x06\n" +
	"\x04_uidB\r\n" +
	"\v_sequenceIDB\n" +
	"\n" +
	"\b_runTypeB\x0f\n" +
	"\r_startRunTimeB\x0e\n" +
	"\f_nextRunTimeB\v\n" +
	"\t_taskTypeB\x11\n" +
	"\x0f_flowSequenceID\"\xeb\x01\n" +
	"\x05Reply\x12\x15\n" +
	"\x03key\x18\x01 \x01(\tH\x00R\x03key\x88\x01\x01\x12#\n" +
	"\n" +
	"sequenceID\x18\x02 \x01(\tH\x01R\n" +
	"sequenceID\x88\x01\x01\x12&\n" +
	"\acolumns\x18\x03 \x03(\v2\f.mbpb.ColumnR\acolumns\x12%\n" +
	"\vnextRunTime\x18\x04 \x01(\tH\x02R\vnextRunTime\x88\x01\x01\x12&\n" +
	"\x05error\x18\x05 \x01(\v2\v.mbpb.ErrorH\x03R\x05error\x88\x01\x01B\x06\n" +
	"\x04_keyB\r\n" +
	"\v_sequenceIDB\x0e\n" +
	"\f_nextRunTimeB\b\n" +
	"\x06_error\"\x8e\x01\n" +
	"\bRunReply\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12\x1e\n" +
	"\n" +
	"sequenceID\x18\x02 \x01(\tR\n" +
	"sequenceID\x12 \n" +
	"\vnextRunTime\x18\x03 \x01(\tR\vnextRunTime\x12&\n" +
	"\x05error\x18\x04 \x01(\v2\v.mbpb.ErrorH\x00R\x05error\x88\x01\x01B\b\n" +
	"\x06_error\"\x95\x01\n" +
	"\x05Graph\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12(\n" +
	"\bchildren\x18\x02 \x03(\v2\f.mbpb.SourceR\bchildren\x12 \n" +
	"\x05edges\x18\x03 \x03(\v2\n" +
	".mbpb.EdgeR\x05edges\x12&\n" +
	"\x05error\x18\x04 \x01(\v2\v.mbpb.ErrorH\x00R\x05error\x88\x01\x01B\b\n" +
	"\x06_error\"i\n" +
	"\x06Status\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12 \n" +
	"\vlastRuntime\x18\x02 \x01(\tR\vlastRuntime\x12-\n" +
	"\trunStatus\x18\x03 \x01(\x0e2\x0f.mbpb.RunStatusR\trunStatus\"F\n" +
	"\x04Edge\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x16\n" +
	"\x06source\x18\x02 \x01(\tR\x06source\x12\x16\n" +
	"\x06target\x18\x03 \x01(\tR\x06target\"\x8d\x02\n" +
	"\x06Source\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x16\n" +
	"\x06baseId\x18\x02 \x01(\tR\x06baseId\x12$\n" +
	"\x04type\x18\x03 \x01(\x0e2\x10.mbpb.SourceTypeR\x04type\x12*\n" +
	"\x04prev\x18\x04 \x03(\v2\x16.mbpb.Source.PrevEntryR\x04prev\x122\n" +
	"\trunStatus\x18\x05 \x01(\x0e2\x0f.mbpb.RunStatusH\x00R\trunStatus\x88\x01\x01\x1aG\n" +
	"\tPrevEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12$\n" +
	"\x05value\x18\x02 \x01(\v2\x0e.mbpb.PropertyR\x05value:\x028\x01B\f\n" +
	"\n" +
	"_runStatus\"@\n" +
	"\bProperty\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12$\n" +
	"\x04type\x18\x02 \x01(\x0e2\x10.mbpb.SourceTypeR\x04type\"\xa1\x01\n" +
	"\x05Table\x12\x16\n" +
	"\x06schema\x18\x01 \x01(\tR\x06schema\x12\x14\n" +
	"\x05table\x18\x02 \x01(\tR\x05table\x12)\n" +
	"\x06source\x18\x03 \x01(\v2\f.mbpb.SourceH\x00R\x06source\x88\x01\x01\x12)\n" +
	"\x06target\x18\x04 \x01(\v2\f.mbpb.SourceH\x01R\x06target\x88\x01\x01B\t\n" +
	"\a_sourceB\t\n" +
	"\a_target\"l\n" +
	"\x06Depend\x12$\n" +
	"\x06source\x18\x01 \x01(\v2\f.mbpb.SourceR\x06source\x12$\n" +
	"\x06target\x18\x02 \x01(\v2\f.mbpb.SourceR\x06target\x12\x16\n" +
	"\x06linked\x18\x03 \x01(\bR\x06linked\"\xcb\x01\n" +
	"\x06Column\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x12\n" +
	"\x04type\x18\x02 \x01(\tR\x04type\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x1f\n" +
	"\vprimary_key\x18\x04 \x01(\bR\n" +
	"primaryKey\x12\x19\n" +
	"\bnot_null\x18\x05 \x01(\bR\anotNull\x12\x16\n" +
	"\x06unique\x18\x06 \x01(\bR\x06unique\x12#\n" +
	"\rtype_modifier\x18\a \x01(\x05R\ftypeModifier\"n\n" +
	"\x0fDatabaseRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12!\n" +
	"\fdisplay_name\x18\x02 \x01(\tR\vdisplayName\x12(\n" +
	"\adetails\x18\x03 \x01(\v2\x0e.mbpb.DBDetailR\adetails\"\xde\x02\n" +
	"\rDatabaseReply\x123\n" +
	"\tdatabases\x18\x01 \x03(\v2\x15.mbpb.DatabaseRequestR\tdatabases\x126\n" +
	"\bdatabase\x18\x02 \x01(\v2\x15.mbpb.DatabaseRequestH\x00R\bdatabase\x88\x01\x01\x12\"\n" +
	"\n" +
	"total_rows\x18\x03 \x01(\x03H\x01R\ttotalRows\x88\x01\x01\x12\"\n" +
	"\n" +
	"total_page\x18\x04 \x01(\x03H\x02R\ttotalPage\x88\x01\x01\x12/\n" +
	"\arequest\x18\x05 \x01(\v2\x10.mbpb.PrimaryKeyH\x03R\arequest\x88\x01\x01\x12&\n" +
	"\x05error\x18\x06 \x01(\v2\v.mbpb.ErrorH\x04R\x05error\x88\x01\x01B\v\n" +
	"\t_databaseB\r\n" +
	"\v_total_rowsB\r\n" +
	"\v_total_pageB\n" +
	"\n" +
	"\b_requestB\b\n" +
	"\x06_error\"\xb9\x01\n" +
	"\bDBDetail\x12%\n" +
	"\adb_type\x18\x01 \x01(\x0e2\f.mbpb.DBTypeR\x06dbType\x12-\n" +
	"\bpostgres\x18e \x01(\v2\x0f.mbpb.GenericDBH\x00R\bpostgres\x12#\n" +
	"\x05doris\x18f \x01(\v2\v.mbpb.DorisH\x00R\x05doris\x12'\n" +
	"\x05mysql\x18g \x01(\v2\x0f.mbpb.GenericDBH\x00R\x05mysqlB\t\n" +
	"\apayload\"\xc0\x02\n" +
	"\x05Doris\x12\x12\n" +
	"\x04host\x18\x01 \x01(\tR\x04host\x12\x1b\n" +
	"\thttp_port\x18\x02 \x01(\x05R\bhttpPort\x12\x1d\n" +
	"\n" +
	"query_port\x18\x03 \x01(\x05R\tqueryPort\x12\x1f\n" +
	"\vflight_port\x18\x04 \x01(\x05R\n" +
	"flightPort\x12\x12\n" +
	"\x04user\x18\x05 \x01(\tR\x04user\x12\x10\n" +
	"\x03pwd\x18\x06 \x01(\tR\x03pwd\x12\x17\n" +
	"\adb_name\x18\a \x01(\tR\x06dbName\x12E\n" +
	"\x0econnect_params\x18\b \x03(\v2\x1e.mbpb.Doris.ConnectParamsEntryR\rconnectParams\x1a@\n" +
	"\x12ConnectParamsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xff\x01\n" +
	"\tGenericDB\x12\x12\n" +
	"\x04host\x18\x01 \x01(\tR\x04host\x12\x12\n" +
	"\x04port\x18\x02 \x01(\x05R\x04port\x12\x12\n" +
	"\x04user\x18\x03 \x01(\tR\x04user\x12\x10\n" +
	"\x03pwd\x18\x04 \x01(\tR\x03pwd\x12\x17\n" +
	"\adb_name\x18\x05 \x01(\tR\x06dbName\x12I\n" +
	"\x0econnect_params\x18\x06 \x03(\v2\".mbpb.GenericDB.ConnectParamsEntryR\rconnectParams\x1a@\n" +
	"\x12ConnectParamsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"A\n" +
	"\tCycleOnce\x124\n" +
	"\n" +
	"expression\x18\x01 \x01(\v2\x10.mbpb.ExpressionB\x02\x18\x01R\n" +
	"expression\"\x8e\x01\n" +
	"\n" +
	"CycleEvery\x126\n" +
	"\feveryExpress\x18\x01 \x01(\v2\x12.mbpb.EveryExpressR\feveryExpress\x129\n" +
	"\n" +
	"expression\x18\x02 \x01(\v2\x10.mbpb.ExpressionB\x02\x18\x01H\x00R\n" +
	"expression\x88\x01\x01B\r\n" +
	"\v_expression\"\x92\x03\n" +
	"\x0eCycleEveryTime\x121\n" +
	"\teveryType\x18\x01 \x01(\x0e2\x13.mbpb.EveryTimeTypeR\teveryType\x12)\n" +
	"\arunTime\x18\x02 \x01(\v2\x0f.mbpb.CycleHourR\arunTime\x121\n" +
	"\beveryDay\x18\x03 \x01(\v2\x13.mbpb.CycleEveryDayH\x00R\beveryDay\x124\n" +
	"\teveryWeek\x18\x04 \x01(\v2\x14.mbpb.CycleEveryWeekH\x00R\teveryWeek\x127\n" +
	"\n" +
	"everyMonth\x18\x05 \x01(\v2\x15.mbpb.CycleEveryMonthH\x00R\n" +
	"everyMonth\x12=\n" +
	"\feveryQuarter\x18\x06 \x01(\v2\x17.mbpb.CycleEveryQuarterH\x00R\feveryQuarter\x124\n" +
	"\teveryYear\x18\a \x01(\v2\x14.mbpb.CycleEveryYearH\x00R\teveryYearB\v\n" +
	"\teveryTime\"]\n" +
	"\fEveryExpress\x12-\n" +
	"\tcycleType\x18\x01 \x01(\x0e2\x0f.mbpb.EveryTypeR\tcycleType\x12\x1e\n" +
	"\n" +
	"cycleValue\x18\x02 \x01(\x05R\n" +
	"cycleValue\"*\n" +
	"\n" +
	"Expression\x12\x1c\n" +
	"\aexpress\x18\x01 \x01(\tB\x02\x18\x01R\aexpress\"\x0f\n" +
	"\rCycleEveryDay\"4\n" +
	"\x0eCycleEveryWeek\x12\"\n" +
	"\x04week\x18\x02 \x03(\x0e2\x0e.mbpb.EnumWeekR\x04week\"#\n" +
	"\x0fCycleEveryMonth\x12\x10\n" +
	"\x03day\x18\x01 \x03(\x05R\x03day\"D\n" +
	"\tWithMonth\x12%\n" +
	"\x05month\x18\x01 \x01(\x0e2\x0f.mbpb.EnumMonthR\x05month\x12\x10\n" +
	"\x03day\x18\x02 \x03(\x05R\x03day\"7\n" +
	"\x0eCycleEveryYear\x12%\n" +
	"\x05month\x18\x01 \x03(\v2\x0f.mbpb.WithMonthR\x05month\"5\n" +
	"\vWithQuarter\x12\x14\n" +
	"\x05month\x18\x01 \x01(\x05R\x05month\x12\x10\n" +
	"\x03day\x18\x02 \x03(\x05R\x03day\"<\n" +
	"\x11CycleEveryQuarter\x12'\n" +
	"\x05month\x18\x01 \x03(\v2\x11.mbpb.WithQuarterR\x05month\"7\n" +
	"\tCycleHour\x12\x12\n" +
	"\x04hour\x18\x01 \x03(\x05R\x04hour\x12\x16\n" +
	"\x06minute\x18\x02 \x03(\x05R\x06minute\"h\n" +
	"\tLifeCycle\x12\x12\n" +
	"\x04zone\x18\x01 \x01(\tR\x04zone\x12\x1c\n" +
	"\tstartTime\x18\x02 \x01(\tR\tstartTime\x12\x1d\n" +
	"\aendTime\x18\x03 \x01(\tH\x00R\aendTime\x88\x01\x01B\n" +
	"\n" +
	"\b_endTime\"\xfe\x01\n" +
	"\aCrontab\x12\x16\n" +
	"\x06enable\x18\x01 \x01(\bR\x06enable\x12-\n" +
	"\tlifeCycle\x18\x02 \x01(\v2\x0f.mbpb.LifeCycleR\tlifeCycle\x12/\n" +
	"\tcycleOnce\x18\x03 \x01(\v2\x0f.mbpb.CycleOnceH\x00R\tcycleOnce\x122\n" +
	"\n" +
	"cycleEvery\x18\x04 \x01(\v2\x10.mbpb.CycleEveryH\x00R\n" +
	"cycleEvery\x12>\n" +
	"\x0ecycleEveryTime\x18\x05 \x01(\v2\x14.mbpb.CycleEveryTimeH\x00R\x0ecycleEveryTimeB\a\n" +
	"\x05cycle\"K\n" +
	"\x03FQN\x12\x16\n" +
	"\x06schema\x18\x01 \x01(\tR\x06schema\x12\x14\n" +
	"\x05table\x18\x02 \x01(\tR\x05table\x12\x16\n" +
	"\x06column\x18\x03 \x01(\tR\x06column\"S\n" +
	"\x05Extra\x12%\n" +
	"\bgrouping\x18\x01 \x03(\v2\t.mbpb.FQNR\bgrouping\x12#\n" +
	"\aselects\x18\x02 \x03(\v2\t.mbpb.FQNR\aselects\"-\n" +
	"\x05Error\x12\x12\n" +
	"\x04code\x18\x01 \x01(\x05R\x04code\x12\x10\n" +
	"\x03msg\x18\x02 \x01(\tR\x03msg* \n" +
	"\bSyncType\x12\t\n" +
	"\x05STOCK\x10\x00\x12\t\n" +
	"\x05INCRE\x10\x01*K\n" +
	"\rOperationType\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\n" +
	"\n" +
	"\x06ENABLE\x10\x01\x12\v\n" +
	"\aDISABLE\x10\x02\x12\n" +
	"\n" +
	"\x06REMOVE\x10\x03\x12\b\n" +
	"\x04READ\x10\x04*T\n" +
	"\fFlowTaskType\x12\x0f\n" +
	"\vInvalidTask\x10\x00\x12\x18\n" +
	"\x0eRefInvalidTask\x10\x01\x1a\x04\xa8E\xca\x01\x12\x14\n" +
	"\n" +
	"NormalTask\x10\x02\x1a\x04\xa8E\xc8\x01\x1a\x03\xa0E\x00*G\n" +
	"\fAcceptAction\x12\v\n" +
	"\aNothing\x10\x00\x12\v\n" +
	"\aNewFlow\x10\x01\x12\x0e\n" +
	"\n" +
	"AppendFlow\x10\x02\x12\r\n" +
	"\tMergeFlow\x10\x03*8\n" +
	"\bTaskType\x12\r\n" +
	"\tBasicTask\x10\x00\x12\f\n" +
	"\bFlowTask\x10\x01\x12\x0f\n" +
	"\vWebhookTask\x10\x02*\x1f\n" +
	"\aRunType\x12\t\n" +
	"\x05Cycle\x10\x00\x12\t\n" +
	"\x05Spark\x10\x01*c\n" +
	"\n" +
	"SourceType\x12\f\n" +
	"\bRemoteDB\x10\x00\x12\x0e\n" +
	"\n" +
	"ImportData\x10\x01\x12\f\n" +
	"\bDataFill\x10\x02\x12\t\n" +
	"\x05MbEtl\x10\x03\x12\r\n" +
	"\tRemoteApi\x10\x04\x12\x0f\n" +
	"\n" +
	"UnknownSrc\x10\xe7\a*1\n" +
	"\fFlowDataStat\x12\n" +
	"\n" +
	"\x06Inside\x10\x00\x12\t\n" +
	"\x05Draft\x10\x01\x12\n" +
	"\n" +
	"\x06Formal\x10\x02*o\n" +
	"\tRunStatus\x12\v\n" +
	"\aUnknown\x10\x00\x12\x0e\n" +
	"\n" +
	"NotRunning\x10\x02\x12\n" +
	"\n" +
	"\x06Scheme\x10\x04\x12\v\n" +
	"\aRunning\x10\b\x12\v\n" +
	"\aSuccess\x10\x10\x12\b\n" +
	"\x04Fail\x10 \x12\n" +
	"\n" +
	"\x06Cancel\x10@\x12\t\n" +
	"\x04Skip\x10\x80\x01*=\n" +
	"\x06DBType\x12\x0f\n" +
	"\vUNSPECIFIED\x10\x00\x12\f\n" +
	"\bPOSTGRES\x10\x01\x12\t\n" +
	"\x05DORIS\x10\x02\x12\t\n" +
	"\x05MYSQL\x10\x03*U\n" +
	"\tEveryType\x12\n" +
	"\n" +
	"\x06EvNone\x10\x00\x12\f\n" +
	"\bEvMinute\x10\x01\x12\n" +
	"\n" +
	"\x06EvHour\x10\x02\x12\t\n" +
	"\x05EvDay\x10\x03\x12\n" +
	"\n" +
	"\x06EvWeek\x10\x04\x12\v\n" +
	"\aEvMonth\x10\x05*I\n" +
	"\bEnumWeek\x12\a\n" +
	"\x03Sun\x10\x00\x12\a\n" +
	"\x03Mon\x10\x01\x12\a\n" +
	"\x03Tue\x10\x02\x12\a\n" +
	"\x03Wed\x10\x03\x12\a\n" +
	"\x03Thu\x10\x04\x12\a\n" +
	"\x03Fri\x10\x05\x12\a\n" +
	"\x03Sat\x10\x06*\x81\x01\n" +
	"\tEnumMonth\x12\b\n" +
	"\x04None\x10\x00\x12\a\n" +
	"\x03Jan\x10\x01\x12\a\n" +
	"\x03Feb\x10\x02\x12\a\n" +
	"\x03Mar\x10\x03\x12\a\n" +
	"\x03Apr\x10\x04\x12\a\n" +
	"\x03May\x10\x05\x12\a\n" +
	"\x03Jun\x10\x06\x12\a\n" +
	"\x03Jul\x10\a\x12\a\n" +
	"\x03Aug\x10\b\x12\a\n" +
	"\x03Sep\x10\t\x12\a\n" +
	"\x03Oct\x10\n" +
	"\x12\a\n" +
	"\x03Nov\x10\v\x12\a\n" +
	"\x03Dec\x10\f*l\n" +
	"\rEveryTimeType\x12\r\n" +
	"\tEveryNone\x10\x00\x12\f\n" +
	"\bEveryDay\x10\x01\x12\r\n" +
	"\tEveryWeek\x10\x02\x12\x0e\n" +
	"\n" +
	"EveryMonth\x10\x03\x12\x10\n" +
	"\fEveryQuarter\x10\x04\x12\r\n" +
	"\tEveryYear\x10\x052\xb9\x11\n" +
	"\x05MBetl\x122\n" +
	"\x06Enable\x12\x13.mbpb.EnableRequest\x1a\x11.mbpb.EnableReply\"\x00\x12'\n" +
	"\aDisable\x12\r.mbpb.Request\x1a\v.mbpb.Reply\"\x00\x12#\n" +
	"\x03Run\x12\r.mbpb.Request\x1a\v.mbpb.Reply\"\x00\x12&\n" +
	"\x06Cancel\x12\r.mbpb.Request\x1a\v.mbpb.Reply\"\x00\x12&\n" +
	"\x06Remove\x12\r.mbpb.Request\x1a\v.mbpb.Error\"\x00\x12K\n" +
	"\vDataLineage\x12\r.mbpb.Request\x1a\v.mbpb.Graph\" \x82\xd3\xe4\x93\x02\x1a\x12\x18/api/v1/flow/datalineage\x12A\n" +
	"\rWorkflowDraft\x12\x17.mbpb.FlowEnableRequest\x1a\x15.mbpb.FlowEnableReply\"\x00\x12B\n" +
	"\x0eWorkflowEnable\x12\x17.mbpb.FlowEnableRequest\x1a\x15.mbpb.FlowEnableReply\"\x00\x123\n" +
	"\x0fWorkflowDisable\x12\x11.mbpb.FlowRequest\x1a\v.mbpb.Error\"\x00\x12J\n" +
	"\vWorkflowRun\x12\x11.mbpb.FlowRequest\x1a\x0e.mbpb.RunReply\"\x18\x82\xd3\xe4\x93\x02\x12\x12\x10/api/v1/flow/run\x12W\n" +
	"\x0eWorkflowCancel\x12\x11.mbpb.FlowRequest\x1a\x15.mbpb.FlowCancelReply\"\x1b\x82\xd3\xe4\x93\x02\x15\x12\x13/api/v1/flow/cancel\x12<\n" +
	"\x0eWorkflowRemove\x12\x11.mbpb.FlowRequest\x1a\x15.mbpb.FlowRemoveReply\"\x00\x12M\n" +
	"\fWorkflowSpec\x12\x11.mbpb.FlowRequest\x1a\x0f.mbpb.FlowReply\"\x19\x82\xd3\xe4\x93\x02\x13\x12\x11/api/v1/flow/spec\x12Q\n" +
	"\x0eWorkflowStatus\x12\x11.mbpb.FlowRequest\x1a\x0f.mbpb.FlowReply\"\x1b\x82\xd3\xe4\x93\x02\x15\x12\x13/api/v1/flow/status\x12>\n" +
	"\x14WorkflowStatusStream\x12\x11.mbpb.FlowRequest\x1a\x0f.mbpb.FlowReply\"\x000\x01\x12>\n" +
	"\x10ScheduledWebHook\x12\x14.mbpb.WebHookRequest\x1a\x12.mbpb.WebHookReply\"\x00\x12G\n" +
	"\x1bScheduledWebHookBatchRemove\x12\x12.mbpb.BatchRequest\x1a\x12.mbpb.GenericReply\"\x00\x12H\n" +
	"\x17ScheduledWebHookBatchOp\x12\x14.mbpb.BatchOpRequest\x1a\x15.mbpb.BatchOpResponse\"\x00\x12a\n" +
	"\x0eDatabaseUPsert\x12\x15.mbpb.DatabaseRequest\x1a\x13.mbpb.DatabaseReply\"#\x82\xd3\xe4\x93\x02\x1d:\x01*\"\x18/api/v1/databases/upsert\x12V\n" +
	"\x0eDatabaseRemove\x12\x10.mbpb.PrimaryKey\x1a\x12.mbpb.GenericReply\"\x1e\x82\xd3\xe4\x93\x02\x18*\x16/api/v1/databases/{id}\x12Q\n" +
	"\rDatabaseQuery\x12\x10.mbpb.PrimaryKey\x1a\x13.mbpb.DatabaseReply\"\x19\x82\xd3\xe4\x93\x02\x13\x12\x11/api/v1/databases\x12U\n" +
	"\vModelUPsert\x12\x12.mbpb.ModelRequest\x1a\x10.mbpb.ModelReply\" \x82\xd3\xe4\x93\x02\x1a:\x01*\"\x15/api/v1/models/upsert\x12P\n" +
	"\vModelRemove\x12\x10.mbpb.PrimaryKey\x1a\x12.mbpb.GenericReply\"\x1b\x82\xd3\xe4\x93\x02\x15*\x13/api/v1/models/{id}\x12H\n" +
	"\n" +
	"ModelQuery\x12\x10.mbpb.PrimaryKey\x1a\x10.mbpb.ModelReply\"\x16\x82\xd3\xe4\x93\x02\x10\x12\x0e/api/v1/models\x123\n" +
	"\tModelExec\x12\x10.mbpb.PrimaryKey\x1a\x12.mbpb.GenericReply\"\x00\x129\n" +
	"\x0eIncrSyncUPsert\x12\x11.mbpb.IncrRequest\x1a\x12.mbpb.GenericReply\"\x00\x128\n" +
	"\x0eIncrSyncRemove\x12\x10.mbpb.PrimaryKey\x1a\x12.mbpb.GenericReply\"\x00\x124\n" +
	"\rIncrSyncQuery\x12\x10.mbpb.PrimaryKey\x1a\x0f.mbpb.IncrReply\"\x00\x128\n" +
	"\x0eIncrSyncEnable\x12\x10.mbpb.PrimaryKey\x1a\x12.mbpb.GenericReply\"\x00\x129\n" +
	"\x0fIncrSyncDisable\x12\x10.mbpb.PrimaryKey\x1a\x12.mbpb.GenericReply\"\x00\x125\n" +
	"\vIncrSyncRun\x12\x10.mbpb.PrimaryKey\x1a\x12.mbpb.GenericReply\"\x00\x128\n" +
	"\x0eIncrSyncCancel\x12\x10.mbpb.PrimaryKey\x1a\x12.mbpb.GenericReply\"\x00\x12:\n" +
	"\x10ResetInitialSync\x12\x10.mbpb.PrimaryKey\x1a\x12.mbpb.GenericReply\"\x00\x12:\n" +
	"\x10ClearResultTable\x12\x10.mbpb.PrimaryKey\x1a\x12.mbpb.GenericReply\"\x00:@\n" +
	"\fdefault_code\x12\x1c.google.protobuf.EnumOptions\x18\xd4\b \x01(\x05R\vdefaultCode:6\n" +
	"\x04code\x12!.google.protobuf.EnumValueOptions\x18\xd5\b \x01(\x05R\x04codeBO\n" +
	"\x14com.otorp.grpc.protoB\fMBEtlpbProtoH\x01P\x01Z%github.com/forhsd/mbpb/golang/v1;mbpbb\x06proto3"

var (
	file_entrypoint_proto_rawDescOnce sync.Once
	file_entrypoint_proto_rawDescData []byte
)

func file_entrypoint_proto_rawDescGZIP() []byte {
	file_entrypoint_proto_rawDescOnce.Do(func() {
		file_entrypoint_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_entrypoint_proto_rawDesc), len(file_entrypoint_proto_rawDesc)))
	})
	return file_entrypoint_proto_rawDescData
}

var file_entrypoint_proto_enumTypes = make([]protoimpl.EnumInfo, 14)
var file_entrypoint_proto_msgTypes = make([]protoimpl.MessageInfo, 65)
var file_entrypoint_proto_goTypes = []any{
	(SyncType)(0),                         // 0: mbpb.SyncType
	(OperationType)(0),                    // 1: mbpb.OperationType
	(FlowTaskType)(0),                     // 2: mbpb.FlowTaskType
	(AcceptAction)(0),                     // 3: mbpb.AcceptAction
	(TaskType)(0),                         // 4: mbpb.TaskType
	(RunType)(0),                          // 5: mbpb.RunType
	(SourceType)(0),                       // 6: mbpb.SourceType
	(FlowDataStat)(0),                     // 7: mbpb.FlowDataStat
	(RunStatus)(0),                        // 8: mbpb.RunStatus
	(DBType)(0),                           // 9: mbpb.DBType
	(EveryType)(0),                        // 10: mbpb.EveryType
	(EnumWeek)(0),                         // 11: mbpb.EnumWeek
	(EnumMonth)(0),                        // 12: mbpb.EnumMonth
	(EveryTimeType)(0),                    // 13: mbpb.EveryTimeType
	(*PrimaryKey)(nil),                    // 14: mbpb.PrimaryKey
	(*GenericReply)(nil),                  // 15: mbpb.GenericReply
	(*IncrRequest)(nil),                   // 16: mbpb.IncrRequest
	(*IncrReply)(nil),                     // 17: mbpb.IncrReply
	(*ModelRequest)(nil),                  // 18: mbpb.ModelRequest
	(*ModelReply)(nil),                    // 19: mbpb.ModelReply
	(*SchemaQualifiedName)(nil),           // 20: mbpb.SchemaQualifiedName
	(*BatchOpRequest)(nil),                // 21: mbpb.BatchOpRequest
	(*BatchOpResponse)(nil),               // 22: mbpb.BatchOpResponse
	(*WebHookRequest)(nil),                // 23: mbpb.WebHookRequest
	(*WebHookReply)(nil),                  // 24: mbpb.WebHookReply
	(*BatchRequest)(nil),                  // 25: mbpb.BatchRequest
	(*FlowRequest)(nil),                   // 26: mbpb.FlowRequest
	(*FlowCancelReply)(nil),               // 27: mbpb.FlowCancelReply
	(*FlowReply)(nil),                     // 28: mbpb.FlowReply
	(*FlowRemoveReply)(nil),               // 29: mbpb.FlowRemoveReply
	(*WorkflowReply)(nil),                 // 30: mbpb.WorkflowReply
	(*WorkflowRequest)(nil),               // 31: mbpb.WorkflowRequest
	(*FlowEnableRequest)(nil),             // 32: mbpb.FlowEnableRequest
	(*EnableRequest)(nil),                 // 33: mbpb.EnableRequest
	(*Identifier)(nil),                    // 34: mbpb.Identifier
	(*EnableReply)(nil),                   // 35: mbpb.EnableReply
	(*FlowEnableReply)(nil),               // 36: mbpb.FlowEnableReply
	(*FlowMetadata)(nil),                  // 37: mbpb.FlowMetadata
	(*FlowMap)(nil),                       // 38: mbpb.FlowMap
	(*Request)(nil),                       // 39: mbpb.Request
	(*Over)(nil),                          // 40: mbpb.Over
	(*Reply)(nil),                         // 41: mbpb.Reply
	(*RunReply)(nil),                      // 42: mbpb.RunReply
	(*Graph)(nil),                         // 43: mbpb.Graph
	(*Status)(nil),                        // 44: mbpb.Status
	(*Edge)(nil),                          // 45: mbpb.Edge
	(*Source)(nil),                        // 46: mbpb.Source
	(*Property)(nil),                      // 47: mbpb.Property
	(*Table)(nil),                         // 48: mbpb.Table
	(*Depend)(nil),                        // 49: mbpb.Depend
	(*Column)(nil),                        // 50: mbpb.Column
	(*DatabaseRequest)(nil),               // 51: mbpb.DatabaseRequest
	(*DatabaseReply)(nil),                 // 52: mbpb.DatabaseReply
	(*DBDetail)(nil),                      // 53: mbpb.DBDetail
	(*Doris)(nil),                         // 54: mbpb.Doris
	(*GenericDB)(nil),                     // 55: mbpb.GenericDB
	(*CycleOnce)(nil),                     // 56: mbpb.CycleOnce
	(*CycleEvery)(nil),                    // 57: mbpb.CycleEvery
	(*CycleEveryTime)(nil),                // 58: mbpb.CycleEveryTime
	(*EveryExpress)(nil),                  // 59: mbpb.EveryExpress
	(*Expression)(nil),                    // 60: mbpb.Expression
	(*CycleEveryDay)(nil),                 // 61: mbpb.CycleEveryDay
	(*CycleEveryWeek)(nil),                // 62: mbpb.CycleEveryWeek
	(*CycleEveryMonth)(nil),               // 63: mbpb.CycleEveryMonth
	(*WithMonth)(nil),                     // 64: mbpb.WithMonth
	(*CycleEveryYear)(nil),                // 65: mbpb.CycleEveryYear
	(*WithQuarter)(nil),                   // 66: mbpb.WithQuarter
	(*CycleEveryQuarter)(nil),             // 67: mbpb.CycleEveryQuarter
	(*CycleHour)(nil),                     // 68: mbpb.CycleHour
	(*LifeCycle)(nil),                     // 69: mbpb.LifeCycle
	(*Crontab)(nil),                       // 70: mbpb.Crontab
	(*FQN)(nil),                           // 71: mbpb.FQN
	(*Extra)(nil),                         // 72: mbpb.Extra
	(*Error)(nil),                         // 73: mbpb.Error
	nil,                                   // 74: mbpb.FlowMetadata.BeforeFlowEntry
	nil,                                   // 75: mbpb.FlowMetadata.FlowMapEntry
	nil,                                   // 76: mbpb.Source.PrevEntry
	nil,                                   // 77: mbpb.Doris.ConnectParamsEntry
	nil,                                   // 78: mbpb.GenericDB.ConnectParamsEntry
	(*timestamppb.Timestamp)(nil),         // 79: google.protobuf.Timestamp
	(*descriptorpb.EnumOptions)(nil),      // 80: google.protobuf.EnumOptions
	(*descriptorpb.EnumValueOptions)(nil), // 81: google.protobuf.EnumValueOptions
}
var file_entrypoint_proto_depIdxs = []int32{
	73,  // 0: mbpb.GenericReply.error:type_name -> mbpb.Error
	70,  // 1: mbpb.IncrRequest.incr_cycle:type_name -> mbpb.Crontab
	20,  // 2: mbpb.IncrRequest.table_identifier:type_name -> mbpb.SchemaQualifiedName
	16,  // 3: mbpb.IncrReply.incres:type_name -> mbpb.IncrRequest
	73,  // 4: mbpb.IncrReply.error:type_name -> mbpb.Error
	18,  // 5: mbpb.ModelReply.tables:type_name -> mbpb.ModelRequest
	18,  // 6: mbpb.ModelReply.table:type_name -> mbpb.ModelRequest
	14,  // 7: mbpb.ModelReply.request:type_name -> mbpb.PrimaryKey
	73,  // 8: mbpb.ModelReply.error:type_name -> mbpb.Error
	23,  // 9: mbpb.BatchOpRequest.batch_ops:type_name -> mbpb.WebHookRequest
	24,  // 10: mbpb.BatchOpResponse.responses:type_name -> mbpb.WebHookReply
	1,   // 11: mbpb.WebHookRequest.type:type_name -> mbpb.OperationType
	70,  // 12: mbpb.WebHookRequest.crontab:type_name -> mbpb.Crontab
	23,  // 13: mbpb.WebHookReply.request:type_name -> mbpb.WebHookRequest
	73,  // 14: mbpb.WebHookReply.error:type_name -> mbpb.Error
	73,  // 15: mbpb.FlowCancelReply.error:type_name -> mbpb.Error
	43,  // 16: mbpb.FlowReply.graph:type_name -> mbpb.Graph
	44,  // 17: mbpb.FlowReply.status:type_name -> mbpb.Status
	2,   // 18: mbpb.FlowReply.taskType:type_name -> mbpb.FlowTaskType
	73,  // 19: mbpb.FlowReply.error:type_name -> mbpb.Error
	73,  // 20: mbpb.FlowRemoveReply.error:type_name -> mbpb.Error
	35,  // 21: mbpb.WorkflowReply.enableReply:type_name -> mbpb.EnableReply
	41,  // 22: mbpb.WorkflowReply.flowReply:type_name -> mbpb.Reply
	33,  // 23: mbpb.WorkflowRequest.baseworkRequest:type_name -> mbpb.EnableRequest
	39,  // 24: mbpb.WorkflowRequest.flowRequest:type_name -> mbpb.Request
	70,  // 25: mbpb.FlowEnableRequest.crontab:type_name -> mbpb.Crontab
	3,   // 26: mbpb.FlowEnableRequest.acceptAction:type_name -> mbpb.AcceptAction
	40,  // 27: mbpb.FlowEnableRequest.over:type_name -> mbpb.Over
	53,  // 28: mbpb.EnableRequest.source_db:type_name -> mbpb.DBDetail
	53,  // 29: mbpb.EnableRequest.target_db:type_name -> mbpb.DBDetail
	70,  // 30: mbpb.EnableRequest.crontab:type_name -> mbpb.Crontab
	48,  // 31: mbpb.EnableRequest.tables:type_name -> mbpb.Table
	72,  // 32: mbpb.EnableRequest.extra:type_name -> mbpb.Extra
	40,  // 33: mbpb.EnableRequest.over:type_name -> mbpb.Over
	48,  // 34: mbpb.EnableRequest.all_tables:type_name -> mbpb.Table
	48,  // 35: mbpb.EnableReply.outTable:type_name -> mbpb.Table
	50,  // 36: mbpb.EnableReply.columns:type_name -> mbpb.Column
	73,  // 37: mbpb.EnableReply.error:type_name -> mbpb.Error
	37,  // 38: mbpb.EnableReply.flowData:type_name -> mbpb.FlowMetadata
	73,  // 39: mbpb.FlowEnableReply.error:type_name -> mbpb.Error
	4,   // 40: mbpb.FlowMetadata.taskType:type_name -> mbpb.TaskType
	74,  // 41: mbpb.FlowMetadata.beforeFlow:type_name -> mbpb.FlowMetadata.BeforeFlowEntry
	43,  // 42: mbpb.FlowMetadata.afterFlow:type_name -> mbpb.Graph
	3,   // 43: mbpb.FlowMetadata.acceptAction:type_name -> mbpb.AcceptAction
	75,  // 44: mbpb.FlowMetadata.flowMap:type_name -> mbpb.FlowMetadata.FlowMapEntry
	40,  // 45: mbpb.Request.over:type_name -> mbpb.Over
	5,   // 46: mbpb.Over.runType:type_name -> mbpb.RunType
	79,  // 47: mbpb.Over.startRunTime:type_name -> google.protobuf.Timestamp
	79,  // 48: mbpb.Over.nextRunTime:type_name -> google.protobuf.Timestamp
	4,   // 49: mbpb.Over.taskType:type_name -> mbpb.TaskType
	46,  // 50: mbpb.Over.children:type_name -> mbpb.Source
	50,  // 51: mbpb.Reply.columns:type_name -> mbpb.Column
	73,  // 52: mbpb.Reply.error:type_name -> mbpb.Error
	73,  // 53: mbpb.RunReply.error:type_name -> mbpb.Error
	46,  // 54: mbpb.Graph.children:type_name -> mbpb.Source
	45,  // 55: mbpb.Graph.edges:type_name -> mbpb.Edge
	73,  // 56: mbpb.Graph.error:type_name -> mbpb.Error
	8,   // 57: mbpb.Status.runStatus:type_name -> mbpb.RunStatus
	6,   // 58: mbpb.Source.type:type_name -> mbpb.SourceType
	76,  // 59: mbpb.Source.prev:type_name -> mbpb.Source.PrevEntry
	8,   // 60: mbpb.Source.runStatus:type_name -> mbpb.RunStatus
	6,   // 61: mbpb.Property.type:type_name -> mbpb.SourceType
	46,  // 62: mbpb.Table.source:type_name -> mbpb.Source
	46,  // 63: mbpb.Table.target:type_name -> mbpb.Source
	46,  // 64: mbpb.Depend.source:type_name -> mbpb.Source
	46,  // 65: mbpb.Depend.target:type_name -> mbpb.Source
	53,  // 66: mbpb.DatabaseRequest.details:type_name -> mbpb.DBDetail
	51,  // 67: mbpb.DatabaseReply.databases:type_name -> mbpb.DatabaseRequest
	51,  // 68: mbpb.DatabaseReply.database:type_name -> mbpb.DatabaseRequest
	14,  // 69: mbpb.DatabaseReply.request:type_name -> mbpb.PrimaryKey
	73,  // 70: mbpb.DatabaseReply.error:type_name -> mbpb.Error
	9,   // 71: mbpb.DBDetail.db_type:type_name -> mbpb.DBType
	55,  // 72: mbpb.DBDetail.postgres:type_name -> mbpb.GenericDB
	54,  // 73: mbpb.DBDetail.doris:type_name -> mbpb.Doris
	55,  // 74: mbpb.DBDetail.mysql:type_name -> mbpb.GenericDB
	77,  // 75: mbpb.Doris.connect_params:type_name -> mbpb.Doris.ConnectParamsEntry
	78,  // 76: mbpb.GenericDB.connect_params:type_name -> mbpb.GenericDB.ConnectParamsEntry
	60,  // 77: mbpb.CycleOnce.expression:type_name -> mbpb.Expression
	59,  // 78: mbpb.CycleEvery.everyExpress:type_name -> mbpb.EveryExpress
	60,  // 79: mbpb.CycleEvery.expression:type_name -> mbpb.Expression
	13,  // 80: mbpb.CycleEveryTime.everyType:type_name -> mbpb.EveryTimeType
	68,  // 81: mbpb.CycleEveryTime.runTime:type_name -> mbpb.CycleHour
	61,  // 82: mbpb.CycleEveryTime.everyDay:type_name -> mbpb.CycleEveryDay
	62,  // 83: mbpb.CycleEveryTime.everyWeek:type_name -> mbpb.CycleEveryWeek
	63,  // 84: mbpb.CycleEveryTime.everyMonth:type_name -> mbpb.CycleEveryMonth
	67,  // 85: mbpb.CycleEveryTime.everyQuarter:type_name -> mbpb.CycleEveryQuarter
	65,  // 86: mbpb.CycleEveryTime.everyYear:type_name -> mbpb.CycleEveryYear
	10,  // 87: mbpb.EveryExpress.cycleType:type_name -> mbpb.EveryType
	11,  // 88: mbpb.CycleEveryWeek.week:type_name -> mbpb.EnumWeek
	12,  // 89: mbpb.WithMonth.month:type_name -> mbpb.EnumMonth
	64,  // 90: mbpb.CycleEveryYear.month:type_name -> mbpb.WithMonth
	66,  // 91: mbpb.CycleEveryQuarter.month:type_name -> mbpb.WithQuarter
	69,  // 92: mbpb.Crontab.lifeCycle:type_name -> mbpb.LifeCycle
	56,  // 93: mbpb.Crontab.cycleOnce:type_name -> mbpb.CycleOnce
	57,  // 94: mbpb.Crontab.cycleEvery:type_name -> mbpb.CycleEvery
	58,  // 95: mbpb.Crontab.cycleEveryTime:type_name -> mbpb.CycleEveryTime
	71,  // 96: mbpb.Extra.grouping:type_name -> mbpb.FQN
	71,  // 97: mbpb.Extra.selects:type_name -> mbpb.FQN
	43,  // 98: mbpb.FlowMetadata.BeforeFlowEntry.value:type_name -> mbpb.Graph
	38,  // 99: mbpb.FlowMetadata.FlowMapEntry.value:type_name -> mbpb.FlowMap
	47,  // 100: mbpb.Source.PrevEntry.value:type_name -> mbpb.Property
	80,  // 101: mbpb.default_code:extendee -> google.protobuf.EnumOptions
	81,  // 102: mbpb.code:extendee -> google.protobuf.EnumValueOptions
	33,  // 103: mbpb.MBetl.Enable:input_type -> mbpb.EnableRequest
	39,  // 104: mbpb.MBetl.Disable:input_type -> mbpb.Request
	39,  // 105: mbpb.MBetl.Run:input_type -> mbpb.Request
	39,  // 106: mbpb.MBetl.Cancel:input_type -> mbpb.Request
	39,  // 107: mbpb.MBetl.Remove:input_type -> mbpb.Request
	39,  // 108: mbpb.MBetl.DataLineage:input_type -> mbpb.Request
	32,  // 109: mbpb.MBetl.WorkflowDraft:input_type -> mbpb.FlowEnableRequest
	32,  // 110: mbpb.MBetl.WorkflowEnable:input_type -> mbpb.FlowEnableRequest
	26,  // 111: mbpb.MBetl.WorkflowDisable:input_type -> mbpb.FlowRequest
	26,  // 112: mbpb.MBetl.WorkflowRun:input_type -> mbpb.FlowRequest
	26,  // 113: mbpb.MBetl.WorkflowCancel:input_type -> mbpb.FlowRequest
	26,  // 114: mbpb.MBetl.WorkflowRemove:input_type -> mbpb.FlowRequest
	26,  // 115: mbpb.MBetl.WorkflowSpec:input_type -> mbpb.FlowRequest
	26,  // 116: mbpb.MBetl.WorkflowStatus:input_type -> mbpb.FlowRequest
	26,  // 117: mbpb.MBetl.WorkflowStatusStream:input_type -> mbpb.FlowRequest
	23,  // 118: mbpb.MBetl.ScheduledWebHook:input_type -> mbpb.WebHookRequest
	25,  // 119: mbpb.MBetl.ScheduledWebHookBatchRemove:input_type -> mbpb.BatchRequest
	21,  // 120: mbpb.MBetl.ScheduledWebHookBatchOp:input_type -> mbpb.BatchOpRequest
	51,  // 121: mbpb.MBetl.DatabaseUPsert:input_type -> mbpb.DatabaseRequest
	14,  // 122: mbpb.MBetl.DatabaseRemove:input_type -> mbpb.PrimaryKey
	14,  // 123: mbpb.MBetl.DatabaseQuery:input_type -> mbpb.PrimaryKey
	18,  // 124: mbpb.MBetl.ModelUPsert:input_type -> mbpb.ModelRequest
	14,  // 125: mbpb.MBetl.ModelRemove:input_type -> mbpb.PrimaryKey
	14,  // 126: mbpb.MBetl.ModelQuery:input_type -> mbpb.PrimaryKey
	14,  // 127: mbpb.MBetl.ModelExec:input_type -> mbpb.PrimaryKey
	16,  // 128: mbpb.MBetl.IncrSyncUPsert:input_type -> mbpb.IncrRequest
	14,  // 129: mbpb.MBetl.IncrSyncRemove:input_type -> mbpb.PrimaryKey
	14,  // 130: mbpb.MBetl.IncrSyncQuery:input_type -> mbpb.PrimaryKey
	14,  // 131: mbpb.MBetl.IncrSyncEnable:input_type -> mbpb.PrimaryKey
	14,  // 132: mbpb.MBetl.IncrSyncDisable:input_type -> mbpb.PrimaryKey
	14,  // 133: mbpb.MBetl.IncrSyncRun:input_type -> mbpb.PrimaryKey
	14,  // 134: mbpb.MBetl.IncrSyncCancel:input_type -> mbpb.PrimaryKey
	14,  // 135: mbpb.MBetl.ResetInitialSync:input_type -> mbpb.PrimaryKey
	14,  // 136: mbpb.MBetl.ClearResultTable:input_type -> mbpb.PrimaryKey
	35,  // 137: mbpb.MBetl.Enable:output_type -> mbpb.EnableReply
	41,  // 138: mbpb.MBetl.Disable:output_type -> mbpb.Reply
	41,  // 139: mbpb.MBetl.Run:output_type -> mbpb.Reply
	41,  // 140: mbpb.MBetl.Cancel:output_type -> mbpb.Reply
	73,  // 141: mbpb.MBetl.Remove:output_type -> mbpb.Error
	43,  // 142: mbpb.MBetl.DataLineage:output_type -> mbpb.Graph
	36,  // 143: mbpb.MBetl.WorkflowDraft:output_type -> mbpb.FlowEnableReply
	36,  // 144: mbpb.MBetl.WorkflowEnable:output_type -> mbpb.FlowEnableReply
	73,  // 145: mbpb.MBetl.WorkflowDisable:output_type -> mbpb.Error
	42,  // 146: mbpb.MBetl.WorkflowRun:output_type -> mbpb.RunReply
	27,  // 147: mbpb.MBetl.WorkflowCancel:output_type -> mbpb.FlowCancelReply
	29,  // 148: mbpb.MBetl.WorkflowRemove:output_type -> mbpb.FlowRemoveReply
	28,  // 149: mbpb.MBetl.WorkflowSpec:output_type -> mbpb.FlowReply
	28,  // 150: mbpb.MBetl.WorkflowStatus:output_type -> mbpb.FlowReply
	28,  // 151: mbpb.MBetl.WorkflowStatusStream:output_type -> mbpb.FlowReply
	24,  // 152: mbpb.MBetl.ScheduledWebHook:output_type -> mbpb.WebHookReply
	15,  // 153: mbpb.MBetl.ScheduledWebHookBatchRemove:output_type -> mbpb.GenericReply
	22,  // 154: mbpb.MBetl.ScheduledWebHookBatchOp:output_type -> mbpb.BatchOpResponse
	52,  // 155: mbpb.MBetl.DatabaseUPsert:output_type -> mbpb.DatabaseReply
	15,  // 156: mbpb.MBetl.DatabaseRemove:output_type -> mbpb.GenericReply
	52,  // 157: mbpb.MBetl.DatabaseQuery:output_type -> mbpb.DatabaseReply
	19,  // 158: mbpb.MBetl.ModelUPsert:output_type -> mbpb.ModelReply
	15,  // 159: mbpb.MBetl.ModelRemove:output_type -> mbpb.GenericReply
	19,  // 160: mbpb.MBetl.ModelQuery:output_type -> mbpb.ModelReply
	15,  // 161: mbpb.MBetl.ModelExec:output_type -> mbpb.GenericReply
	15,  // 162: mbpb.MBetl.IncrSyncUPsert:output_type -> mbpb.GenericReply
	15,  // 163: mbpb.MBetl.IncrSyncRemove:output_type -> mbpb.GenericReply
	17,  // 164: mbpb.MBetl.IncrSyncQuery:output_type -> mbpb.IncrReply
	15,  // 165: mbpb.MBetl.IncrSyncEnable:output_type -> mbpb.GenericReply
	15,  // 166: mbpb.MBetl.IncrSyncDisable:output_type -> mbpb.GenericReply
	15,  // 167: mbpb.MBetl.IncrSyncRun:output_type -> mbpb.GenericReply
	15,  // 168: mbpb.MBetl.IncrSyncCancel:output_type -> mbpb.GenericReply
	15,  // 169: mbpb.MBetl.ResetInitialSync:output_type -> mbpb.GenericReply
	15,  // 170: mbpb.MBetl.ClearResultTable:output_type -> mbpb.GenericReply
	137, // [137:171] is the sub-list for method output_type
	103, // [103:137] is the sub-list for method input_type
	103, // [103:103] is the sub-list for extension type_name
	101, // [101:103] is the sub-list for extension extendee
	0,   // [0:101] is the sub-list for field type_name
}

func init() { file_entrypoint_proto_init() }
func file_entrypoint_proto_init() {
	if File_entrypoint_proto != nil {
		return
	}
	file_entrypoint_proto_msgTypes[0].OneofWrappers = []any{}
	file_entrypoint_proto_msgTypes[1].OneofWrappers = []any{}
	file_entrypoint_proto_msgTypes[2].OneofWrappers = []any{
		(*IncrRequest_Basic)(nil),
		(*IncrRequest_Template)(nil),
	}
	file_entrypoint_proto_msgTypes[3].OneofWrappers = []any{}
	file_entrypoint_proto_msgTypes[5].OneofWrappers = []any{}
	file_entrypoint_proto_msgTypes[10].OneofWrappers = []any{}
	file_entrypoint_proto_msgTypes[12].OneofWrappers = []any{}
	file_entrypoint_proto_msgTypes[13].OneofWrappers = []any{}
	file_entrypoint_proto_msgTypes[14].OneofWrappers = []any{}
	file_entrypoint_proto_msgTypes[15].OneofWrappers = []any{}
	file_entrypoint_proto_msgTypes[16].OneofWrappers = []any{
		(*WorkflowReply_EnableReply)(nil),
		(*WorkflowReply_FlowReply)(nil),
	}
	file_entrypoint_proto_msgTypes[17].OneofWrappers = []any{
		(*WorkflowRequest_BaseworkRequest)(nil),
		(*WorkflowRequest_FlowRequest)(nil),
	}
	file_entrypoint_proto_msgTypes[18].OneofWrappers = []any{}
	file_entrypoint_proto_msgTypes[19].OneofWrappers = []any{}
	file_entrypoint_proto_msgTypes[21].OneofWrappers = []any{}
	file_entrypoint_proto_msgTypes[22].OneofWrappers = []any{}
	file_entrypoint_proto_msgTypes[25].OneofWrappers = []any{}
	file_entrypoint_proto_msgTypes[26].OneofWrappers = []any{}
	file_entrypoint_proto_msgTypes[27].OneofWrappers = []any{}
	file_entrypoint_proto_msgTypes[28].OneofWrappers = []any{}
	file_entrypoint_proto_msgTypes[29].OneofWrappers = []any{}
	file_entrypoint_proto_msgTypes[32].OneofWrappers = []any{}
	file_entrypoint_proto_msgTypes[34].OneofWrappers = []any{}
	file_entrypoint_proto_msgTypes[38].OneofWrappers = []any{}
	file_entrypoint_proto_msgTypes[39].OneofWrappers = []any{
		(*DBDetail_Postgres)(nil),
		(*DBDetail_Doris)(nil),
		(*DBDetail_Mysql)(nil),
	}
	file_entrypoint_proto_msgTypes[43].OneofWrappers = []any{}
	file_entrypoint_proto_msgTypes[44].OneofWrappers = []any{
		(*CycleEveryTime_EveryDay)(nil),
		(*CycleEveryTime_EveryWeek)(nil),
		(*CycleEveryTime_EveryMonth)(nil),
		(*CycleEveryTime_EveryQuarter)(nil),
		(*CycleEveryTime_EveryYear)(nil),
	}
	file_entrypoint_proto_msgTypes[55].OneofWrappers = []any{}
	file_entrypoint_proto_msgTypes[56].OneofWrappers = []any{
		(*Crontab_CycleOnce)(nil),
		(*Crontab_CycleEvery)(nil),
		(*Crontab_CycleEveryTime)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_entrypoint_proto_rawDesc), len(file_entrypoint_proto_rawDesc)),
			NumEnums:      14,
			NumMessages:   65,
			NumExtensions: 2,
			NumServices:   1,
		},
		GoTypes:           file_entrypoint_proto_goTypes,
		DependencyIndexes: file_entrypoint_proto_depIdxs,
		EnumInfos:         file_entrypoint_proto_enumTypes,
		MessageInfos:      file_entrypoint_proto_msgTypes,
		ExtensionInfos:    file_entrypoint_proto_extTypes,
	}.Build()
	File_entrypoint_proto = out.File
	file_entrypoint_proto_goTypes = nil
	file_entrypoint_proto_depIdxs = nil
}
