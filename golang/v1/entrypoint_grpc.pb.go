// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: entrypoint.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MBetl_Enable_FullMethodName  = "/proto.MBetl/Enable"
	MBetl_Disable_FullMethodName = "/proto.MBetl/Disable"
	MBetl_Run_FullMethodName     = "/proto.MBetl/Run"
	MBetl_Cancel_FullMethodName  = "/proto.MBetl/Cancel"
)

// MBetlClient is the client API for MBetl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MBetlClient interface {
	// 启用
	Enable(ctx context.Context, in *EnableRequest, opts ...grpc.CallOption) (*EnableReply, error)
	// 禁用
	Disable(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
	// 运行
	Run(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
	// 取消
	Cancel(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
}

type mBetlClient struct {
	cc grpc.ClientConnInterface
}

func NewMBetlClient(cc grpc.ClientConnInterface) MBetlClient {
	return &mBetlClient{cc}
}

func (c *mBetlClient) Enable(ctx context.Context, in *EnableRequest, opts ...grpc.CallOption) (*EnableReply, error) {
	out := new(EnableReply)
	err := c.cc.Invoke(ctx, MBetl_Enable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mBetlClient) Disable(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, MBetl_Disable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mBetlClient) Run(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, MBetl_Run_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mBetlClient) Cancel(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, MBetl_Cancel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MBetlServer is the server API for MBetl service.
// All implementations must embed UnimplementedMBetlServer
// for forward compatibility
type MBetlServer interface {
	// 启用
	Enable(context.Context, *EnableRequest) (*EnableReply, error)
	// 禁用
	Disable(context.Context, *Request) (*Reply, error)
	// 运行
	Run(context.Context, *Request) (*Reply, error)
	// 取消
	Cancel(context.Context, *Request) (*Reply, error)
	mustEmbedUnimplementedMBetlServer()
}

// UnimplementedMBetlServer must be embedded to have forward compatible implementations.
type UnimplementedMBetlServer struct {
}

func (UnimplementedMBetlServer) Enable(context.Context, *EnableRequest) (*EnableReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enable not implemented")
}
func (UnimplementedMBetlServer) Disable(context.Context, *Request) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disable not implemented")
}
func (UnimplementedMBetlServer) Run(context.Context, *Request) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedMBetlServer) Cancel(context.Context, *Request) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancel not implemented")
}
func (UnimplementedMBetlServer) mustEmbedUnimplementedMBetlServer() {}

// UnsafeMBetlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MBetlServer will
// result in compilation errors.
type UnsafeMBetlServer interface {
	mustEmbedUnimplementedMBetlServer()
}

func RegisterMBetlServer(s grpc.ServiceRegistrar, srv MBetlServer) {
	s.RegisterService(&MBetl_ServiceDesc, srv)
}

func _MBetl_Enable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MBetlServer).Enable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MBetl_Enable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MBetlServer).Enable(ctx, req.(*EnableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MBetl_Disable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MBetlServer).Disable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MBetl_Disable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MBetlServer).Disable(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MBetl_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MBetlServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MBetl_Run_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MBetlServer).Run(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MBetl_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MBetlServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MBetl_Cancel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MBetlServer).Cancel(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// MBetl_ServiceDesc is the grpc.ServiceDesc for MBetl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MBetl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MBetl",
	HandlerType: (*MBetlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Enable",
			Handler:    _MBetl_Enable_Handler,
		},
		{
			MethodName: "Disable",
			Handler:    _MBetl_Disable_Handler,
		},
		{
			MethodName: "Run",
			Handler:    _MBetl_Run_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _MBetl_Cancel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "entrypoint.proto",
}
