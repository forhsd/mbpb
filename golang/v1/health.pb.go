// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: health.proto

package mbpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HealthRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthRequest) Reset() {
	*x = HealthRequest{}
	mi := &file_health_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthRequest) ProtoMessage() {}

func (x *HealthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_health_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthRequest.ProtoReflect.Descriptor instead.
func (*HealthRequest) Descriptor() ([]byte, []int) {
	return file_health_proto_rawDescGZIP(), []int{0}
}

func (x *HealthRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type HealthReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Healthy       bool                   `protobuf:"varint,1,opt,name=healthy,proto3" json:"healthy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthReply) Reset() {
	*x = HealthReply{}
	mi := &file_health_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthReply) ProtoMessage() {}

func (x *HealthReply) ProtoReflect() protoreflect.Message {
	mi := &file_health_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthReply.ProtoReflect.Descriptor instead.
func (*HealthReply) Descriptor() ([]byte, []int) {
	return file_health_proto_rawDescGZIP(), []int{1}
}

func (x *HealthReply) GetHealthy() bool {
	if x != nil {
		return x.Healthy
	}
	return false
}

type Ack struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	SequenceID    string                 `protobuf:"bytes,2,opt,name=sequenceID,proto3" json:"sequenceID,omitempty"`
	Error         *Error                 `protobuf:"bytes,3,opt,name=error,proto3,oneof" json:"error,omitempty"`
	Now           *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=now,proto3,oneof" json:"now,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ack) Reset() {
	*x = Ack{}
	mi := &file_health_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ack) ProtoMessage() {}

func (x *Ack) ProtoReflect() protoreflect.Message {
	mi := &file_health_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ack.ProtoReflect.Descriptor instead.
func (*Ack) Descriptor() ([]byte, []int) {
	return file_health_proto_rawDescGZIP(), []int{2}
}

func (x *Ack) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Ack) GetSequenceID() string {
	if x != nil {
		return x.SequenceID
	}
	return ""
}

func (x *Ack) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *Ack) GetNow() *timestamppb.Timestamp {
	if x != nil {
		return x.Now
	}
	return nil
}

// 详情
type Detail struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RowsCount     *int64                 `protobuf:"varint,1,opt,name=rowsCount,proto3,oneof" json:"rowsCount,omitempty"` // 行数
	Columns       []*Column              `protobuf:"bytes,2,rep,name=columns,proto3" json:"columns,omitempty"`            // 字段类
	OutTable      *Table                 `protobuf:"bytes,3,opt,name=outTable,proto3,oneof" json:"outTable,omitempty"`    // 实体表
	StartTime     string                 `protobuf:"bytes,4,opt,name=startTime,proto3" json:"startTime,omitempty"`        // 开始运行时间 精确到纳秒
	EndTime       string                 `protobuf:"bytes,5,opt,name=endTime,proto3" json:"endTime,omitempty"`            // 结束运行时间 精确到纳秒
	SequenceId    string                 `protobuf:"bytes,6,opt,name=sequenceId,proto3" json:"sequenceId,omitempty"`      // 节点sequenceId
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Detail) Reset() {
	*x = Detail{}
	mi := &file_health_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Detail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Detail) ProtoMessage() {}

func (x *Detail) ProtoReflect() protoreflect.Message {
	mi := &file_health_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Detail.ProtoReflect.Descriptor instead.
func (*Detail) Descriptor() ([]byte, []int) {
	return file_health_proto_rawDescGZIP(), []int{3}
}

func (x *Detail) GetRowsCount() int64 {
	if x != nil && x.RowsCount != nil {
		return *x.RowsCount
	}
	return 0
}

func (x *Detail) GetColumns() []*Column {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *Detail) GetOutTable() *Table {
	if x != nil {
		return x.OutTable
	}
	return nil
}

func (x *Detail) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *Detail) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *Detail) GetSequenceId() string {
	if x != nil {
		return x.SequenceId
	}
	return ""
}

type NodeDetail struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	EnterpriseID  string                 `protobuf:"bytes,2,opt,name=enterpriseID,proto3" json:"enterpriseID,omitempty"`
	CardId        int64                  `protobuf:"varint,3,opt,name=cardId,proto3" json:"cardId,omitempty"` // cardId
	SequenceID    string                 `protobuf:"bytes,4,opt,name=sequenceID,proto3" json:"sequenceID,omitempty"`
	Detail        *Detail                `protobuf:"bytes,5,opt,name=detail,proto3" json:"detail,omitempty"` // card detail
	RunStatus     RunStatus              `protobuf:"varint,6,opt,name=runStatus,proto3,enum=mbpb.RunStatus" json:"runStatus,omitempty"`
	TargetDb      *DBDetail              `protobuf:"bytes,7,opt,name=target_db,json=targetDb,proto3" json:"target_db,omitempty"`
	Error         *Error                 `protobuf:"bytes,8,opt,name=error,proto3,oneof" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodeDetail) Reset() {
	*x = NodeDetail{}
	mi := &file_health_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeDetail) ProtoMessage() {}

func (x *NodeDetail) ProtoReflect() protoreflect.Message {
	mi := &file_health_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeDetail.ProtoReflect.Descriptor instead.
func (*NodeDetail) Descriptor() ([]byte, []int) {
	return file_health_proto_rawDescGZIP(), []int{4}
}

func (x *NodeDetail) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *NodeDetail) GetEnterpriseID() string {
	if x != nil {
		return x.EnterpriseID
	}
	return ""
}

func (x *NodeDetail) GetCardId() int64 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *NodeDetail) GetSequenceID() string {
	if x != nil {
		return x.SequenceID
	}
	return ""
}

func (x *NodeDetail) GetDetail() *Detail {
	if x != nil {
		return x.Detail
	}
	return nil
}

func (x *NodeDetail) GetRunStatus() RunStatus {
	if x != nil {
		return x.RunStatus
	}
	return RunStatus_Unknown
}

func (x *NodeDetail) GetTargetDb() *DBDetail {
	if x != nil {
		return x.TargetDb
	}
	return nil
}

func (x *NodeDetail) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// 概览
type Overview struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Key            string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`                                   //
	Owner          string                 `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`                               // 节点
	EnterpriseID   string                 `protobuf:"bytes,3,opt,name=enterpriseID,proto3" json:"enterpriseID,omitempty"`                 // 企业ID
	CardId         int64                  `protobuf:"varint,4,opt,name=cardId,proto3" json:"cardId,omitempty"`                            // CardId
	FlowId         int64                  `protobuf:"varint,5,opt,name=flowId,proto3" json:"flowId,omitempty"`                            // 工作流ID
	UserId         int64                  `protobuf:"varint,6,opt,name=userId,proto3" json:"userId,omitempty"`                            // 创建人
	SequenceID     string                 `protobuf:"bytes,7,opt,name=sequenceID,proto3" json:"sequenceID,omitempty"`                     // 序列ID
	QueryUPtime    *int64                 `protobuf:"varint,8,opt,name=queryUPtime,proto3,oneof" json:"queryUPtime,omitempty"`            // 查询耗时(毫秒)
	WriteUPtime    *int64                 `protobuf:"varint,9,opt,name=writeUPtime,proto3,oneof" json:"writeUPtime,omitempty"`            // 写入耗时(毫秒)
	TakeUpTime     *int64                 `protobuf:"varint,10,opt,name=takeUpTime,proto3,oneof" json:"takeUpTime,omitempty"`             // 运行耗时(毫秒)
	RunStatus      RunStatus              `protobuf:"varint,11,opt,name=runStatus,proto3,enum=mbpb.RunStatus" json:"runStatus,omitempty"` // 运行状态
	Progress       int32                  `protobuf:"varint,12,opt,name=progress,proto3" json:"progress,omitempty"`                       // 当前进度
	StartTime      string                 `protobuf:"bytes,13,opt,name=startTime,proto3" json:"startTime,omitempty"`                      // 开始运行时间 精确到纳秒
	EndTime        string                 `protobuf:"bytes,14,opt,name=endTime,proto3" json:"endTime,omitempty"`                          // 结束运行时间 精确到纳秒
	NextRunTime    string                 `protobuf:"bytes,15,opt,name=nextRunTime,proto3" json:"nextRunTime,omitempty"`                  // 下次运行时间 精确到纳秒
	Detail         *Detail                `protobuf:"bytes,16,opt,name=detail,proto3" json:"detail,omitempty"`                            // 详情
	Graph          *Graph                 `protobuf:"bytes,17,opt,name=graph,proto3,oneof" json:"graph,omitempty"`                        // 工作流图形
	FlowDetail     []*NodeDetail          `protobuf:"bytes,18,rep,name=flowDetail,proto3" json:"flowDetail,omitempty"`                    // 工作流节点响应集
	RunType        RunType                `protobuf:"varint,19,opt,name=runType,proto3,enum=mbpb.RunType" json:"runType,omitempty"`       // 运行类型
	TaskType       TaskType               `protobuf:"varint,20,opt,name=taskType,proto3,enum=mbpb.TaskType" json:"taskType,omitempty"`    // 任务类型
	FlowSequenceID string                 `protobuf:"bytes,21,opt,name=flowSequenceID,proto3" json:"flowSequenceID,omitempty"`            // 工作流唯一标识
	Message        *string                `protobuf:"bytes,22,opt,name=message,proto3,oneof" json:"message,omitempty"`                    // 额外消息
	TargetDb       *DBDetail              `protobuf:"bytes,23,opt,name=target_db,json=targetDb,proto3" json:"target_db,omitempty"`        // 目标数据库信息
	Error          *Error                 `protobuf:"bytes,24,opt,name=error,proto3,oneof" json:"error,omitempty"`                        // 错误明细
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Overview) Reset() {
	*x = Overview{}
	mi := &file_health_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Overview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Overview) ProtoMessage() {}

func (x *Overview) ProtoReflect() protoreflect.Message {
	mi := &file_health_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Overview.ProtoReflect.Descriptor instead.
func (*Overview) Descriptor() ([]byte, []int) {
	return file_health_proto_rawDescGZIP(), []int{5}
}

func (x *Overview) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Overview) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Overview) GetEnterpriseID() string {
	if x != nil {
		return x.EnterpriseID
	}
	return ""
}

func (x *Overview) GetCardId() int64 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *Overview) GetFlowId() int64 {
	if x != nil {
		return x.FlowId
	}
	return 0
}

func (x *Overview) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Overview) GetSequenceID() string {
	if x != nil {
		return x.SequenceID
	}
	return ""
}

func (x *Overview) GetQueryUPtime() int64 {
	if x != nil && x.QueryUPtime != nil {
		return *x.QueryUPtime
	}
	return 0
}

func (x *Overview) GetWriteUPtime() int64 {
	if x != nil && x.WriteUPtime != nil {
		return *x.WriteUPtime
	}
	return 0
}

func (x *Overview) GetTakeUpTime() int64 {
	if x != nil && x.TakeUpTime != nil {
		return *x.TakeUpTime
	}
	return 0
}

func (x *Overview) GetRunStatus() RunStatus {
	if x != nil {
		return x.RunStatus
	}
	return RunStatus_Unknown
}

func (x *Overview) GetProgress() int32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *Overview) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *Overview) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *Overview) GetNextRunTime() string {
	if x != nil {
		return x.NextRunTime
	}
	return ""
}

func (x *Overview) GetDetail() *Detail {
	if x != nil {
		return x.Detail
	}
	return nil
}

func (x *Overview) GetGraph() *Graph {
	if x != nil {
		return x.Graph
	}
	return nil
}

func (x *Overview) GetFlowDetail() []*NodeDetail {
	if x != nil {
		return x.FlowDetail
	}
	return nil
}

func (x *Overview) GetRunType() RunType {
	if x != nil {
		return x.RunType
	}
	return RunType_Cycle
}

func (x *Overview) GetTaskType() TaskType {
	if x != nil {
		return x.TaskType
	}
	return TaskType_BasicTask
}

func (x *Overview) GetFlowSequenceID() string {
	if x != nil {
		return x.FlowSequenceID
	}
	return ""
}

func (x *Overview) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *Overview) GetTargetDb() *DBDetail {
	if x != nil {
		return x.TargetDb
	}
	return nil
}

func (x *Overview) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

var File_health_proto protoreflect.FileDescriptor

const file_health_proto_rawDesc = "" +
	"\n" +
	"\fhealth.proto\x12\x04mbpb\x1a\x10entrypoint.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\x1f\n" +
	"\rHealthRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\"'\n" +
	"\vHealthReply\x12\x18\n" +
	"\ahealthy\x18\x01 \x01(\bR\ahealthy\"\xa4\x01\n" +
	"\x03Ack\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x1e\n" +
	"\n" +
	"sequenceID\x18\x02 \x01(\tR\n" +
	"sequenceID\x12&\n" +
	"\x05error\x18\x03 \x01(\v2\v.mbpb.ErrorH\x00R\x05error\x88\x01\x01\x121\n" +
	"\x03now\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampH\x01R\x03now\x88\x01\x01B\b\n" +
	"\x06_errorB\x06\n" +
	"\x04_now\"\xf4\x01\n" +
	"\x06Detail\x12!\n" +
	"\trowsCount\x18\x01 \x01(\x03H\x00R\trowsCount\x88\x01\x01\x12&\n" +
	"\acolumns\x18\x02 \x03(\v2\f.mbpb.ColumnR\acolumns\x12,\n" +
	"\boutTable\x18\x03 \x01(\v2\v.mbpb.TableH\x01R\boutTable\x88\x01\x01\x12\x1c\n" +
	"\tstartTime\x18\x04 \x01(\tR\tstartTime\x12\x18\n" +
	"\aendTime\x18\x05 \x01(\tR\aendTime\x12\x1e\n" +
	"\n" +
	"sequenceId\x18\x06 \x01(\tR\n" +
	"sequenceIdB\f\n" +
	"\n" +
	"_rowsCountB\v\n" +
	"\t_outTable\"\xae\x02\n" +
	"\n" +
	"NodeDetail\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\"\n" +
	"\fenterpriseID\x18\x02 \x01(\tR\fenterpriseID\x12\x16\n" +
	"\x06cardId\x18\x03 \x01(\x03R\x06cardId\x12\x1e\n" +
	"\n" +
	"sequenceID\x18\x04 \x01(\tR\n" +
	"sequenceID\x12$\n" +
	"\x06detail\x18\x05 \x01(\v2\f.mbpb.DetailR\x06detail\x12-\n" +
	"\trunStatus\x18\x06 \x01(\x0e2\x0f.mbpb.RunStatusR\trunStatus\x12+\n" +
	"\ttarget_db\x18\a \x01(\v2\x0e.mbpb.DBDetailR\btargetDb\x12&\n" +
	"\x05error\x18\b \x01(\v2\v.mbpb.ErrorH\x00R\x05error\x88\x01\x01B\b\n" +
	"\x06_error\"\x96\a\n" +
	"\bOverview\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05owner\x18\x02 \x01(\tR\x05owner\x12\"\n" +
	"\fenterpriseID\x18\x03 \x01(\tR\fenterpriseID\x12\x16\n" +
	"\x06cardId\x18\x04 \x01(\x03R\x06cardId\x12\x16\n" +
	"\x06flowId\x18\x05 \x01(\x03R\x06flowId\x12\x16\n" +
	"\x06userId\x18\x06 \x01(\x03R\x06userId\x12\x1e\n" +
	"\n" +
	"sequenceID\x18\a \x01(\tR\n" +
	"sequenceID\x12%\n" +
	"\vqueryUPtime\x18\b \x01(\x03H\x00R\vqueryUPtime\x88\x01\x01\x12%\n" +
	"\vwriteUPtime\x18\t \x01(\x03H\x01R\vwriteUPtime\x88\x01\x01\x12#\n" +
	"\n" +
	"takeUpTime\x18\n" +
	" \x01(\x03H\x02R\n" +
	"takeUpTime\x88\x01\x01\x12-\n" +
	"\trunStatus\x18\v \x01(\x0e2\x0f.mbpb.RunStatusR\trunStatus\x12\x1a\n" +
	"\bprogress\x18\f \x01(\x05R\bprogress\x12\x1c\n" +
	"\tstartTime\x18\r \x01(\tR\tstartTime\x12\x18\n" +
	"\aendTime\x18\x0e \x01(\tR\aendTime\x12 \n" +
	"\vnextRunTime\x18\x0f \x01(\tR\vnextRunTime\x12$\n" +
	"\x06detail\x18\x10 \x01(\v2\f.mbpb.DetailR\x06detail\x12&\n" +
	"\x05graph\x18\x11 \x01(\v2\v.mbpb.GraphH\x03R\x05graph\x88\x01\x01\x120\n" +
	"\n" +
	"flowDetail\x18\x12 \x03(\v2\x10.mbpb.NodeDetailR\n" +
	"flowDetail\x12'\n" +
	"\arunType\x18\x13 \x01(\x0e2\r.mbpb.RunTypeR\arunType\x12*\n" +
	"\btaskType\x18\x14 \x01(\x0e2\x0e.mbpb.TaskTypeR\btaskType\x12&\n" +
	"\x0eflowSequenceID\x18\x15 \x01(\tR\x0eflowSequenceID\x12\x1d\n" +
	"\amessage\x18\x16 \x01(\tH\x04R\amessage\x88\x01\x01\x12+\n" +
	"\ttarget_db\x18\x17 \x01(\v2\x0e.mbpb.DBDetailR\btargetDb\x12&\n" +
	"\x05error\x18\x18 \x01(\v2\v.mbpb.ErrorH\x05R\x05error\x88\x01\x01B\x0e\n" +
	"\f_queryUPtimeB\x0e\n" +
	"\f_writeUPtimeB\r\n" +
	"\v_takeUpTimeB\b\n" +
	"\x06_graphB\n" +
	"\n" +
	"\b_messageB\b\n" +
	"\x06_error2\xa9\x01\n" +
	"\x06MBLink\x126\n" +
	"\x06Health\x12\x13.mbpb.HealthRequest\x1a\x11.mbpb.HealthReply\"\x00(\x010\x01\x12)\n" +
	"\x06ReView\x12\x0e.mbpb.Overview\x1a\t.mbpb.Ack\"\x00(\x010\x01\x12<\n" +
	"\bWorkflow\x12\x15.mbpb.WorkflowRequest\x1a\x13.mbpb.WorkflowReply\"\x00(\x010\x01BP\n" +
	"\x15com.health.grpc.protoB\fMBEtlpbProtoH\x01P\x01Z%github.com/forhsd/mbpb/golang/v1;mbpbb\x06proto3"

var (
	file_health_proto_rawDescOnce sync.Once
	file_health_proto_rawDescData []byte
)

func file_health_proto_rawDescGZIP() []byte {
	file_health_proto_rawDescOnce.Do(func() {
		file_health_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_health_proto_rawDesc), len(file_health_proto_rawDesc)))
	})
	return file_health_proto_rawDescData
}

var file_health_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_health_proto_goTypes = []any{
	(*HealthRequest)(nil),         // 0: mbpb.HealthRequest
	(*HealthReply)(nil),           // 1: mbpb.HealthReply
	(*Ack)(nil),                   // 2: mbpb.Ack
	(*Detail)(nil),                // 3: mbpb.Detail
	(*NodeDetail)(nil),            // 4: mbpb.NodeDetail
	(*Overview)(nil),              // 5: mbpb.Overview
	(*Error)(nil),                 // 6: mbpb.Error
	(*timestamppb.Timestamp)(nil), // 7: google.protobuf.Timestamp
	(*Column)(nil),                // 8: mbpb.Column
	(*Table)(nil),                 // 9: mbpb.Table
	(RunStatus)(0),                // 10: mbpb.RunStatus
	(*DBDetail)(nil),              // 11: mbpb.DBDetail
	(*Graph)(nil),                 // 12: mbpb.Graph
	(RunType)(0),                  // 13: mbpb.RunType
	(TaskType)(0),                 // 14: mbpb.TaskType
	(*WorkflowRequest)(nil),       // 15: mbpb.WorkflowRequest
	(*WorkflowReply)(nil),         // 16: mbpb.WorkflowReply
}
var file_health_proto_depIdxs = []int32{
	6,  // 0: mbpb.Ack.error:type_name -> mbpb.Error
	7,  // 1: mbpb.Ack.now:type_name -> google.protobuf.Timestamp
	8,  // 2: mbpb.Detail.columns:type_name -> mbpb.Column
	9,  // 3: mbpb.Detail.outTable:type_name -> mbpb.Table
	3,  // 4: mbpb.NodeDetail.detail:type_name -> mbpb.Detail
	10, // 5: mbpb.NodeDetail.runStatus:type_name -> mbpb.RunStatus
	11, // 6: mbpb.NodeDetail.target_db:type_name -> mbpb.DBDetail
	6,  // 7: mbpb.NodeDetail.error:type_name -> mbpb.Error
	10, // 8: mbpb.Overview.runStatus:type_name -> mbpb.RunStatus
	3,  // 9: mbpb.Overview.detail:type_name -> mbpb.Detail
	12, // 10: mbpb.Overview.graph:type_name -> mbpb.Graph
	4,  // 11: mbpb.Overview.flowDetail:type_name -> mbpb.NodeDetail
	13, // 12: mbpb.Overview.runType:type_name -> mbpb.RunType
	14, // 13: mbpb.Overview.taskType:type_name -> mbpb.TaskType
	11, // 14: mbpb.Overview.target_db:type_name -> mbpb.DBDetail
	6,  // 15: mbpb.Overview.error:type_name -> mbpb.Error
	0,  // 16: mbpb.MBLink.Health:input_type -> mbpb.HealthRequest
	5,  // 17: mbpb.MBLink.ReView:input_type -> mbpb.Overview
	15, // 18: mbpb.MBLink.Workflow:input_type -> mbpb.WorkflowRequest
	1,  // 19: mbpb.MBLink.Health:output_type -> mbpb.HealthReply
	2,  // 20: mbpb.MBLink.ReView:output_type -> mbpb.Ack
	16, // 21: mbpb.MBLink.Workflow:output_type -> mbpb.WorkflowReply
	19, // [19:22] is the sub-list for method output_type
	16, // [16:19] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_health_proto_init() }
func file_health_proto_init() {
	if File_health_proto != nil {
		return
	}
	file_entrypoint_proto_init()
	file_health_proto_msgTypes[2].OneofWrappers = []any{}
	file_health_proto_msgTypes[3].OneofWrappers = []any{}
	file_health_proto_msgTypes[4].OneofWrappers = []any{}
	file_health_proto_msgTypes[5].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_health_proto_rawDesc), len(file_health_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_health_proto_goTypes,
		DependencyIndexes: file_health_proto_depIdxs,
		MessageInfos:      file_health_proto_msgTypes,
	}.Build()
	File_health_proto = out.File
	file_health_proto_goTypes = nil
	file_health_proto_depIdxs = nil
}
